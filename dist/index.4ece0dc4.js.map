{"mappings":"ACAaA,SAAAA,iBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA;IAAAA,IAAAA,IAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,EAAAA,CAAAA,EAAAA,CAAAA;QAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,AAAAA;QAAAA,CAAAA,CAAAA,UAAAA,GAAAA,CAAAA,CAAAA,UAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,YAAAA,GAAAA,CAAAA,CAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,QAAAA,GAAAA,CAAAA,CAAAA,CAAAA,AAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EAAAA,CAAAA,CAAAA;KAAAA;CAAAA;AAAAA,SAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;IAAAA,OAAAA,CAAAA,IAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,SAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,IAAAA,iBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,WAAAA,EAAAA;QAAAA,QAAAA,EAAAA,CAAAA,CAAAA;KAAAA,CAAAA,EAAAA,CAAAA,CAAAA;CAAAA;AAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAAA,EAAAA;IAAAA,QAAAA,IAAAA,OAAAA,OAAAA,IAAAA,WAAAA,IAAAA,OAAAA,MAAAA,GAAAA,MAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,UAAAA,IAAAA,OAAAA,MAAAA,IAAAA,MAAAA,CAAAA,GAAAA,GAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAAA,AAAAA,CAAAA,CAAAA,GAAAA,WAAAA,IAAAA,OAAAA,UAAAA,GAAAA,UAAAA,GAAAA,CAAAA,IAAAA,IAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,EAAAA;CAAAA,CAAAA,IAAAA,EAAAA,WAAAA;IAAAA,YAAAA,CAAAA;IAAAA,IAAAA,EAAAA,GAA+B,kCAAA,ECG/BC,CAAAA,GAAS,CAAA,EACTC,CAAAA,GAAY,CAAA,EAGZC,EAAAA,GAAS;QACpBC,OAAAA,EARqB,CAAA;QASrBC,OAAAA,EARqB,CAAA;QASrBC,IAAAA,EARkB,CAAA;QASlBL,MAAAA,EAAAA,CAAAA;QACAC,SAAAA,EAAAA,CAAAA;QACAK,QAAAA,EARsB,CAAA;QAStBC,SAAAA,EARuB,CAAA;KAAA,AAAA;IAAA,SCNTC,EAAAA,CAAMC,CAAAA,EAAAA;QACpBA,CAAAA,CAAMC,MAAAA,GAAS,CAAA;KAAA;IAAA,SCDDC,EAAAA,CAAMC,CAAAA,EAAWC,CAAAA,EAAOC,CAAAA,EAAAA;QAAAA,OAC/BC,KAAAA,CAAMC,SAAAA,CAAUL,KAAAA,CAAMM,IAAAA,CAAKL,CAAAA,EAAWC,CAAAA,EAAOC,CAAAA,CAAAA,CAAAA;KAAAA;IAAAA,SCAtCI,EAAAA,CAAMC,CAAAA,EAAAA;QAAAA,OACbA,CAAAA,CAAKC,IAAAA,CAAAA,KAAAA,CAALD,CAAAA,EAAAA;YAAU,IAAA;SAAA,CAAA,MAAA,CAASR,EAAAA,CAAMU,SAAAA,EAAW,CAAA,CAAA,CAAA,CAAA,CAAA;KCFzB;IAAA,SAAPC,CAAAA,GAAAA,EAAAA;IAAAA,ICAAC,EAAAA,GAAWC,UAAAA,AAAAA;IAAAA,SCARC,EAAAA,CAAIN,CAAAA,EAAAA;QAAAA,OACXO,qBAAAA,CAAsBP,CAAAA,CAAAA,CAAAA;KAAAA;IAAAA,SCAtBQ,EAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAAA;QAAAA,OAAAA,OACNA,CAAAA,KAAYD,CAAAA,CAAAA;KAAAA;IAAAA,SAEZE,CAAAA,CAASD,CAAAA,EAAAA;QAAAA,OAAAA,CACfE,EAAAA,CAAOF,CAAAA,CAAAA,IAAYF,EAAAA,CAAO,QAAA,EAAUE,CAAAA,CAAAA,CAAAA;KAAAA;IAAAA,IAEjCG,EAAAA,GAAUjB,KAAAA,CAAMiB,OAAAA,EAChBC,EAAAA,GAAaf,EAAAA,CAAMS,EAAAA,EAAQ,UAAA,CAAA,EAC3BO,EAAAA,GAAWhB,EAAAA,CAAMS,EAAAA,EAAQ,QAAA,CAAA,EACzBQ,EAAAA,GAAcjB,EAAAA,CAAMS,EAAAA,EAAQ,WAAA,CAAA,AAAA;IAAA,SACzBI,EAAAA,CAAOF,CAAAA,EAAAA;QAAAA,OACF,IAAA,KAAZA,CAAAA,CAAAA;KAAAA;IAAAA,SAEOO,EAAAA,CAAcP,CAAAA,EAAAA;QAAAA,OACrBA,CAAAA,YAAmBQ,WAAAA,CAAAA;KAAAA;IAAAA,SCdZC,EAAAA,CAAQC,CAAAA,EAAAA;QAAAA,OACfP,EAAAA,CAAQO,CAAAA,CAAAA,GAASA,CAAAA,GAAQ;YAACA,CAAAA;SAAAA,CAAAA;KAAAA;IAAAA,SCDnBC,EAAAA,CAAQC,CAAAA,EAAQC,CAAAA,EAAAA;QAC9BJ,EAAAA,CAAQG,CAAAA,CAAAA,CAAQD,OAAAA,CAAQE,CAAAA,CAAAA;KAAAA;IAAAA,SCFVC,EAAAA,CAASlC,CAAAA,EAAO8B,CAAAA,EAAAA;QAAAA,OAAAA,EACC,GAAxB9B,CAAAA,CAAMmC,OAAAA,CAAQL,CAAAA,CAAAA,CAAAA;KAAAA;IAAAA,SCAPM,EAAAA,CAAKpC,CAAAA,EAAOqC,CAAAA,EAAAA;QAAAA,OAC1BrC,CAAAA,CAAMoC,IAAAA,CAAAA,KAAAA,CAANpC,CAAAA,EAAc6B,EAAAA,CAAQQ,CAAAA,CAAAA,CAAAA,EACfrC,CAAAA,CAAAA;KAAAA;IAAAA,SCFOsC,EAAAA,CAAYC,CAAAA,EAAKC,EAAAA,EAASC,CAAAA,EAAAA;QACpCF,CAAAA,IACFR,EAAAA,CAAQS,EAAAA,EAAS,SAACE,CAAAA,EAAAA;YACZA,CAAAA,IACFH,CAAAA,CAAII,SAAAA,CAAUF,CAAAA,GAAM,KAAA,GAAQ,QAAA,CAAA,CAAUC,CAAAA,CAAAA;SAAAA,CAAAA;KAAAA;IAAAA,SCH9BE,EAAAA,CAASL,CAAAA,EAAKC,CAAAA,EAAAA;QAC5BF,EAAAA,CAAYC,CAAAA,EAAKd,EAAAA,CAASe,CAAAA,CAAAA,GAAWA,CAAAA,CAAQK,KAAAA,CAAM,GAAA,CAAA,GAAOL,CAAAA,EAAAA,CAAS,CAAA,CAAA;KAAA;IAAA,SCFrDM,EAAAA,CAAOC,CAAAA,EAAQC,CAAAA,EAAAA;QAC7BjB,EAAAA,CAAQiB,CAAAA,EAAUD,CAAAA,CAAOE,WAAAA,CAAYtC,IAAAA,CAAKoC,CAAAA,CAAAA,CAAAA;KAAAA;IAAAA,SCD5BG,EAAAA,CAAOC,EAAAA,EAAOC,CAAAA,EAAAA;QAC5BrB,EAAAA,CAAQoB,EAAAA,EAAO,SAACE,CAAAA,EAAAA;YAAAA,IACRN,CAAAA,GAAAA,AAAUK,CAAAA,CAAAA,IAAOC,CAAAA,CAAAA,CAAMC,UAAAA,AACzBP;YAAAA,CAAAA,IACFA,CAAAA,CAAOQ,YAAAA,CAAaF,CAAAA,EAAMD,CAAAA,CAAAA;SAAAA,CAAAA;KAAAA;IAAAA,SCJhBI,CAAAA,CAAQjB,CAAAA,EAAKkB,CAAAA,EAAAA;QAAAA,OACpB9B,EAAAA,CAAcY,CAAAA,CAAAA,IAAAA,AAASA,CAAAA,CAAAA,CAAG,iBAAA,IAAyBA,CAAAA,CAAIiB,OAAAA,CAAAA,CAAShD,IAAAA,CAAK+B,CAAAA,EAAKkB,CAAAA,CAAAA,CAAAA;KAAAA;IAAAA,SCAnET,EAAAA,CAASD,EAAAA,EAAQU,CAAAA,EAAAA;QACzBC,EAAAA,GAAYX,EAAAA,GAAS7C,EAAAA,CAAM6C,EAAAA,CAAOC,QAAAA,CAAAA,GAAY,EAAA,CAAA;QAAA,OAC7CS,CAAAA,GAAWC,EAAAA,CAAUC,MAAAA,CAAO,SAACC,CAAAA,EAAAA;YAAAA,OAAUJ,CAAAA,CAAQI,CAAAA,EAAOH,CAAAA,CAAAA,CAAAA;SAAAA,CAAAA,GAAaC,EAAAA,CAAAA;KAAAA;IAAAA,SCH5DE,EAAAA,CAAMb,CAAAA,EAAQU,CAAAA,EAAAA;QAAAA,OACrBA,CAAAA,GAAWT,EAAAA,CAASD,CAAAA,EAAQU,CAAAA,CAAAA,CAAU,CAAA,CAAA,GAAKV,CAAAA,CAAOc,iBAAAA,CAAAA;KAAAA;IAAAA,ICF9CC,EAAAA,GAAUC,MAAAA,CAAOC,IAAAA,AAAAA;IAAAA,SCCdC,EAAAA,CAAOC,CAAAA,EAAQjC,CAAAA,EAAUkC,CAAAA,EAAAA;QAAAA,IACnCD,CAAAA,EAAAA,IAAAA,IACEF,CAAAA,GAAOF,EAAAA,CAAQI,CAAAA,CAAAA,EACnBF,CAAAA,GAAOG,CAAAA,GAAQH,CAAAA,CAAKI,OAAAA,EAAAA,GAAYJ,CAAAA,EACvBK,CAAAA,GAAI,CAAA,EAAGA,CAAAA,GAAIL,CAAAA,CAAK/D,MAAAA,EAAQoE,CAAAA,EAAAA,CAAK;YAAA,IAC9BC,CAAAA,GAAMN,CAAAA,CAAKK,CAAAA,CAAAA,AAAAA;YAAAA,IACL,WAAA,KAARC,CAAAA,IAAAA,CACiC,CAAA,KAA/BrC,CAAAA,CAASiC,CAAAA,CAAOI,CAAAA,CAAAA,EAAMA,CAAAA,CAAAA,EAAAA,MAAAA;SAAAA;QAAAA,OAMzBJ,CAAAA,CAAAA;KAAAA;IAAAA,SCZOK,EAAAA,CAAOL,CAAAA,EAAAA;QAAAA,OACrBhE,EAAAA,CAAMU,SAAAA,EAAW,CAAA,CAAA,CAAGmB,OAAAA,CAAQ,SAACyC,CAAAA,EAAAA;YAC3BP,EAAAA,CAAOO,CAAAA,EAAQ,SAAC1C,CAAAA,EAAOwC,CAAAA,EAAAA;gBACrBJ,CAAAA,CAAOI,CAAAA,CAAAA,GAAOE,CAAAA,CAAOF,CAAAA,CAAAA;aAAAA,CAAAA;SAAAA,CAAAA,EAGlBJ,CAAAA,CAAAA;KAAAA;IAAAA,SCLOO,EAAAA,CAAMP,CAAAA,EAAAA;QAAAA,OACpBhE,EAAAA,CAAMU,SAAAA,EAAW,CAAA,CAAA,CAAGmB,OAAAA,CAAQ,SAACyC,EAAAA,EAAAA;YAC3BP,EAAAA,CAAOO,EAAAA,EAAQ,SAAC1C,CAAAA,EAAOwC,CAAAA,EAAAA;gBACjB/C,EAAAA,CAAQO,CAAAA,CAAAA,GACVoC,CAAAA,CAAOI,CAAAA,CAAAA,GAAOxC,CAAAA,CAAM5B,KAAAA,EAAAA,GACXmB,CAAAA,CAASS,CAAAA,CAAAA,GAClBoC,CAAAA,CAAOI,CAAAA,CAAAA,GAAOG,EAAAA,CAAM,EAAA,EAAIpD,CAAAA,CAAS6C,CAAAA,CAAOI,CAAAA,CAAAA,CAAAA,GAAQJ,CAAAA,CAAOI,CAAAA,CAAAA,GAAO,EAAA,EAAIxC,CAAAA,CAAAA,GAElEoC,CAAAA,CAAOI,CAAAA,CAAAA,GAAOxC,CAAAA;aAAAA,CAAAA;SAAAA,CAAAA,EAIboC,CAAAA,CAAAA;KAAAA;IAAAA,SCbOQ,EAAAA,CAAKR,CAAAA,EAAQF,EAAAA,EAAAA;QAC3BnC,EAAAA,CAAQmC,EAAAA,IAAQF,EAAAA,CAAQI,CAAAA,CAAAA,CAAAA,CAASnC,OAAAA,CAAQ,SAACuC,CAAAA,EAAAA;YAAAA,OACjCJ,CAAAA,CAAOI,CAAAA,CAAAA;SAAAA,CAAAA;KAAAA;IAAAA,SCHFK,EAAAA,CAAgBC,EAAAA,EAAMC,CAAAA,EAAAA;QACpC9C,EAAAA,CAAQ6C,EAAAA,EAAM,SAACrC,CAAAA,EAAAA;YACbR,EAAAA,CAAQ8C,CAAAA,EAAO,SAACC,CAAAA,EAAAA;gBACdvC,CAAAA,IAAOA,CAAAA,CAAIoC,eAAAA,CAAgBG,CAAAA,CAAAA;aAAAA,CAAAA;SAAAA,CAAAA;KAAAA;IAAAA,SCAjBC,EAAAA,CAAaH,CAAAA,EAAMC,EAAAA,EAAO/C,CAAAA,EAAAA;QACpCT,CAAAA,CAASwD,EAAAA,CAAAA,GACXZ,EAAAA,CAAOY,EAAAA,EAAO,SAACG,CAAAA,EAAQtC,CAAAA,EAAAA;YACrBqC,EAAAA,CAAaH,CAAAA,EAAMlC,CAAAA,EAAMsC,CAAAA,CAAAA;SAAAA,CAAAA,GAG3BjD,EAAAA,CAAQ6C,CAAAA,EAAM,SAACrC,CAAAA,EAAAA;YACbjB,EAAAA,CAAOQ,CAAAA,CAAAA,IAAoB,EAAA,KAAVA,CAAAA,GAAe6C,EAAAA,CAAgBpC,CAAAA,EAAKsC,EAAAA,CAAAA,GAAStC,CAAAA,CAAIwC,YAAAA,CAAaF,EAAAA,EAAOI,MAAAA,CAAOnD,CAAAA,CAAAA,CAAAA;SAAAA,CAAAA;KAAAA;IAAAA,SCPnFoD,CAAAA,CAAOC,CAAAA,EAAKN,CAAAA,EAAO9B,CAAAA,EAAAA;QAC3BR,CAAAA,GAAM6C,QAAAA,CAASC,aAAAA,CAAcF,CAAAA,CAAAA,CAAAA;QAAAA,OAC/BN,CAAAA,IAAAA,AACFpD,CAAAA,EAAAA,CAASoD,CAAAA,CAAAA,GAASjC,EAAAA,GAAuBmC,EAAAA,CAAAA,CAAdxC,CAAAA,EAAKsC,CAAAA,CAAAA,EAElC9B,CAAAA,IAAUD,EAAAA,CAAOC,CAAAA,EAAQR,CAAAA,CAAAA,EAClBA,CAAAA,CAAAA;KAAAA;IAAAA,SCTO+C,CAAAA,CAAM/C,CAAAA,EAAKgD,CAAAA,EAAMzD,CAAAA,EAAAA;QAAAA,IAC3BJ,EAAAA,CAAYI,CAAAA,CAAAA,EAAAA,OACP0D,gBAAAA,CAAiBjD,CAAAA,CAAAA,CAAKgD,CAAAA,CAAAA,CAE1BjE;QAAAA,EAAAA,CAAOQ,CAAAA,CAAAA,IACVS,CAAAA,CAAAA,CAAI+C,KAAAA,CAAMC,CAAAA,CAAAA,GAAAA,EAAAA,GAAWzD,CAAAA,CAAAA,AAAAA;KAAAA;IAAAA,SCLT2D,CAAAA,CAAQlD,CAAAA,EAAKmD,CAAAA,EAAAA;QAC3BJ,CAAAA,CAAM/C,CAAAA,EAAK,SAAA,EAAWmD,CAAAA,CAAAA;KAAAA;IAAAA,SCFRC,CAAAA,CAAMpD,CAAAA,EAAAA;QACpBA,CAAAA,CAAG,SAAA,IAAiBA,CAAAA,CAAG,SAAA,EAAA,IAAmBA,CAAAA,CAAIoD,KAAAA,CAAM;YAAEC,aAAAA,EAAAA,CAAe,CAAA;SAAA,CAAA;KAAA;IAAA,SCDvDC,CAAAA,CAAatD,CAAAA,EAAKuC,CAAAA,EAAAA;QAAAA,OACzBvC,CAAAA,CAAIsD,YAAAA,CAAaf,CAAAA,CAAAA,CAAAA;KAAAA;IAAAA,SCDVgB,CAAAA,CAASvD,CAAAA,EAAKwD,CAAAA,EAAAA;QAAAA,OACrBxD,CAAAA,IAAOA,CAAAA,CAAII,SAAAA,CAAUqD,QAAAA,CAASD,CAAAA,CAAAA,CAAAA;KAAAA;IAAAA,SCDvBE,CAAAA,CAAKC,CAAAA,EAAAA;QAAAA,OACZA,CAAAA,CAAOC,qBAAAA,EAAAA,CAAAA;KAAAA;IAAAA,SCAAC,CAAAA,CAAOjD,EAAAA,EAAAA;QACrBpB,EAAAA,CAAQoB,EAAAA,EAAO,SAACE,CAAAA,EAAAA;YACVA,CAAAA,IAAQA,CAAAA,CAAKC,UAAAA,IACfD,CAAAA,CAAKC,UAAAA,CAAW+C,WAAAA,CAAYhD,CAAAA,CAAAA;SAAAA,CAAAA;KAAAA;IAAAA,SCHlBiD,CAAAA,CAAUC,CAAAA,EAAAA;QAAAA,OACjB3C,EAAAA,CAAAA,AAAM,CAAA,IAAI4C,SAAAA,CAAAA,CAAYC,eAAAA,CAAgBF,CAAAA,EAAM,WAAA,CAAA,CAAaG,IAAAA,CAAAA,CAAAA;KAAAA;IAAAA,SCFlDC,CAAAA,CAAQC,CAAAA,EAAGC,CAAAA,EAAAA;QACzBD,CAAAA,CAAEE,cAAAA,EAAAA,EACED,CAAAA,IACFD,CAAAA,CAAAA,CAAEC,eAAAA,EAAAA,EACFD,CAAAA,CAAEG,wBAAAA,EAAAA,CAAAA,AAAAA;KAAAA;IAAAA,SCJUC,EAAAA,CAAMjE,CAAAA,EAAQU,CAAAA,EAAAA;QAAAA,OACrBV,CAAAA,IAAUA,CAAAA,CAAOkE,aAAAA,CAAcxD,CAAAA,CAAAA,CAAAA;KAAAA;IAAAA,SCAxByD,EAAAA,CAASnE,CAAAA,EAAQU,CAAAA,EAAAA;QAAAA,OACxBA,CAAAA,GAAWvD,EAAAA,CAAM6C,CAAAA,CAAOoE,gBAAAA,CAAiB1D,CAAAA,CAAAA,CAAAA,GAAa,EAAA,CAAA;KAAA;IAAA,SCD/C2D,EAAAA,CAAY7E,CAAAA,EAAKC,CAAAA,EAAAA;QAC/BF,EAAAA,CAAYC,CAAAA,EAAKC,CAAAA,EAAAA,CAAS,CAAA,CAAA;KAAA;IAAA,SCFZ6E,EAAAA,CAAOT,CAAAA,EAAAA;QAAAA,OACdA,CAAAA,CAAEU,SAAAA,CAAAA;KAAAA;IAAAA,SCAKC,EAAAA,CAAKzF,CAAAA,EAAAA;QAAAA,OACZL,EAAAA,CAASK,CAAAA,CAAAA,GAASA,CAAAA,GAAQA,CAAAA,GAAWA,CAAAA,GAAAA,IAAAA,GAAY,EAAA,CAAA;KAAA;IAAA,ICF7C0F,EAAAA,GAAe,QAAA,EACfC,EAAAA,GAAAA,OAAAA,GAAyBD,EAAAA,AAAAA;IAAAA,SCAtBE,EAAAA,CAAOC,CAAAA,EAAWC,CAAAA,EAAAA;QAAAA,IAAAA,CAC3BD,CAAAA,EAAAA,MACG,IAAIE,KAAAA,CAAAA,GAAAA,GAAUL,EAAAA,GAAAA,IAAAA,GAAiBI,CAAAA,CAAAA,IAAW,EAAA,CAAA,AAAA,CAAA,CAAA;KAAA;IAAA,ICHrCE,EAAAA,GAA+BC,IAAAA,CAA/BD,GAAAA,EAAKE,EAAAA,GAA0BD,IAAAA,CAA1BC,GAAAA,EAAKC,EAAAA,GAAqBF,IAAAA,CAArBE,KAAAA,EAAOC,EAAAA,GAAcH,IAAAA,CAAdG,IAAAA,EAAMC,EAAAA,GAAQJ,IAAAA,CAARI,GAAAA,AAAAA;IAAAA,SCCtBC,EAAAA,CAAmBC,CAAAA,EAAGC,CAAAA,EAAGC,CAAAA,EAAAA;QAAAA,OAChCJ,EAAAA,CAAIE,CAAAA,GAAIC,CAAAA,CAAAA,GAAKC,CAAAA,CAAAA;KAAAA;IAAAA,SCDNC,EAAAA,CAAQC,CAAAA,EAAQC,CAAAA,EAAUC,CAAAA,EAAUC,CAAAA,EAAAA;QAAAA,IAC5CC,CAAAA,GAAUf,EAAAA,CAAIY,CAAAA,EAAUC,CAAAA,CAAAA,EACxBG,CAAAA,GAAUd,EAAAA,CAAIU,CAAAA,EAAUC,CAAAA,CAAAA,AAAAA;QAAAA,OACvBC,CAAAA,GAAYC,CAAAA,GAAUJ,CAAAA,IAAUA,CAAAA,GAASK,CAAAA,GAAUD,CAAAA,IAAWJ,CAAAA,IAAUA,CAAAA,IAAUK,CAAAA,CAAAA;KAAAA;IAAAA,SCH3EC,EAAAA,CAAMN,CAAAA,EAAQJ,CAAAA,EAAGC,CAAAA,EAAAA;QAAAA,IACzBO,CAAAA,GAAUf,EAAAA,CAAIO,CAAAA,EAAGC,CAAAA,CAAAA,EACjBQ,CAAAA,GAAUd,EAAAA,CAAIK,CAAAA,EAAGC,CAAAA,CAAAA,AAAAA;QAAAA,OAChBR,EAAAA,CAAIE,EAAAA,CAAIa,CAAAA,EAASJ,CAAAA,CAAAA,EAASK,CAAAA,CAAAA,CAAAA;KAAAA;IAAAA,SCJnBE,EAAAA,CAAKX,CAAAA,EAAAA;QAAAA,OAAAA,AACN,CAAA,CAAA,GAAJA,CAAAA,CAAAA,GAAWA,CAAAA,CAAAA,GAAI,CAAA,CAAA,AAAA,CAAA;KAAA;IAAA,SCAVY,EAAAA,CAAOC,CAAAA,EAAQC,EAAAA,EAAAA;QAAAA,OAC7BpH,EAAAA,CAAQoH,EAAAA,EAAc,SAACC,CAAAA,EAAAA;YACrBF,CAAAA,GAASA,CAAAA,CAAOG,OAAAA,CAAQ,IAAA,EAAA,EAAA,GAASD,CAAAA,CAAAA;SAAAA,CAAAA,EAE5BF,CAAAA,CAAAA;KAAAA;IAAAA,SCLOI,EAAAA,CAAIb,CAAAA,EAAAA;QAAAA,OACXA,CAAAA,GAAS,EAAA,GAAA,GAAA,GAASA,CAAAA,GAAAA,EAAAA,GAAcA,CAAAA,CAAAA;KAAAA;IAAAA,ICAnCc,EAAAA,GAAM,EAAA,AAAA;IAAA,SCAIC,EAAAA,GAAAA;QAAAA,IACVC,CAAAA,GAAY,EAAA,AAAA;QAAA,SAgCPC,EAAAA,CAAaC,GAAAA,EAASC,CAAAA,EAAQ3H,CAAAA,EAAAA;YACrCF,EAAAA,CAAQ4H,GAAAA,EAAS,SAACzD,CAAAA,EAAAA;gBAChBA,CAAAA,IAAUnE,EAAAA,CAAQ6H,CAAAA,EAAQ,SAACC,GAAAA,EAAAA;oBACzBA,GAAAA,CAAQhH,KAAAA,CAAM,GAAA,CAAA,CAAKd,OAAAA,CAAQ,SAAC+H,CAAAA,EAAAA;wBACpBC,CAAAA,GAAWD,CAAAA,CAAQjH,KAAAA,CAAM,GAAA,CAAA,CAC/BZ;wBAAAA,CAAAA,CAASiE,CAAAA,EAAQ6D,CAAAA,CAAS,CAAA,CAAA,EAAIA,CAAAA,CAAS,CAAA,CAAA,CAAA;qBAAA,CAAA;iBAAA,CAAA;aAAA,CAAA;SAAA;QAAA,OAWxC;YACLpJ,IAAAA,EAAAA,SAhDYgJ,GAAAA,EAASC,EAAAA,EAAQI,CAAAA,EAAUC,CAAAA,EAAAA;gBACvCP,EAAAA,CAAaC,GAAAA,EAASC,EAAAA,EAAQ,SAAC1D,CAAAA,EAAQgE,CAAAA,EAAOC,CAAAA,EAAAA;oBAAAA,IACtCC,CAAAA,GAAgB,kBAAA,IAAsBlE,CAAAA,EACtCmE,CAAAA,GAAUD,CAAAA,GAAgBlE,CAAAA,CAAOoE,mBAAAA,CAAoB3J,IAAAA,CAAKuF,CAAAA,EAAQgE,CAAAA,EAAOF,CAAAA,EAAUC,CAAAA,CAAAA,GAAW/D,CAAAA,CAAM,cAAA,CAAmBvF,IAAAA,CAAKuF,CAAAA,EAAQ8D,CAAAA,CAAAA,AAC1II;oBAAAA,CAAAA,GAAgBlE,CAAAA,CAAOqE,gBAAAA,CAAiBL,CAAAA,EAAOF,CAAAA,EAAUC,CAAAA,CAAAA,GAAW/D,CAAAA,CAAM,WAAA,CAAgB8D,CAAAA,CAAAA,EAC1FP,CAAAA,CAAUrH,IAAAA,CAAK;wBAAC8D,CAAAA;wBAAQgE,CAAAA;wBAAOC,CAAAA;wBAAWH,CAAAA;wBAAUK,CAAAA;qBAAAA,CAAAA;iBAAAA,CAAAA;aAAAA;YA4CtDG,MAAAA,EAAAA,SAzCcb,GAAAA,EAASC,EAAAA,EAAQI,CAAAA,EAAAA;gBAC/BN,EAAAA,CAAaC,GAAAA,EAASC,EAAAA,EAAQ,SAAC1D,CAAAA,EAAQgE,CAAAA,EAAOC,CAAAA,EAAAA;oBAC5CV,CAAAA,GAAYA,CAAAA,CAAU9F,MAAAA,CAAO,SAAC8G,CAAAA,EAAAA;wBAAAA,OAAAA,CAAAA,CACxBA,CAAAA,CAAAA,CAAS,CAAA,CAAA,KAAOvE,CAAAA,IAAUuE,CAAAA,CAAS,CAAA,CAAA,KAAOP,CAAAA,IAASO,CAAAA,CAAS,CAAA,CAAA,KAAON,CAAAA,IAAeH,CAAAA,IAAYS,CAAAA,CAAS,CAAA,CAAA,KAAOT,CAAAA,CAAAA,AAAAA,IAChHS,CAAAA,CAAAA,CAAS,CAAA,CAAA,EAAA,EAAA,CACF,CAAA,CAAA,AAAA,CAAA;qBAAA,CAAA;iBAAA,CAAA;aAAA;YAqCbC,QAAAA,EAAAA,SA/BgBxE,CAAAA,EAAQ/E,CAAAA,EAAMwJ,CAAAA,EAAAA;gBAAAA,IAC1B/D,CAAAA,AAAAA;gBAAAA,OAEuB,UAAA,IAAA,OAAhBgE,WAAAA,GACThE,CAAAA,GAAI,IAAIgE,WAAAA,CAAYzJ,CAAAA,EAAM;oBAAE0J,OAAAA,EAAAA,CAFd,CAAA;oBAEuBF,MAAAA,EAAAA,CAAAA;iBAAAA,CAAAA,GAAAA,AAErC/D,CAAAA,CAAAA,GAAIxB,QAAAA,CAAS0F,WAAAA,CAAY,aAAA,CAAA,CAAA,CACvBC,eAAAA,CAAgB5J,CAAAA,EAAAA,CALJ,CAAA,EAAA,CAKmB,CAAA,EAAOwJ,CAAAA,CAAAA,EAE1CzE,CAAAA,CAAO8E,aAAAA,CAAcpE,CAAAA,CAAAA,EACdA,CAAAA,CAAAA;aAAAA;YAsBPqE,OAAAA,EAAAA,WAAAA;gBATAxB,CAAAA,CAAU1H,OAAAA,CAAQ,SAACmJ,CAAAA,EAAAA;oBACjBA,CAAAA,CAAK,CAAA,CAAA,EAAA;iBAAA,CAAA,EAEPnL,EAAAA,CAAM0J,CAAAA,CAAAA;aAAAA;SAAAA,CAAAA;KAAAA;IAAAA,IChDG0B,EAAAA,GAAgB,SAAA,EAEhBC,EAAAA,GAAa,MAAA,EACbC,EAAAA,GAAc,OAAA,EACdC,EAAAA,GAAgB,SAAA,EAChBC,EAAAA,GAAc,OAAA,EACdC,EAAAA,GAAe,QAAA,EACfC,EAAAA,GAAiB,UAAA,EACjBC,EAAAA,GAAgB,SAAA,EAChBC,EAAAA,GAAe,QAAA,EACfC,EAAAA,GAAsB,eAAA,EACtBC,EAAAA,GAAgB,SAAA,EAChBC,EAAAA,GAAgB,SAAA,EAChBC,EAAAA,GAAe,QAAA,EACfC,EAAAA,GAAgB,SAAA,EAIhBC,EAAAA,GAAe,QAAA,EACfC,EAAAA,GAAiB,UAAA,EACjBC,EAAAA,GAAgB,SAAA,EAKhBC,EAAAA,GAA2B,oBAAA,EAC3BC,EAAAA,GAAsB,eAAA,EAEtBC,EAAAA,GAAuB,gBAAA,EACvBC,EAAAA,GAAwB,iBAAA,AAAA;IAAA,SC1BrBC,EAAAA,CAAeC,GAAAA,EAAAA;QAAAA,IACvBC,CAAAA,GAAMD,GAAAA,GAAUA,GAAAA,CAAQvC,KAAAA,CAAMwC,GAAAA,GAAMtH,QAAAA,CAASuH,sBAAAA,EAAAA,EAC7CC,CAAAA,GAASpD,EAAAA,EAAAA,AAAAA;QAAAA,OASXiD,GAAAA,IACFA,GAAAA,CAAQvC,KAAAA,CAAM2C,EAAAA,CAAGV,EAAAA,EAAeS,CAAAA,CAAO3B,OAAAA,CAAAA,EAElC1G,EAAAA,CAAOqI,CAAAA,EAAQ;YACpBF,GAAAA,EAAAA,CAAAA;YACAG,EAAAA,EAAAA,SAbUjD,GAAAA,EAAQI,CAAAA,EAAAA;gBAClB4C,CAAAA,CAAOjM,IAAAA,CAAK+L,CAAAA,EAAK7K,EAAAA,CAAQ+H,GAAAA,CAAAA,CAAQkD,IAAAA,CAAK,GAAA,CAAA,EAAM,SAAClG,CAAAA,EAAAA;oBAC3CoD,CAAAA,CAASvJ,KAAAA,CAAMuJ,CAAAA,EAAUzI,EAAAA,CAAQqF,CAAAA,CAAE+D,MAAAA,CAAAA,GAAU/D,CAAAA,CAAE+D,MAAAA,GAAS,EAAA,CAAA;iBAAA,CAAA;aAAA;YAY1DoC,GAAAA,EAAKtM,EAAAA,CAAMmM,CAAAA,CAAOpC,MAAAA,EAAQkC,CAAAA,CAAAA;YAC1BM,IAAAA,EAAAA,SAVY9C,CAAAA,EAAAA;gBACZ0C,CAAAA,CAAOlC,QAAAA,CAASgC,CAAAA,EAAKxC,CAAAA,EAAOhK,EAAAA,CAAMU,SAAAA,EAAW,CAAA,CAAA,CAAA;aAAA;SAAA,CAAA,CAAA;KAAA;IAAA,SCXjCqM,EAAAA,CAAgBC,CAAAA,EAAUC,GAAAA,EAAYC,CAAAA,EAAUC,CAAAA,EAAAA;QAAAA,IAE1DC,CAAAA,EAEAC,CAAAA,EAHIC,CAAAA,GAAQC,IAAAA,CAARD,GAAAA,EAEJE,CAAAA,GAAO,CAAA,EAEPC,CAAAA,GAAAA,CAAS,CAAA,EACTC,CAAAA,GAAQ,CAAA,AAAA;QAAA,SACHC,CAAAA,GAAAA;YAAAA,IAAAA,CACFF,CAAAA,EAAQ;gBAAA,IACXD,CAAAA,GAAOR,CAAAA,GAAWpF,EAAAA,CAAAA,AAAK0F,CAAAA,CAAAA,EAAAA,GAAQF,CAAAA,CAAAA,GAAaJ,CAAAA,EAAU,CAAA,CAAA,GAAK,CAAA,EAC3DE,CAAAA,IAAYA,CAAAA,CAASM,CAAAA,CAAAA,EACT,CAAA,IAARA,CAAAA,IACFP,CAAAA,GAAAA,EAAAA,EACAG,CAAAA,GAAYE,CAAAA,EAAAA,EACRH,CAAAA,IAAAA,EAAWO,CAAAA,IAASP,CAAAA,CAAAA,AAAAA,EAAAA,OACfS,CAAAA,EAAAA,CAGX9M;gBAAAA,EAAAA,CAAI6M,CAAAA,CAAAA;aAAAA;SAAAA;QAAAA,SASCC,CAAAA,GAAAA;YACPH,CAAAA,GAAAA,CAAS,CAAA;SAAA;QAAA,SASFI,CAAAA,GAAAA;YACPR,CAAAA,IAAMS,oBAAAA,CAAqBT,CAAAA,CAAAA,EAG3BI,CAAAA,GAAAA,CAAAA,AADAJ,CAAAA,GADAG,CAAAA,GAAO,CAAA,EAEPC,IAFO,CAAA;SAAA;QAAA,OAUF;YACLvN,KAAAA,EAAAA,SA7Ba6N,CAAAA,EAAAA;gBACZA,CAAAA,IAAUF,CAAAA,EAAAA,EACXT,CAAAA,GAAYE,CAAAA,EAAAA,GAASS,CAAAA,CAAAA,GAASP,CAAAA,GAAOR,CAAAA,GAAW,CAAA,CAAA,AAAA,EAChDS,CAAAA,GAAAA,CAAS,CAAA,EACT3M,EAAAA,CAAI6M,CAAAA,CAAAA;aAAAA;YA0BJK,MAAAA,EAAAA,WAAAA;gBApBAZ,CAAAA,GAAYE,CAAAA,EAAAA,EACZE,CAAAA,GAAO,CAAA,EACHN,CAAAA,IACFA,CAAAA,CAASM,CAAAA,CAAAA;aAAAA;YAkBXI,KAAAA,EAAAA,CAAAA;YACAC,MAAAA,EAAAA,CAAAA;YACAI,GAAAA,EAAAA,SAXWC,CAAAA,EAAAA;gBACXlB,CAAAA,GAAWkB,CAAAA;aAAAA;YAWXC,QAAAA,EAAAA,WAAAA;gBAAAA,OAROV,CAAAA,CAAAA;aAAAA;SAAAA,CAAAA;KAAAA;IAAAA,SC/CKW,EAAAA,CAAMC,GAAAA,EAAAA;QAAAA,IAChBC,CAAAA,GAAQD,GAAAA,AAAAA;QAAAA,OAOL;YAAEJ,GAAAA,EAAAA,SANIrM,CAAAA,EAAAA;gBACX0M,CAAAA,GAAQ1M,CAAAA;aAAAA;YAKI2M,EAAAA,EAAAA,SAHFC,CAAAA,EAAAA;gBAAAA,OACHxM,EAAAA,CAASL,EAAAA,CAAQ6M,CAAAA,CAAAA,EAASF,CAAAA,CAAAA,CAAAA;aAAAA;SAAAA,CAAAA;KAAAA;IAAAA,ICP/BG,EAAAA,GAAQ,OAAA,EACDC,EAAAA,GAAgBD,EAAAA,GAAAA,MAAAA,EAChBE,EAAAA,GAAiBF,EAAAA,GAAAA,OAAAA,EACjBG,EAAAA,GAAcH,EAAAA,GAAAA,IAAAA,EACdI,EAAAA,GAAgBJ,EAAAA,GAAAA,MAAAA,ECFhBK,EAAAA,GAAM,KAAA,ECANC,EAAAA,GAAkB;QAC7BC,KAAAA,EAAO;YAAC,QAAA;SAAA;QACRC,IAAAA,EAAM;YAAC,KAAA;YAAO,OAAA;SAAA;QACdhL,KAAAA,EAAO;YAAC,QAAA;YAAU,MAAA;SAAA;QAClBkE,CAAAA,EAAG;YAAC,GAAA;SAAA;QACJ+G,CAAAA,EAAG;YAAC,GAAA;SAAA;QACJC,CAAAA,EAAG;YAAC,GAAA;SAAA;QACJC,SAAAA,EAAW;YAACR,EAAAA;YAAUD,EAAAA;SAAAA;QACtBU,UAAAA,EAAY;YAACR,EAAAA;YAAYH,EAAAA;SAAAA;KAAAA,AAAAA;IAAAA,ICVdY,EAAAA,GAAO,MAAA,EACPC,EAAAA,GAAY,UAAA,EAEZC,EAAAA,GAAc,OAAA,EACdC,EAAAA,GAAmBD,EAAAA,GAAAA,UAAAA,EACnBE,EAAAA,GAAkBF,EAAAA,GAAAA,SAAAA,EAClBG,EAAAA,GAAmBH,EAAAA,GAAAA,UAAAA,EACnBI,EAAAA,GAAgBJ,EAAAA,GAAAA,OAAAA,EAChBK,EAAAA,GAAqBL,EAAAA,GAAAA,YAAAA,EACrBM,EAAAA,GAAiBN,EAAAA,GAAAA,QAAAA,EACjBO,EAAAA,GAAsBP,EAAAA,GAAAA,aAAAA,EACtBQ,EAAAA,GAA0BR,EAAAA,GAAAA,iBAAAA,EAC1BS,EAAAA,GAAeT,EAAAA,GAAAA,MAAAA,EACfU,EAAAA,GAAmBV,EAAAA,GAAAA,UAAAA,EACnBW,EAAAA,GAAiB;QAC5Bb,EAAAA;QACAC,EAAAA;QAdsB,UAAA;QAgBtBE,EAAAA;QACAC,EAAAA;QACAE,EAAAA;QACAC,EAAAA;QACAC,EAAAA;QACAC,EAAAA;QACAC,EAAAA;KAAAA,ECvBWI,EAAAA,GAAa9I,EAAAA,EACb+I,EAAAA,GAAiB/I,EAAAA,GAAAA,SAAAA,EACjBgJ,EAAAA,GAAgBhJ,EAAAA,GAAAA,QAAAA,EAChBiJ,EAAAA,GAAiBjJ,EAAAA,GAAAA,SAAAA,EACjBkJ,EAAAA,GAAiBD,EAAAA,GAAAA,SAAAA,EACjBE,EAAAA,GAAqBF,EAAAA,GAAAA,aAAAA,EACrBG,EAAAA,GAAkBpJ,EAAAA,GAAAA,UAAAA,EAClBqJ,EAAAA,GAAiBrJ,EAAAA,GAAAA,SAAAA,EACjBsJ,EAAAA,GAAsBD,EAAAA,GAAAA,QAAAA,EACtBE,EAAAA,GAAsBF,EAAAA,GAAAA,QAAAA,EACtBG,EAAAA,GAAsBxJ,EAAAA,GAAAA,cAAAA,EACtByJ,EAAAA,GAA2BD,EAAAA,GAAAA,QAAAA,EAE3BE,EAAAA,GADoB1J,EAAAA,GAAAA,YAAAA,GAAAA,OAAAA,EAEpB2J,EAAAA,GAAkB3J,EAAAA,GAAAA,UAAAA,EAIlB4J,EAAAA,GAAc5J,EAAAA,GAAAA,MAAAA,EAEd6J,EAAAA,GAAe,WAAA,EACfC,EAAAA,GAAa,SAAA,EACbC,EAAAA,GAAa,SAAA,EACbC,EAAAA,GAAgB,YAAA,EAChBC,EAAAA,GAAgB,YAAA,EAChBC,EAAAA,GAAiB,aAAA,EACjBC,EAAAA,GAAiB;QAC5BN,EAAAA;QACAG,EAAAA;QACAF,EAAAA;QACAC,EAAAA;QACAE,EAAAA;QACAC,EAAAA;KAAAA,AAAAA;IAAAA,IC/BWE,EAAAA,GAAsB,sBAAA,EACtBC,EAAAA,GAAsB,qBAAA,EACtBC,EAAAA,GAAoB,8BAAA,AAAA;IAAA,ICJpBC,EAAAA,GAAQ,OAAA,EACRC,EAAAA,GAAO,MAAA,EACPC,EAAAA,GAAO,MAAA,AAAA;IAAA,SCoDJC,EAAAA,CAAMzF,CAAAA,EAAS0F,EAAAA,EAAOC,EAAAA,EAAYC,CAAAA,EAAAA;QAAAA,IAW5CC,EAAAA,EAVEpI,GAAAA,GAAQsC,EAAAA,CAAeC,CAAAA,CAAAA,EACrBI,CAAAA,GAAmB3C,GAAAA,CAAnB2C,EAAAA,EAAIG,CAAAA,GAAe9C,GAAAA,CAAf8C,IAAAA,EAAMrM,CAAAA,GAASuJ,GAAAA,CAATvJ,IAAAA,EACV4R,CAAAA,GAA8B9F,CAAAA,CAA9B8F,UAAAA,EAAYC,CAAAA,GAAkB/F,CAAAA,CAAlB+F,IAAAA,EAAMvI,CAAAA,GAAYwC,CAAAA,CAAZxC,OAAAA,EAClBwI,CAAAA,GAA6DxI,CAAAA,CAA7DwI,YAAAA,EAAcC,CAAAA,GAA+CzI,CAAAA,CAA/CyI,YAAAA,EAAcC,CAAAA,GAAiC1I,CAAAA,CAAjC0I,IAAAA,EAAMC,CAAAA,GAA2B3I,CAAAA,CAA3B2I,UAAAA,EAAYC,CAAAA,GAAe5I,CAAAA,CAAf4I,UAAAA,EAC9CC,CAAAA,GAAYP,CAAAA,CAAWQ,SAAAA,CAAvBD,OAAAA,EACFE,CAAAA,GAASnN,CAAAA,CAAawM,CAAAA,EAAO,OAAA,CAAA,EAC7BY,CAAAA,GAAQpN,CAAAA,CAAawM,CAAAA,EAAOvC,EAAAA,CAAAA,EAC5BoD,CAAAA,GAAAA,EAAwB,GAAdd,EAAAA,EACVe,CAAAA,GAAYvP,EAAAA,CAAMyO,CAAAA,EAAAA,GAAAA,GAAW1B,EAAAA,CAAAA,EAC7ByC,CAAAA,GAAiBlM,EAAAA,CAASmL,CAAAA,EAAOpI,CAAAA,CAAQmJ,cAAAA,IAAkB,EAAA,CAAA,AAAA;QAAA,SA4BxDC,CAAAA,GAAAA;YAAAA,IACDC,GAAAA,GAAW7G,CAAAA,CAAQ8G,OAAAA,CAAQC,GAAAA,CAAI,SAACtN,CAAAA,EAAAA;gBAC9BuN,CAAAA,GAASvN,CAAAA,CAAOwN,MAAAA,CAAOnB,UAAAA,CAAWoB,MAAAA,CAAOC,KAAAA,CAAMzB,EAAAA,CAAAA,CAAAA;gBAAAA,OAC9CsB,CAAAA,GAASA,CAAAA,CAAOpB,KAAAA,CAAM9E,EAAAA,GAAK,EAAA,CAAA;aAAA,CAAA,CACjCT,IAAAA,CAAK,GAAA,CAAA,AACR/H;YAAAA,EAAAA,CAAasN,CAAAA,EAAOvC,EAAAA,EAAY7G,EAAAA,CAAO0J,CAAAA,CAAKkB,MAAAA,EAAAA,AAASX,CAAAA,CAAAA,GAAUd,EAAAA,GAAaD,EAAAA,CAAAA,GAAS,CAAA,CAAA,CAAA,EACrFpN,EAAAA,CAAasN,CAAAA,EAAO1C,EAAAA,EAAe2D,GAAAA,CAAAA,EACnCvO,EAAAA,CAAasN,CAAAA,EAAO7C,EAAAA,EAAMqD,CAAAA,GAAa,QAAA,GAAW,EAAA,CAAA,EAClDA,CAAAA,IAAclO,EAAAA,CAAgB0N,CAAAA,EAAOnC,EAAAA,CAAAA;SAAAA;QAAAA,SAE9B4D,CAAAA,GAAAA;YACFxB,EAAAA,IACHzE,CAAAA,EAAAA;SAAAA;QAAAA,SAGKA,CAAAA,GAAAA;YAAAA,IAEUkG,GAAAA,EAQXC,EAAAA,AATD1B;YAAAA,EAAAA,IACYyB,CAAAA,GAAAA,GAAStH,CAAAA,CAAhB0F,KAAAA,EAAAA,AAQJ6B,CAAAA,EAAAA,GAASC,CAAAA,EAAAA,CAAAA,KACAnO,CAAAA,CAASuM,CAAAA,EAAOhB,EAAAA,CAAAA,IAC7B/O,CAAAA,EAAAA,CAAY+P,CAAAA,EAAOhB,EAAAA,EAAc2C,EAAAA,CAAAA,EACjCjP,EAAAA,CAAasN,CAAAA,EAAOzC,EAAAA,EAAc6C,CAAAA,IAAgBuB,EAAAA,IAAU,EAAA,CAAA,EAC5DhH,CAAAA,CAAKgH,EAAAA,GAASxI,EAAAA,GAAeC,EAAAA,EAAgByI,CAAAA,CAAAA,CAAAA,AAAAA,EAAAA,WAAAA;gBAAAA,IAIzCC,GAAAA,GAAAA,WAAAA;oBAAAA,IA0BF1H,CAAAA,CAAQgC,EAAAA,CAAGwD,EAAAA,CAAAA,EAAAA,OACNgC,CAAAA,EAAAA,CAAAA;oBAAAA,IAEHG,CAAAA,GAAYnO,CAAAA,CAAKsM,CAAAA,CAAW8B,QAAAA,CAASC,KAAAA,CAAAA,EACrCC,CAAAA,GAAYtO,CAAAA,CAAKoM,CAAAA,CAAAA,EACjBlD,CAAAA,GAAO2D,CAAAA,CAAQ,MAAA,CAAA,EACf3O,CAAAA,GAAQ2O,CAAAA,CAAQ,OAAA,CAAA,AAAA;oBAAA,OACf7K,EAAAA,CAAMmM,CAAAA,CAAUjF,CAAAA,CAAAA,CAAAA,IAAUjH,EAAAA,CAAKqM,CAAAA,CAAUpF,CAAAA,CAAAA,CAAAA,IAAUlH,EAAAA,CAAMsM,CAAAA,CAAUpQ,CAAAA,CAAAA,CAAAA,IAAW+D,EAAAA,CAAKkM,CAAAA,CAAUjQ,CAAAA,CAAAA,CAAAA,CAAAA;iBAjCpFqQ,EAAAA,EACVC,EAAAA,GAAAA,CAAUN,GAAAA,IAAAA,CAAAA,CAAaF,CAAAA,EAAAA,IAAcf,CAAAA,CAAAA,AAAAA,AACtCzG;gBAAAA,CAAAA,CAAQ+B,KAAAA,CAAMC,EAAAA,CAAG;oBAAClP,CAAAA;oBAAQC,CAAAA;iBAAAA,CAAAA,IAC7BuF,EAAAA,CAAasN,CAAAA,EAAOrC,EAAAA,EAAayE,EAAAA,IAAU,EAAA,CAAA,CAE7C1P;gBAAAA,EAAAA,CAAaqO,CAAAA,EAAgB3D,EAAAA,EAAWgF,EAAAA,GAAAA,EAAU,GAAI,EAAA,CAAA,EAClD5B,CAAAA,IACF9N,EAAAA,CAAasN,CAAAA,EAAO5C,EAAAA,EAAWgF,EAAAA,GAAAA,EAAU,GAAI,CAAA,CAAA,CAE3CN;gBAAAA,GAAAA,KAAYrO,CAAAA,CAASuM,CAAAA,EAAOb,EAAAA,CAAAA,IAC9BlP,CAAAA,EAAAA,CAAY+P,CAAAA,EAAOb,EAAAA,EAAe2C,GAAAA,CAAAA,EAClCnH,CAAAA,CAAKmH,GAAAA,GAAUzI,EAAAA,GAAgBC,EAAAA,EAAcuI,CAAAA,CAAAA,CAAAA,AAAAA,CAE1CC;gBAAAA,GAAAA,IAAW/O,QAAAA,CAASsP,aAAAA,KAAkBrC,CAAAA,IAAAA,AACnCoB,CAAAA,GAAAA,GAASlB,CAAAA,CAAWoB,MAAAA,CAAOC,KAAAA,CAAMnH,CAAAA,CAAQ0F,KAAAA,CAAAA,CAAAA,IACrCxM,CAAAA,CAAM8N,GAAAA,CAAOpB,KAAAA,CAAAA;aA7BvBsC,EAAAA,EACArS,EAAAA,CAAY+P,CAAAA,EAAOf,EAAAA,EAAYa,EAAAA,KAAU4B,GAAAA,GAAO,CAAA,CAAA,EAChDzR,EAAAA,CAAY+P,CAAAA,EAAOd,EAAAA,EAAYY,EAAAA,KAAU4B,GAAAA,GAAO,CAAA,CAAA,CAAA,AAAA;SAAA;QAAA,SAiC3CE,CAAAA,GAAAA;YAAAA,IACQF,CAAAA,GAAStH,CAAAA,CAAhB0F,KAAAA,AAAAA;YAAAA,OACD4B,CAAAA,KAAS5B,EAAAA,IAASlI,CAAAA,CAAQ2K,WAAAA,IAAeb,CAAAA,KAAS3B,EAAAA,CAAAA;SAAAA;QAAAA,IAmBrD8B,CAAAA,GAAO;YACX/B,KAAAA,EAAAA,EAAAA;YACAC,UAAAA,EAAAA,EAAAA;YACAC,KAAAA,EAAAA,CAAAA;YACAc,SAAAA,EAAAA,CAAAA;YACAD,OAAAA,EAAAA,CAAAA;YACA2B,KAAAA,EAAAA,WAAAA;gBA1GK3B,CAAAA,IACHb,CAAAA,CAAAA,CAAM9E,EAAAA,GAAQiF,CAAAA,CAAKjF,EAAAA,GAAAA,QAAAA,GAAWjE,EAAAA,CAAI6I,EAAAA,GAAQ,CAAA,CAAA,EAC1CpN,EAAAA,CAAasN,CAAAA,EAAO7C,EAAAA,EAAMoD,CAAAA,GAAa,UAAA,GAAa,OAAA,CAAA,EACpD7N,EAAAA,CAAasN,CAAAA,EAAOnC,EAAAA,EAAsByC,CAAAA,CAAKN,KAAAA,CAAAA,EAC/CtN,EAAAA,CAAasN,CAAAA,EAAOvC,EAAAA,EAAYmD,CAAAA,IAAShK,EAAAA,CAAO0J,CAAAA,CAAKmC,UAAAA,EAAY;oBAAC3C,EAAAA,GAAQ,CAAA;oBAAG1F,CAAAA,CAAQxM,MAAAA;iBAAAA,CAAAA,CAAAA,CAAAA,AAAAA,EAKvFU,CAAAA,CAAK0R,CAAAA,EAAO,OAAA,EAAS5R,EAAAA,CAAMuM,CAAAA,EAAMzB,EAAAA,EAAa2I,CAAAA,CAAAA,CAAAA,EAC9CvT,CAAAA,CAAK0R,CAAAA,EAAO,SAAA,EAAW5R,EAAAA,CAAMuM,CAAAA,EAAMpB,EAAAA,EAAqBsI,CAAAA,CAAAA,CAAAA,EACxDrH,CAAAA,CAAG;oBAACxB,EAAAA;oBAAaC,EAAAA;oBAAeY,EAAAA;iBAAAA,EAAiB2B,CAAAA,CAAAA,EACjDhB,CAAAA,CAAGT,EAAAA,EAA0BiH,CAAAA,CAAAA,EACzBX,CAAAA,IACF7F,CAAAA,CAAGzB,EAAAA,EAAY0I,CAAAA,CAAAA;aAAAA;YA6FjB7I,OAAAA,EAAAA,WAAAA;gBAzFAqH,EAAAA,GAAAA,CAAY,CAAA,EACZpI,GAAAA,CAAMe,OAAAA,EAAAA,EACN7D,EAAAA,CAAYiL,CAAAA,EAAOV,EAAAA,CAAAA,EACnBhN,EAAAA,CAAgB0N,CAAAA,EAAOhC,EAAAA,CAAAA,EACvBtL,EAAAA,CAAasN,CAAAA,EAAO,OAAA,EAASW,CAAAA,CAAAA,EAC7BjO,EAAAA,CAAasN,CAAAA,EAAOvC,EAAAA,EAAYmD,CAAAA,IAAS,EAAA,CAAA;aAAA;YAqFzCpF,MAAAA,EAAAA,CAAAA;YAAAA,KAAAA,EAAAA,SAhCatI,CAAAA,EAAMzD,CAAAA,EAAOiT,CAAAA,EAAAA;gBAC1BC,CAAAA,CAAOD,CAAAA,IAAgB5B,CAAAA,IAAad,CAAAA,EAAO9M,CAAAA,EAAMzD,CAAAA,CAAAA;aAAAA;YAiCjDmT,QAAAA,EAAAA,SAjBgBC,CAAAA,EAAMC,CAAAA,EAAAA;gBAAAA,OAClBC,CAAAA,GAAOjN,EAAAA,CAAI+M,CAAAA,GAAO/C,EAAAA,CAAAA,EAAAA,AAEpBiD,CAAAA,CAAAA,GAAAA,CADGlC,CAAAA,IAAYjJ,CAAAA,CAAAA,CAAQiE,MAAAA,IAAUzB,CAAAA,CAAQgC,EAAAA,CAAGuD,EAAAA,CAAAA,CAAAA,AAAAA,GACrClK,EAAAA,CAAIsN,CAAAA,EAAM3I,CAAAA,CAAQxM,MAAAA,GAASmV,CAAAA,CAAAA,GAE7BA,CAAAA,CAAAA,IAAQD,CAAAA,CAAAA;aAAAA;SAAAA,AAAAA;QAAAA,OAcVjB,CAAAA,CAAAA;KAAAA;IAAAA,IClLImB,EAAAA,GAA6B5N,EAAAA,GAAAA,WAAAA,AAAAA;IAAAA,ICD7B6N,EAAAA,GAA0B;QAAEC,OAAAA,EAAAA,CAAS,CAAA;QAAOC,OAAAA,EAAAA,CAAS,CAAA;KAAA,AAAA;IAAA,ICErDC,EAAAA,GAAoB;QAC/BC,QAAAA,EAAU,GAAA;QACVC,KAAAA,EAAO9G,EAAAA;QACP+G,IAAAA,EAAMhH,EAAAA;QACNiH,EAAAA,EAAI/G,EAAAA;QACJgH,IAAAA,EAAM/G,EAAAA;KAAAA,AAAAA;IAAAA,SAEQgH,EAAAA,CAAazR,CAAAA,EAAAA;QAAAA,OAC3BA,CAAAA,GAAM7C,EAAAA,CAAS6C,CAAAA,CAAAA,GAAOA,CAAAA,GAAMA,CAAAA,CAAIA,GAAAA,EACzBmR,EAAAA,CAAkBnR,CAAAA,CAAAA,IAAQA,CAAAA,CAAAA;KAAAA;IAAAA,ICN7B0R,EAAAA,GAAiB,SAAA,AAAA;IAAA,ICJVC,EAAAA,GAAwBxO,EAAAA,GAAAA,OAAAA,EACxByO,EAAAA,GAA2BD,EAAAA,GAAAA,SAAAA,EAC3BE,EAAAA,GAAAA,GAAAA,GAAqBF,EAAAA,GAAAA,MAAAA,GAAyBC,EAAAA,GAAAA,GAAAA,AAAAA;IAAAA,ICWrDE,EAAAA,GAAe;QAAC,GAAA;QAAK,OAAA;KAAA,AAAA;IAAA,IAAA,EAAA,GAAA,MAAA,CAAA,MAAA,CAAA;QAAA,SAAA,EAAA,IAAA;QAAA,KAAA,EAAA,SCTL3J,CAAAA,EAAS4J,GAAAA,EAAapM,CAAAA,EAAAA;YAAAA,IAClCuE,CAAAA,GAAU/B,CAAAA,CAAV+B,KAAAA,EACF8H,EAAAA,GAAcrM,CAAAA,CAAQqM,WAAAA,IAAe,EAAA,EACrCC,CAAAA,GAAgBtM,CAAAA,CAAQsM,aAAAA,IAAiB,EAAA,EACzC3J,EAAAA,GAASpD,EAAAA,EAAAA,EACTgN,CAAAA,GAAU,EAAA,AAAA;YAAA,SASPvL,CAAAA,CAAQwL,CAAAA,EAAAA;gBACXA,CAAAA,IACF7J,EAAAA,CAAO3B,OAAAA,EAAAA;aAAAA;YAAAA,SAGFyL,CAAAA,CAASC,CAAAA,EAAU3P,CAAAA,EAAAA;gBACpB4P,CAAAA,GAAYC,UAAAA,CAAW7P,CAAAA,CAAAA,CAC7B4F;gBAAAA,EAAAA,CAAOjM,IAAAA,CAAKiW,CAAAA,EAAW,QAAA,EAAU/I,CAAAA,CAAAA,EACjC2I,CAAAA,CAAQpU,IAAAA,CAAK;oBAACuU,CAAAA;oBAAUC,CAAAA;iBAAAA,CAAAA;aAAAA;YAAAA,SAEjB/I,CAAAA,GAAAA;gBAAAA,IACDyE,GAAAA,GAAY9D,CAAAA,CAAMC,EAAAA,CtExBH,CAAA,CAAA,EsEyBfqI,EAAAA,GAAY7M,CAAAA,CAAQ6M,SAAAA,EACpBC,CAAAA,GAASP,CAAAA,CAAQQ,MAAAA,CAAO,SAACC,CAAAA,EAASC,CAAAA,EAAAA;oBAAAA,OAC/BzS,EAAAA,CAAMwS,CAAAA,EAASC,CAAAA,CAAM,CAAA,CAAA,CAAG1T,OAAAA,GAAU0T,CAAAA,CAAM,CAAA,CAAA,GAAK,EAAA,CAAA,CAAA;iBAAA,EACnD,EAAA,CAAA,AACHxS;gBAAAA,EAAAA,CAAKuF,CAAAA,CAAAA,EACLkE,CAAAA,CAAI4I,CAAAA,CAAAA,EACA9M,CAAAA,CAAQgB,OAAAA,GACVwB,CAAAA,CAAQxB,OAAAA,CAA4B,YAAA,KAApBhB,CAAAA,CAAQgB,OAAAA,CAAAA,GACfqH,GAAAA,GACTrH,CAAAA,CAAAA,CAAAA,CAAQ,CAAA,CAAA,EACRwB,CAAAA,CAAQoI,KAAAA,EAAAA,CAAAA,GAERiC,EAAAA,KAAc7M,CAAAA,CAAQ6M,SAAAA,IAAarK,CAAAA,CAAQ0K,OAAAA,EAAAA;aAAAA;YAAAA,SAQtChJ,CAAAA,CAAIiJ,CAAAA,EAAMC,CAAAA,EAAAA;gBACjB5S,EAAAA,CAAMwF,CAAAA,EAASmN,CAAAA,CAAAA,EACfC,CAAAA,IAAQ5S,EAAAA,CAAMV,MAAAA,CAAOuT,cAAAA,CAAerN,CAAAA,CAAAA,EAAUmN,CAAAA,CAAAA,EACzC5I,CAAAA,CAAMC,EAAAA,CtEtDQ,CAAA,CAAA,IsEuDjBhC,CAAAA,CAAQO,IAAAA,CAAKlB,EAAAA,EAAe7B,CAAAA,CAAAA;aAAAA;YAAAA,OAGzB;gBACLsN,KAAAA,EAAAA,WAAAA;oBAAAA,IA/CMC,CAAAA,GAA+B,KAAA,KAAvBvN,CAAAA,CAAQwN,UAAAA,AACtB3T;oBAAAA,EAAAA,CAAQwS,EAAAA,CAAAA,CAAaoB,IAAAA,CAAK,SAACC,CAAAA,EAAGC,CAAAA,EAAAA;wBAAAA,OAAMJ,CAAAA,GAAAA,CAASG,CAAAA,GAAAA,CAAKC,CAAAA,GAAAA,CAAKA,CAAAA,GAAAA,CAAKD,CAAAA,CAAAA;qBAAAA,CAAAA,CAAG5V,OAAAA,CAAQ,SAACuC,CAAAA,EAAAA;wBACtEoS,CAAAA,CAASJ,EAAAA,CAAYhS,CAAAA,CAAAA,EAAAA,GAAAA,GAAUkT,CAAAA,CAAAA,GAAQ,KAAA,GAAQ,KAAA,CAAA,GAAA,SAAA,GAAelT,CAAAA,GAAAA,KAAAA,CAAAA;qBAAAA,CAAAA,EAEhEoS,CAAAA,CAASH,CAAAA,EAAejX,EAAAA,CAAAA,EACxBuO,CAAAA,EAAAA;iBAAAA;gBA2CA5C,OAAAA,EAAAA,CAAAA;gBACA+L,MAAAA,EAAAA,SAfca,CAAAA,EAAAA;oBACVhB,UAAAA,CAAWvX,EAAAA,CAAAA,CAA8BkE,OAAAA,IAC3CqU,CAAAA,CAAAA,GAASpT,EAAAA,CAAMwF,CAAAA,EAASsM,CAAAA,CAAAA,GAAiB7R,EAAAA,CAAKuF,CAAAA,EAASnG,EAAAA,CAAQyS,CAAAA,CAAAA,CAAAA,CAAAA,AAAAA;iBAAAA;gBAcjEpI,GAAAA,EAAAA,CAAAA;aAAAA,CAAAA;SAAAA;QAAAA,SAAAA,EAAAA,SZlDsB1B,GAAAA,EAAS4J,GAAAA,EAAapM,CAAAA,EAAAA;YAAAA,OAYvC;gBACL6I,OAAAA,EAAAA,SAZevN,GAAAA,EAAMuS,GAAAA,EAAUhB,CAAAA,EAAAA;oBAAAA,IAEzB3E,CAAAA,GDdS,KAAA,KCaf2E,CAAAA,CAAAA,GAAYA,CAAAA,IAAa7M,CAAAA,CAAQ6M,SAAAA,CAAAA,IACGgB,GAAAA,GAAehB,CAAAA,KAAc9H,EAAAA,GAAM,CAAA,GAAA,EAAK,GAA7B,CAAA,AAAA;oBAAA,OACxCC,EAAAA,CAAgB1J,GAAAA,CAAAA,IAAS0J,EAAAA,CAAgB1J,GAAAA,CAAAA,CAAM4M,CAAAA,CAAAA,IAAU5M,GAAAA,CAAK8D,OAAAA,sBAA6B,SAAC0O,CAAAA,EAAOC,CAAAA,EAAAA;wBAClG5O,CAAAA,GAAc6F,EAAAA,CAAgB8I,CAAAA,CAAME,WAAAA,EAAAA,CAAAA,CAAe9F,CAAAA,CAAAA,IAAU4F,CAAAA,CAAAA;wBAAAA,OACnD,CAAA,GAATC,CAAAA,GAAa5O,CAAAA,CAAY8O,MAAAA,CAAO,CAAA,CAAA,CAAGC,WAAAA,EAAAA,GAAgB/O,CAAAA,CAAYlJ,KAAAA,CAAM,CAAA,CAAA,GAAKkJ,CAAAA,CAAAA;qBAAAA,CAAAA,CAAAA;iBAAAA;gBAQnFgP,MAAAA,EAAAA,SALctW,CAAAA,EAAAA;oBAAAA,OACPA,CAAAA,GDrBQ,CAAA,KAAA,KCqBCmI,CAAAA,CAAQ6M,SAAAA,GAAoB,CAAA,GAAA,EAAK,CAAA,AAAA,CAAA;iBAAA;aAAA,CAAA;SAAA;QAAA,QAAA,EAAA,SagB5BrK,GAAAA,EAAS4J,GAAAA,EAAapM,EAAAA,EAAAA;YAAAA,IAQzCqK,CAAAA,EACA+D,CAAAA,EACAC,CAAAA,EAAAA,CAAAA,GATiB9L,EAAAA,CAAeC,GAAAA,CAAAA,EAA5BI,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EAAIlM,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EACJ6R,CAAAA,GAAS/F,GAAAA,CAAT+F,IAAAA,EACAG,CAAAA,GAAS1I,EAAAA,CAAT0I,IAAAA,EACF4F,CAAAA,GAAW,EAAA,EACXC,CAAAA,GAAS,EAAA,EACXC,CAAAA,GAAc,EAAA,EACdC,CAAAA,GAAe,EAAA,AAAA;YAAA,SAIVnB,CAAAA,GAAAA;gBAmCPjD,CAAAA,GAAQqE,CAAAA,CAAAA,GAAAA,GAASpI,EAAAA,CAAAA,EACjB8H,CAAAA,GAAOzU,EAAAA,CAAM0Q,CAAAA,EAAAA,GAAAA,GAAW9D,EAAAA,CAAAA,EACxB9I,EAAAA,CAAO4M,CAAAA,IAAS+D,CAAAA,EAAM,kCAAA,CAAA,EACtBjW,EAAAA,CAAKoW,CAAAA,EAAQxV,EAAAA,CAASqV,CAAAA,EAAAA,GAAAA,GAAU5H,EAAAA,GAAAA,QAAAA,GAAoBC,EAAAA,GAAAA,GAAAA,CAAAA,CAAAA,EACpDzM,EAAAA,CAAO;oBACL2U,MAAAA,EAAQhI,EAAAA;oBACRgC,UAAAA,EAAY5B,EAAAA;oBACZ6H,IAAAA,EAAM/H,EAAAA;oBACNgI,IAAAA,EAAM/H,EAAAA;oBACNgI,GAAAA,EAAK7H,EAAAA;oBACL8H,MAAAA,EAAQ7H,EAAAA;iBAAAA,EACP,SAACpL,CAAAA,EAAWzB,CAAAA,EAAAA;oBACbiU,CAAAA,CAASjU,CAAAA,CAAAA,GAAOqU,CAAAA,CAAAA,GAAAA,GAAS5S,CAAAA,CAAAA;iBAAAA,CAAAA,EAE3BxB,EAAAA,CAAOgU,CAAAA,EAAU;oBAAE/F,IAAAA,EAAAA,CAAAA;oBAAM8B,KAAAA,EAAAA,CAAAA;oBAAO+D,IAAAA,EAAAA,CAAAA;oBAAMG,MAAAA,EAAAA,CAAAA;iBAAAA,CAAAA,EAAAA,WAAAA;oBAAAA,IAGhCjL,GAAAA,GAAKiF,CAAAA,CAAKjF,EAAAA,IAAAA,SrBnGK0L,CAAAA,EAAAA;wBAAAA,OAAAA,EAAAA,GACbA,CAAAA,GAAS3P,EAAAA,CAAIC,EAAAA,CAAI0P,CAAAA,CAAAA,GAAAA,AAAW1P,CAAAA,EAAAA,CAAI0P,CAAAA,CAAAA,IAAW,CAAA,CAAA,GAAK,CAAA,CAAA,CAAA;qBqBkGlCC,CAAS1R,EAAAA,CAAAA,EACzB2R,CAAAA,GAAOlP,EAAAA,CAAQkP,IAAAA,AACrB3G;oBAAAA,CAAAA,CAAKjF,EAAAA,GAAKA,GAAAA,EACV+G,CAAAA,CAAM/G,EAAAA,GAAK+G,CAAAA,CAAM/G,EAAAA,IAASA,GAAAA,GAAAA,QAAAA,EAC1B8K,CAAAA,CAAK9K,EAAAA,GAAK8K,CAAAA,CAAK9K,EAAAA,IAASA,GAAAA,GAAAA,OAAAA,EAAAA,CACnB1H,CAAAA,CAAa2M,CAAAA,EAAMhD,EAAAA,CAAAA,IAA0B,SAAA,KAAjBgD,CAAAA,CAAK4G,OAAAA,IAAyBD,CAAAA,IAC7DpU,EAAAA,CAAayN,CAAAA,EAAMhD,EAAAA,EAAM2J,CAAAA,CAAAA,CAE3BpU;oBAAAA,EAAAA,CAAayN,CAAAA,EAAMtC,EAAAA,EAAsByC,CAAAA,CAAK0G,QAAAA,CAAAA,EAC9CtU,EAAAA,CAAasT,CAAAA,EAAM7I,EAAAA,EAAM,cAAA,CAAA;iBA3DzB8J,EAAAA,EACAzL,CAAAA,EAAAA;aAAAA;YAAAA,SAaO5C,CAAAA,CAAQwL,CAAAA,EAAAA;gBAAAA,IACT5R,CAAAA,GAAQwL,EAAAA,CAAekJ,MAAAA,CAAO,OAAA,CAAA,AACpCxZ;gBAAAA,EAAAA,CAAMyY,CAAAA,CAAAA,EACNpR,EAAAA,CAAYoL,CAAAA,EAAMiG,CAAAA,CAAAA,EAClBrR,EAAAA,CAAYkN,CAAAA,EAAOoE,CAAAA,CAAAA,EACnB/T,EAAAA,CAAgB;oBAAC2P,CAAAA;oBAAO+D,CAAAA;iBAAAA,EAAOxT,CAAAA,CAAAA,EAC/BF,EAAAA,CAAgB6N,CAAAA,EAAMiE,CAAAA,GAAa5R,CAAAA,GAAQ;oBAAC,OAAA;oBAASqL,EAAAA;iBAAAA,CAAAA;aAAAA;YAAAA,SAE9CrC,CAAAA,GAAAA;gBACPzG,EAAAA,CAAYoL,CAAAA,EAAMiG,CAAAA,CAAAA,EAClBrR,EAAAA,CAAYkN,CAAAA,EAAOoE,CAAAA,CAAAA,EACnBD,CAAAA,GAAce,CAAAA,CAAWlJ,EAAAA,CAAAA,EACzBoI,CAAAA,GAAec,CAAAA,CAAWjJ,EAAAA,CAAAA,EAC1B3N,EAAAA,CAAS4P,CAAAA,EAAMiG,CAAAA,CAAAA,EACf7V,EAAAA,CAAS0R,CAAAA,EAAOoE,CAAAA,CAAAA,EAChB3T,EAAAA,CAAayN,CAAAA,EAAM1C,EAAAA,EAAY7F,EAAAA,CAAQgJ,KAAAA,CAAAA,EACvClO,EAAAA,CAAayN,CAAAA,EAAMzC,EAAAA,EAAiB9F,EAAAA,CAAQwP,UAAAA,CAAAA;aAAAA;YAAAA,SA+BrCd,CAAAA,CAAKlV,GAAAA,EAAAA;gBACNlB,GAAAA,GAAMyE,EAAAA,CAAMwL,CAAAA,EAAM/O,GAAAA,CAAAA,CAAAA;gBAAAA,OACjBlB,GAAAA,IAAAA,SChHa2S,CAAAA,EAAMzR,CAAAA,EAAAA;oBAAAA,IACxBjC,EAAAA,CAAW0T,CAAAA,CAAKwE,OAAAA,CAAAA,EAAAA,OACXxE,CAAAA,CAAKwE,OAAAA,CAAQjW,CAAAA,CAAAA,CAAAA;oBAAAA,IAAAA,IAElBlB,CAAAA,GAAM2S,CAAAA,EACH3S,CAAAA,IAAwB,CAAA,KAAjBA,CAAAA,CAAIoX,QAAAA,IAAAA,CACZnW,CAAAA,CAAQjB,CAAAA,EAAKkB,CAAAA,CAAAA,EAGjBlB,CAAAA,GAAMA,CAAAA,CAAIqX,aAAAA,CAAAA;oBAAAA,OAELrX,CAAAA,CAAAA;iBDqGSmX,CAAQnX,GAAAA,EAAAA,GAAAA,GAAS+N,EAAAA,CAAAA,KAAkBkC,CAAAA,GAAOjQ,GAAAA,GAAAA,KAAM,CAAA,CAAA;aAAA;YAAA,SAEvDiX,CAAAA,CAAWK,CAAAA,EAAAA;gBAAAA,OACX;oBACFA,CAAAA,GAAAA,IAAAA,GAAS5P,EAAAA,CAAQ9I,IAAAA;oBACjB0Y,CAAAA,GAAAA,IAAAA,GAAS5P,EAAAA,CAAQ6M,SAAAA;oBACpB7M,EAAAA,CAAQ6P,IAAAA,IAAWD,CAAAA,GAAAA,aAAAA;oBACnB5P,EAAAA,CAAQwI,YAAAA,IAAmBoH,CAAAA,GAAAA,OAAAA;oBAC3BA,CAAAA,KAASvJ,EAAAA,IAAce,EAAAA;iBAAAA,CAAAA;aAAAA;YAAAA,OAGpB9M,EAAAA,CAAOgU,CAAAA,EAAU;gBACtBhB,KAAAA,EAAAA,CAAAA;gBACA1C,KAAAA,EAAAA,WAAAA;oBAxEAhI,CAAAA,CAAGhB,EAAAA,EAAeZ,CAAAA,CAAAA,EAClB4B,CAAAA,CAAGhB,EAAAA,EAAe0L,CAAAA,CAAAA,EAClB1K,CAAAA,CAAGf,EAAAA,EAAe+B,CAAAA,CAAAA,EAClBlN,CAAAA,CAAKyE,QAAAA,EAAawM,EAAAA,GAAAA,UAAAA,EAA+B,SAAChL,CAAAA,EAAAA;wBAChD0R,CAAAA,GAAwB,SAAA,KAAX1R,CAAAA,CAAEzF,IAAAA;qBAAAA,EACd;wBAAEqU,OAAAA,EAAAA,CAAS,CAAA;qBAAA,CAAA,EACd7U,CAAAA,CAAK6R,CAAAA,EAAM,SAAA,EAAW,WAAA;wBACpBlQ,EAAAA,CAAYkQ,CAAAA,EAAMd,EAAAA,EAAAA,CAAAA,CAAkB4G,CAAAA,CAAAA;qBAAAA,CAAAA;iBAAAA;gBAkEtCrN,OAAAA,EAAAA,CAAAA;aAAAA,CAAAA,CAAAA;SAAAA;QAAAA,MAAAA,EAAAA,SE3GmBwB,EAAAA,EAAS4J,EAAAA,EAAapM,CAAAA,EAAAA;YAAAA,IAAAA,GAAAA,GAChBuC,EAAAA,CAAeC,EAAAA,CAAAA,EAAlCI,GAAAA,GAAAA,GAAAA,CAAAA,EAAAA,EAAIG,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,EAAMrM,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,EACV6X,CAAAA,GAAAA,AAAAA,CAAAA,GAAAA,GAAiBnC,EAAAA,CAAYhC,QAAAA,CAAAA,CAA7BmE,MAAAA,EAAQH,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,EACV0B,CAAAA,GAAU,EAAA,AAAA;YAAA,SASPT,EAAAA,GAAAA;gBACPd,CAAAA,CAAOzW,OAAAA,CAAQ,SAACsQ,CAAAA,EAAOF,CAAAA,EAAAA;oBACrBuE,CAAAA,CAASrE,CAAAA,EAAOF,CAAAA,EAAAA,EAAQ,CAAA;iBAAA,CAAA;aAAA;YAAA,SAGnBlH,CAAAA,GAAAA;gBACPlJ,CAAAA,CAAQ,SAAC0R,CAAAA,EAAAA;oBACPA,CAAAA,CAAOxI,OAAAA,EAAAA;iBAAAA,CAAAA,EAETlL,EAAAA,CAAMga,CAAAA,CAAAA;aAAAA;YAAAA,SAOCrD,CAAAA,CAASrE,CAAAA,EAAOF,CAAAA,EAAOC,CAAAA,EAAAA;gBACxBlO,CAAAA,GAASgO,EAAAA,CAAMzF,EAAAA,EAAS0F,CAAAA,EAAOC,CAAAA,EAAYC,CAAAA,CAAAA,CACjDnO;gBAAAA,CAAAA,CAAO2Q,KAAAA,EAAAA,EACPkF,CAAAA,CAAQ3X,IAAAA,CAAK8B,CAAAA,CAAAA;aAAAA;YAAAA,SAEN8V,CAAAA,CAAIC,GAAAA,EAAAA;gBAAAA,OACJA,GAAAA,GAAgBtW,CAAAA,CAAO,SAAC8P,CAAAA,EAAAA;oBAAAA,OAAAA,CAAYA,CAAAA,CAAOP,OAAAA,CAAAA;iBAAAA,CAAAA,GAAW6G,CAAAA,CAAAA;aAAAA;YAAAA,SA6BtDhY,CAAAA,CAAQE,CAAAA,EAAUgY,CAAAA,EAAAA;gBACzBD,CAAAA,CAAIC,CAAAA,CAAAA,CAAelY,OAAAA,CAAQE,CAAAA,CAAAA;aAAAA;YAAAA,SAEpB0B,CAAAA,CAAOuW,CAAAA,EAAAA;gBAAAA,OACPH,CAAAA,CAAQpW,MAAAA,CAAOnC,EAAAA,CAAW0Y,CAAAA,CAAAA,GAAWA,CAAAA,GAAU,SAACzG,CAAAA,EAAAA;oBAAAA,OAAWhS,EAAAA,CAASyY,CAAAA,CAAAA,GAAW1W,CAAAA,CAAQiQ,CAAAA,CAAOpB,KAAAA,EAAO6H,CAAAA,CAAAA,GAAWhY,EAAAA,CAASL,EAAAA,CAAQqY,CAAAA,CAAAA,EAAUzG,CAAAA,CAAOtB,KAAAA,CAAAA,CAAAA;iBAAAA,CAAAA,CAAAA;aAAAA;YAAAA,OA4BpJ;gBACL0C,KAAAA,EAAAA,WAAAA;oBA3FAyE,EAAAA,EAAAA,EACAzM,GAAAA,CAAGhB,EAAAA,EAAeZ,CAAAA,CAAAA,EAClB4B,GAAAA,CAAGhB,EAAAA,EAAeyN,EAAAA,CAAAA,EAClBzM,GAAAA,CAAG;wBAAC1B,EAAAA;wBAAeU,EAAAA;qBAAAA,EAAgB,WAAA;wBACjCkO,CAAAA,CAAQrC,IAAAA,CAAK,SAACyC,CAAAA,EAAQ1G,CAAAA,EAAAA;4BAAAA,OAAW0G,CAAAA,CAAOhI,KAAAA,GAAQsB,CAAAA,CAAOtB,KAAAA,CAAAA;yBAAAA,CAAAA;qBAAAA,CAAAA;iBAAAA;gBAwFzDlH,OAAAA,EAAAA,CAAAA;gBACA4C,MAAAA,EAAAA,WAAAA;oBA1EA9L,CAAAA,CAAQ,SAAC0R,CAAAA,EAAAA;wBACPA,CAAAA,CAAO5F,MAAAA,EAAAA;qBAAAA,CAAAA;iBAAAA;gBA0ET6I,QAAAA,EAAAA,CAAAA;gBACAsD,GAAAA,EAAAA,CAAAA;gBACAI,KAAAA,EAAAA,SAjEaC,GAAAA,EAAAA;oBAAAA,IACLC,CAAAA,GAAejE,EAAAA,CAAfiE,UAAAA,EACFnI,CAAAA,GAAQmI,CAAAA,CAAWC,OAAAA,CAAQF,GAAAA,CAAAA,EAC3BrS,CAAAA,GAAMsS,CAAAA,CAAWE,QAAAA,EAAAA,GAAa,CAAA,GAAIvQ,CAAAA,CAAQwQ,OAAAA,AAAAA;oBAAAA,OACzC9W,CAAAA,CAAO,SAAC8P,CAAAA,EAAAA;wBAAAA,OAAWjL,EAAAA,CAAQiL,CAAAA,CAAOtB,KAAAA,EAAOA,CAAAA,EAAOA,CAAAA,GAAQnK,CAAAA,GAAM,CAAA,CAAA,CAAA;qBAAA,CAAA,CAAA;iBAAA;gBA8DrE4L,KAAAA,EAAAA,SA5DazB,CAAAA,EAAAA;oBAAAA,OACNxO,CAAAA,CAAOwO,CAAAA,CAAAA,CAAO,CAAA,CAAA,CAAA;iBAAA;gBA4DrB1P,GAAAA,EAAAA,SA1DWJ,GAAAA,EAAO8P,CAAAA,EAAAA;oBAClBuI,EAAAA,CAAYrY,GAAAA,EAAO,SAACgQ,GAAAA,EAAAA;wBAAAA,IAKVjP,CAAAA,EAuBgB4G,CAAAA,EAEpB/J,CAAAA,AA1BA0B;wBAAAA,EAAAA,CAFF0Q,GAAAA,GADE5Q,EAAAA,CAAS4Q,GAAAA,CAAAA,GACH/L,CAAAA,CAAU+L,GAAAA,CAAAA,GAEFA,GAAAA,CAAAA,IAAAA,CAAAA,AACVjP,CAAAA,CAAAA,GAAMoV,CAAAA,CAAOrG,CAAAA,CAAAA,CAAAA,GACbjP,EAAAA,CAAOmP,GAAAA,EAAOjP,CAAAA,CAAAA,GAAON,EAAAA,CAAOuV,CAAAA,EAAMhG,GAAAA,CAAAA,EACxCzP,EAAAA,CAASyP,GAAAA,EAAOpI,CAAAA,CAAQzH,OAAAA,CAAQ6P,KAAAA,CAAAA,EAqBVrI,CAAAA,GApBDvJ,EAAAA,CAAMuM,CAAAA,EAAMjB,EAAAA,CAAAA,EAqB/B4O,GAAAA,GAASzT,EAAAA,CAAS3E,GAAAA,EAAK,KAAA,CAAA,EAAA,AACvBtC,CAAAA,CAAAA,GAAW0a,GAAAA,CAAX1a,MAAAA,CAAAA,GAEJ0a,GAAAA,CAAO5Y,OAAAA,CAAQ,SAAC6Y,CAAAA,EAAAA;4BACdja,CAAAA,CAAKia,CAAAA,EAAK,YAAA,EAAc,WAAA;gCAAA,EACf3a,CAAAA,IACL+J,CAAAA,EAAAA;6BAAAA,CAAAA;yBAAAA,CAAAA,GAKNA,CAAAA,EAAAA,CAAAA,AAAAA;qBAAAA,CAAAA,EA7BFgD,CAAAA,CAAKnB,EAAAA,CAAAA;iBAAAA;gBAAAA,MAAAA,EAAAA,SAESqO,GAAAA,EAAAA;oBACdW,CAAAA,CAAWlX,CAAAA,CAAOuW,GAAAA,CAAAA,CAAS1G,GAAAA,CAAI,SAACC,CAAAA,EAAAA;wBAAAA,OAAWA,CAAAA,CAAOpB,KAAAA,CAAAA;qBAAAA,CAAAA,CAAAA,EAClDrF,CAAAA,CAAKnB,EAAAA,CAAAA;iBAAAA;gBAAAA,OAAAA,EA4CL9J,CAAAA;gBACA4B,MAAAA,EAAAA,CAAAA;gBACA2B,KAAAA,EAAAA,SAtCaC,CAAAA,EAAMzD,CAAAA,EAAOiT,CAAAA,EAAAA;oBAC1BhT,CAAAA,CAAQ,SAAC0R,CAAAA,EAAAA;wBACPA,CAAAA,CAAOnO,KAAAA,CAAMC,CAAAA,EAAMzD,CAAAA,EAAOiT,CAAAA,CAAAA;qBAAAA,CAAAA;iBAAAA;gBAqC5B+F,SAAAA,EAAAA,SAnBiBb,CAAAA,EAAAA;oBAAAA,OAAAA,AACVA,CAAAA,CAAAA,GAAgBzB,CAAAA,GAAgBuB,CAAAA,CAAAA,CAAT9Z,MAAAA,CAAAA;iBAAAA;gBAmB9B8a,QAAAA,EAAAA,WAAAA;oBAAAA,OAhBOhB,CAAAA,CAAQ9Z,MAAAA,GAASgK,CAAAA,CAAQwQ,OAAAA,CAAAA;iBAAAA;aAAAA,CAAAA;SAAAA;QAAAA,MAAAA,EAAAA,SC9GbhO,GAAAA,EAAS4J,GAAAA,EAAapM,EAAAA,EAAAA;YAAAA,IAMvC+Q,CAAAA,EACAC,CAAAA,EANIpO,CAAAA,GAAAA,AAAAA,CAAAA,CAAAA,GAAmBL,EAAAA,CAAeC,GAAAA,CAAAA,CAAAA,CAAlCI,EAAAA,EAAIlM,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAMqM,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EACV2G,CAAAA,GAAW0C,GAAAA,CAAX1C,MAAAA,EACAb,CAAAA,GAAYuD,GAAAA,CAAYtD,SAAAA,CAAxBD,OAAAA,EACAN,CAAAA,GAAAA,AAAAA,CAAAA,GAAAA,GAAsB6D,GAAAA,CAAYhC,QAAAA,CAAAA,CAAlC7B,IAAAA,EAAM8B,CAAAA,GAAAA,GAAAA,CAAAA,KAAAA,EAAO+D,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,EACbzE,CAAAA,GAA8BD,CAAAA,CAA9BC,KAAAA,EAAcsH,CAAAA,GAAgBvH,CAAAA,CAAvBrO,KAAAA,AAAAA;YAAAA,SASNgU,CAAAA,GAAAA;gBACP2B,CAAAA,GAAW,IAAA,EACXD,CAAAA,GAAW/Q,EAAAA,CAAQ6M,SAAAA,KAAc9H,EAAAA,EACjC1J,CAAAA,CAAMkN,CAAAA,EAAM,UAAA,EAAYjL,EAAAA,CAAK0C,EAAAA,CAAQiF,KAAAA,CAAAA,CAAAA,EACrC5J,CAAAA,CAAMgP,CAAAA,EAAOxB,CAAAA,CAAQ,aAAA,CAAA,EAAgBqI,CAAAA,CAAAA,CAAW,CAAA,CAAA,CAAA,EAChD7V,CAAAA,CAAMgP,CAAAA,EAAOxB,CAAAA,CAAQ,cAAA,CAAA,EAAiBqI,CAAAA,CAAAA,CAAW,CAAA,CAAA,CAAA,EACjDC,CAAAA,EAAAA;aAAAA;YAAAA,SAEOA,CAAAA,GAAAA;gBAAAA,IACDC,GAAAA,GAAUpV,CAAAA,CAAKuM,CAAAA,CAAAA,AAChByI;gBAAAA,CAAAA,IAAYA,CAAAA,CAAS/L,KAAAA,KAAUmM,GAAAA,CAAQnM,KAAAA,IAAS+L,CAAAA,CAASK,MAAAA,KAAWD,GAAAA,CAAQC,MAAAA,IAC/EhW,CAAAA,CAAAA,CAAMgP,CAAAA,EAAO,QAAA,EAAA,WAAA;oBAAA,IAcXgH,CAAAA,GAAS,EAAA,AACTN;oBAAAA,CAAAA,IAEFtT,CAAAA,EAAAA,CADA4T,CAAAA,GAASC,CAAAA,EAAAA,EACM,mCAAA,CAAA,EACfD,CAAAA,GAAAA,OAAAA,GAAiBA,CAAAA,GAAAA,KAAAA,GAAYH,CAAAA,CAAAA,CAAW,CAAA,CAAA,GAAA,KAAA,GAAYA,CAAAA,CAAAA,CAAW,CAAA,CAAA,GAAA,GAAA,CAAA,AAAA,CAAA;oBAAA,OAE1DG,CAAAA,CAAAA;iBApBkBE,EAAAA,CAAAA,EACvBN,CAAAA,CAAYpI,CAAAA,CAAQ,aAAA,CAAA,EAAgBvL,EAAAA,CAAK0C,EAAAA,CAAQwR,GAAAA,CAAAA,CAAAA,EACjDP,CAAAA,CAAY,OAAA,EAwBPjR,EAAAA,CAAQyR,SAAAA,GAAY,IAAA,GAAOnU,EAAAA,CAAK0C,EAAAA,CAAQ0R,UAAAA,CAAAA,IAAgBX,CAAAA,CAAAA,GAAW,EAAA,GAAKY,CAAAA,EAAAA,CAAAA,AAAAA,CAAAA,EAvB7EV,CAAAA,CAAY,QAAA,EA0BP3T,EAAAA,CAAK0C,EAAAA,CAAQ4R,WAAAA,CAAAA,IAAiBb,CAAAA,CAAAA,GAAW/Q,EAAAA,CAAQ6R,UAAAA,GAAa,IAAA,GAAOF,CAAAA,EAAAA,GAAiBL,CAAAA,EAAAA,CAAAA,AAAAA,EAAAA,CA1BnD,CAAA,CAAA,EACxCN,CAAAA,GAAWI,GAAAA,EACXrO,CAAAA,CAAKhB,EAAAA,CAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAGAmP,CAAAA,CAAWhX,CAAAA,EAAAA;gBAAAA,IACV4X,CAAAA,GAAY9R,EAAAA,CAAZ8R,OAAAA,EACFxW,CAAAA,GAAOuN,CAAAA,CAAQ3O,CAAAA,GAAQ,OAAA,GAAU,MAAA,CAAA,AAAA;gBAAA,OAChC4X,CAAAA,IAAWxU,EAAAA,CAAKwU,CAAAA,CAAQxW,CAAAA,CAAAA,IAAUlE,CAAAA,CAAAA,CAAS0a,CAAAA,CAAAA,GAAW,CAAA,GAAIA,CAAAA,CAAAA,AAAAA,CAAAA,IAAa,KAAA,CAAA;aAAA;YAAA,SAWvER,CAAAA,GAAAA;gBAAAA,OACAhU,EAAAA,CAAK0C,EAAAA,CAAQqR,MAAAA,IAAUrV,CAAAA,CAAKoS,CAAAA,CAAAA,CAAMnJ,KAAAA,GAAQjF,EAAAA,CAAQ+R,WAAAA,CAAAA,CAAAA;aAAAA;YAAAA,SAQlDJ,CAAAA,GAAAA;gBAAAA,IACDH,CAAAA,GAAMlU,EAAAA,CAAK0C,EAAAA,CAAQwR,GAAAA,CAAAA,AAAAA;gBAAAA,OAAAA,YAAAA,GACLA,CAAAA,CAAAA,IAAAA,KAAAA,GAAaA,CAAAA,CAAAA,GAAAA,IAAAA,GAAUxR,CAAAA,EAAAA,CAAQwQ,OAAAA,IAAW,CAAA,CAAA,GAAIgB,CAAAA,CAAAA,IAAAA,KAAAA,GAAaA,CAAAA,CAAAA,GAAAA,GAAAA,CAAAA;aAAAA;YAAAA,SASxEQ,CAAAA,CAAU9J,CAAAA,EAAO+J,CAAAA,EAAAA;gBAAAA,IAClBhK,CAAAA,GAAQ0B,CAAAA,CAAMzB,CAAAA,CAAAA,AAAAA;gBAAAA,IAChBD,CAAAA,EAAO;oBACH/N,CAAAA,GAAQ8B,CAAAA,CAAKiM,CAAAA,CAAMG,KAAAA,CAAAA,CAAOS,CAAAA,CAAQ,OAAA,CAAA,CAAA,EAClC3D,CAAAA,GAAOlJ,CAAAA,CAAKoS,CAAAA,CAAAA,CAAMvF,CAAAA,CAAQ,MAAA,CAAA,CAAA,CAAA;oBAAA,OACzB3K,EAAAA,CAAIhE,CAAAA,GAAQgL,CAAAA,CAAAA,GAAS+M,CAAAA,CAAAA,GAAa,CAAA,GAAIC,CAAAA,EAAAA,CAAAA,AAAAA,CAAAA;iBAAAA;gBAAAA,OAExC,CAAA,CAAA;aAAA;YAAA,SAKAA,CAAAA,GAAAA;gBAAAA,IACDjK,CAAAA,GAAQ0B,CAAAA,CAAM,CAAA,CAAA,AAAA;gBAAA,OACb1B,CAAAA,IAASkK,UAAAA,CAAW9W,CAAAA,CAAM4M,CAAAA,CAAMG,KAAAA,EAAOS,CAAAA,CAAQ,aAAA,CAAA,CAAA,CAAA,IAAoB,CAAA,CAAA;aAAA;YAAA,OAKrE;gBACL+B,KAAAA,EAAAA,WAAAA;oBAAAA,IC1FqBnU,CAAAA,EAAM2b,CAAAA,EACzBnP,CAAAA,ADWFoM;oBAAAA,CAAAA,EAAAA,EACA3Y,CAAAA,CAAK2b,MAAAA,EAAQ,aAAA,ECbQ5b,CAAAA,CAAAA,GDagBD,EAAAA,CAAMuM,CAAAA,EAAMjB,EAAAA,CAAAA,EAAAA,WAAAA;wBCV5CmB,CAAAA,IAAAA,AACHA,CAAAA,CAAAA,GAAWD,EAAAA,CAAgBoP,CAAAA,IAAY,CAAA,EAAG,WAAA;4BACxC3b,CAAAA,EAAAA,EACAwM,CAAAA,GAAW,IAAA;yBAAA,EACV,IAAA,EAAM,CAAA,CAAA,CAAA,CACA9M,KAAAA,EAAAA;qBAAAA,CAAAA,CAAAA,EDMXyM,CAAAA,CAAG;wBAACf,EAAAA;wBAAeD,EAAAA;qBAAAA,EAAgByN,CAAAA,CAAAA,EACnCzM,CAAAA,CAAGd,EAAAA,EAAcqP,CAAAA,CAAAA;iBAAAA;gBA4EjBmB,QAAAA,EAAAA,WAAAA;oBAAAA,OA3BOtW,CAAAA,CAAKoS,CAAAA,CAAAA,CAAMvF,CAAAA,CAAQ,OAAA,CAAA,CAAA,CAAA;iBAAA;gBA4B1B0J,SAAAA,EAAAA,SA1BiBrK,CAAAA,EAAO+J,CAAAA,EAAAA;oBAAAA,OAAAA,AAClBhK,CAAAA,CAAAA,GAAQ0B,CAAAA,CAAMzB,CAAAA,IAAS,CAAA,CAAA,CAAA,GACdlM,CAAAA,CAAKiM,CAAAA,CAAMG,KAAAA,CAAAA,CAAOS,CAAAA,CAAQ,OAAA,CAAA,CAAA,GAAaoJ,CAAAA,CAAAA,GAAa,CAAA,GAAIC,CAAAA,EAAAA,CAAAA,AAAAA,GAAY,CAAA,CAAA;iBAAA;gBAyBnFM,UAAAA,EAAAA,WAAAA;oBAAAA,OAbOR,CAAAA,CAAUxP,GAAAA,CAAQxM,MAAAA,GAAS,CAAA,EAAA,CAAG,CAAA,CAAA,GAAQgc,CAAAA,CAAAA,EAAW,EAAA,CAAG,CAAA,CAAA,CAAA;iBAAA;gBAc3DA,SAAAA,EAAAA,CAAAA;gBACAS,UAAAA,EAAAA,SATkBvY,CAAAA,EAAAA;oBAAAA,OACXiY,UAAAA,CAAW9W,CAAAA,CAAMgP,CAAAA,EAAOxB,CAAAA,CAAAA,SAAAA,GAAkB3O,CAAAA,CAAAA,GAAQ,OAAA,GAAU,MAAA,CAAA,AAAA,CAAA,CAAA,CAAA,IAAe,CAAA,CAAA;iBAAA;aAAA,CAAA;SAAA;QAAA,MAAA,EAAA,SEnF/DsI,CAAAA,EAAS4J,EAAAA,EAAapM,CAAAA,EAAAA;YAAAA,IAKvC0S,GAAAA,EAAAA,GAAAA,GAJiBnQ,EAAAA,CAAeC,CAAAA,CAAAA,EAA5BI,EAAAA,GAAAA,GAAAA,CAAAA,EAAAA,EAAIG,EAAAA,GAAAA,GAAAA,CAAAA,IAAAA,EACJqH,CAAAA,GAAqBgC,EAAAA,CAArBhC,QAAAA,EAAUV,CAAAA,GAAW0C,EAAAA,CAAX1C,MAAAA,EACVb,EAAAA,GAAYuD,EAAAA,CAAYtD,SAAAA,CAAxBD,OAAAA,EACF8J,CAAAA,GAAS,EAAA,AAAA;YAAA,SAQNtD,EAAAA,GAAAA;gBACHqD,CAAAA,GAAAA,GAAaE,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,SAcDjP,CAAAA,EAAAA;oBAAAA,IACV4K,CAAAA,GAAS7E,CAAAA,CAAOqG,GAAAA,EAAAA,CAAM9Z,KAAAA,EAAAA,EACpBD,CAAAA,GAAWuY,CAAAA,CAAXvY,MAAAA,AAAAA;oBAAAA,IACJA,CAAAA,EAAQ;wBAAA,MACHuY,CAAAA,CAAOvY,MAAAA,GAAS2N,CAAAA,EACrBxL,EAAAA,CAAKoW,CAAAA,EAAQA,CAAAA,CAAAA,CAEfpW;wBAAAA,EAAAA,CAAKoW,CAAAA,CAAOtY,KAAAA,CAAAA,CAAO0N,CAAAA,CAAAA,EAAQ4K,CAAAA,CAAOtY,KAAAA,CAAM,CAAA,EAAG0N,CAAAA,CAAAA,CAAAA,CAAQ7L,OAAAA,CAAQ,SAACmQ,GAAAA,EAAOC,GAAAA,EAAAA;4BAAAA,IAC3D2K,CAAAA,GAAS3K,GAAAA,GAAQvE,CAAAA,EACjBmP,CAAAA,GAAAA,SAOOxa,CAAAA,EAAK4P,CAAAA,EAAAA;gCAChB4K,CAAAA,GAAQxa,CAAAA,CAAIya,SAAAA,CAAAA,CAAU,CAAA,CAAA,CAAA;gCAAA,OAC5Bpa,EAAAA,CAASma,CAAAA,EAAO9S,CAAAA,CAAQzH,OAAAA,CAAQua,KAAAA,CAAAA,EAChCA,CAAAA,CAAMxP,EAAAA,GAAQd,CAAAA,CAAQ+F,IAAAA,CAAKjF,EAAAA,GAAAA,QAAAA,GAAWjE,EAAAA,CAAI6I,CAAAA,GAAQ,CAAA,CAAA,EAC3C4K,CAAAA,CAAAA;6BAXWE,CAAU/K,GAAAA,CAAMG,KAAAA,EAAOF,GAAAA,CAAAA,AACrC2K;4BAAAA,CAAAA,GAAS5Z,EAAAA,CAAO6Z,CAAAA,EAAOvE,CAAAA,CAAO,CAAA,CAAA,CAAGnG,KAAAA,CAAAA,GAASvP,EAAAA,CAAOuR,CAAAA,CAASgE,IAAAA,EAAM0E,CAAAA,CAAAA,EAChE3a,EAAAA,CAAKwa,CAAAA,EAAQG,CAAAA,CAAAA,EACbpJ,CAAAA,CAAO+C,QAAAA,CAASqG,CAAAA,EAAO5K,GAAAA,GAAQvE,CAAAA,GAASkP,CAAAA,CAAAA,GAAS,CAAA,GAAI7c,CAAAA,CAAAA,AAAAA,EAASiS,GAAAA,CAAMC,KAAAA,CAAAA;yBAAAA,CAAAA;qBAAAA;iBAzBtE+K,CAASP,GAAAA,CAAAA,EACT3P,EAAAA,CAAKjB,EAAAA,CAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAGAd,CAAAA,GAAAA;gBACP7E,CAAAA,CAAOwW,CAAAA,CAAAA,EACP7c,EAAAA,CAAM6c,CAAAA,CAAAA;aAAAA;YAAAA,SAECO,CAAAA,GAAAA;gBACHR,GAAAA,GAAaE,CAAAA,EAAAA,IACf7P,EAAAA,CAAKnB,EAAAA,CAAAA;aAAAA;YAAAA,SAyBAgR,CAAAA,GAAAA;gBAAAA,IAKCO,CAAAA,EAJMC,CAAAA,GAAYpT,CAAAA,CAApB2S,MAAAA,AAAAA;gBAAAA,OACDnQ,CAAAA,CAAQgC,EAAAA,CAAGuD,EAAAA,CAAAA,GAEJqL,CAAAA,IAGVA,CAAAA,CAAAA,GAAAA,AAFMD,CAAAA,CAAAA,GAAYnT,CAAAA,CAAQ6I,EAAAA,CAAQ,YAAA,CAAA,CAAA,IAAkBuD,EAAAA,CAAYiH,MAAAA,CAAOd,SAAAA,CAAU,CAAA,CAAA,CAAA,IACjDtU,EAAAA,CAAKjC,CAAAA,CAAKoO,CAAAA,CAASC,KAAAA,CAAAA,CAAOxB,EAAAA,CAAQ,OAAA,CAAA,CAAA,GAAYsK,CAAAA,CAAAA,IACtDnT,CAAAA,CAAQ6I,EAAAA,CAAQ,WAAA,CAAA,CAAA,IAAiBrG,CAAAA,CAAQxM,MAAAA,IAzD7C,CAAA,GAyDuDgK,CAAAA,CAAQwQ,OAAAA,CAAAA,AAAAA,GAJnF4C,CAAAA,GAAU,CAAA,EAMLA,CAAAA,CAAAA;aAAAA;YAAAA,OAEF;gBACLxI,KAAAA,EAAAA,WAAAA;oBAtDAyE,EAAAA,EAAAA,EACAzM,EAAAA,CAAGhB,EAAAA,EAAeZ,CAAAA,CAAAA,EAClB4B,EAAAA,CAAGhB,EAAAA,EAAeyN,EAAAA,CAAAA,EAClBzM,EAAAA,CAAG;wBAACf,EAAAA;wBAAeC,EAAAA;qBAAAA,EAAeoR,CAAAA,CAAAA;iBAAAA;gBAoDlClS,OAAAA,EAAAA,CAAAA;aAAAA,CAAAA;SAAAA;QAAAA,IAAAA,EAAAA,SCtDiBwB,EAAAA,EAAS4J,CAAAA,EAAapM,EAAAA,EAAAA;YAAAA,IAMrCsT,CAAAA,EAAAA,GAAAA,GALiB/Q,EAAAA,CAAeC,EAAAA,CAAAA,EAA5BI,GAAAA,GAAAA,GAAAA,CAAAA,EAAAA,EAAIG,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,EACJmB,CAAAA,GAAQ1B,EAAAA,CAAQ+B,KAAAA,CAAhBL,GAAAA,EACAqO,EAAAA,GAAAA,AAAAA,CAAAA,GAAAA,GAA2DnG,CAAAA,CAAYiH,MAAAA,CAAAA,CAAvEd,SAAAA,EAAWE,EAAAA,GAAAA,GAAAA,CAAAA,UAAAA,EAAYT,EAAAA,GAAAA,GAAAA,CAAAA,SAAAA,EAAWM,CAAAA,GAAAA,GAAAA,CAAAA,QAAAA,EAAUE,CAAAA,GAAAA,GAAAA,CAAAA,UAAAA,EAC5C3J,CAAAA,GAAAA,AAAAA,CAAAA,GAAAA,GAAoBuD,CAAAA,CAAYtD,SAAAA,CAAAA,CAAhCD,OAAAA,EAASsF,CAAAA,GAAAA,GAAAA,CAAAA,MAAAA,EACTC,CAAAA,GAAAA,AAAAA,CAAAA,GAAAA,GAAgBhC,CAAAA,CAAYhC,QAAAA,CAAAA,CAA5BgE,IAAAA,EAAM/D,CAAAA,GAAAA,GAAAA,CAAAA,KAAAA,AAAAA;YAAAA,SAMLkJ,CAAAA,GAAAA;gBACFnH,CAAAA,CAAYiE,UAAAA,CAAWmD,MAAAA,EAAAA,IAC1BpH,CAAAA,CAAAA,CAAYqH,MAAAA,CAAO3P,MAAAA,EAAAA,EACnB4P,CAAAA,CAAKlR,EAAAA,CAAQ0F,KAAAA,CAAAA,EACbkE,CAAAA,CAAY1C,MAAAA,CAAO9F,MAAAA,EAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAiBd8P,CAAAA,CAAKxL,CAAAA,EAAAA;gBACZyL,CAAAA,CAAUC,CAAAA,CAAW1L,CAAAA,EAAAA,CAAO,CAAA,CAAA,CAAA;aAAA;YAAA,SAErByL,CAAAA,CAAUE,GAAAA,EAAUC,GAAAA,EAAAA;gBACtBtR,EAAAA,CAAQgC,EAAAA,CAAGwD,EAAAA,CAAAA,IACR+L,CAAAA,GAAAA,GAAcD,GAAAA,GAAcD,GAAAA,GAAAA,SAKxBA,CAAAA,EAAAA;oBAAAA,IAGJG,CAAAA,EACAC,CAAAA,AAHJzR;oBAAAA,EAAAA,CAAQgC,EAAAA,CAAGuD,EAAAA,CAAAA,IACPoD,CAAAA,CAAAA,GAAOgD,CAAAA,CAAO0F,CAAAA,GAAWK,CAAAA,EAAAA,CAAAA,EACzBF,CAAAA,GAAcG,CAAAA,CAAAA,CAAc,CAAA,EAAON,CAAAA,CAAAA,IAAa1I,CAAAA,GAAO,CAAA,EACvD8I,CAAAA,GAAcE,CAAAA,CAAAA,CAAc,CAAA,EAAMN,CAAAA,CAAAA,IAAoB,CAAA,GAAP1I,CAAAA,EAAAA,AACjD6I,CAAAA,CAAAA,IAAeC,CAAAA,CAAAA,IACjBJ,CAAAA,CAAAA,GAAWO,CAAAA,CAAMP,CAAAA,EAAUI,CAAAA,CAAAA,CAAAA,AAAAA,CAAAA,AAAAA;oBAAAA,OAGxBJ,CAAAA,CAAAA;iBAdwCQ,CAAKR,GAAAA,CAAAA,EAClDxY,CAAAA,CAAM+S,CAAAA,EAAM,WAAA,EAAA,WAAA,GAAyBvF,CAAAA,CAAQ,GAAA,CAAA,GAAA,GAAA,GAAQkL,GAAAA,GAAAA,KAAAA,CAAAA,EACrDF,GAAAA,KAAaE,GAAAA,IAAehR,CAAAA,CAAK1B,EAAAA,CAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAc5B+S,CAAAA,CAAMP,CAAAA,EAAUS,CAAAA,EAAAA;gBAAAA,IACjBC,CAAAA,GAASV,CAAAA,GAAWW,CAAAA,CAASF,CAAAA,CAAAA,EAC7BG,CAAAA,GAAOjC,CAAAA,EAAAA,AAAAA;gBAAAA,OACbqB,CAAAA,IAAY1F,CAAAA,CAAOsG,CAAAA,GAAQxW,CAAAA,EAAAA,CAAKC,EAAAA,CAAIqW,CAAAA,CAAAA,GAAUE,CAAAA,CAAAA,IAAS,CAAA,CAAA,AAAA,CAAA,GAAOH,CAAAA,CAAAA,GAAY,CAAA,GAAA,EAAK,CAAA,AAAA,CAAA;aAAA;YAAA,SAGxExQ,CAAAA,GAAAA;gBACP6P,CAAAA,CAAUO,CAAAA,EAAAA,CAAAA,EACVZ,CAAAA,CAAWxP,MAAAA,EAAAA;aAAAA;YAAAA,SAkBJ8P,CAAAA,CAAW1L,GAAAA,EAAOwM,CAAAA,EAAAA;gBAAAA,IACnBb,CAAAA,GAAW1F,CAAAA,CAAO6D,EAAAA,CAAU9J,GAAAA,GAAQ,CAAA,CAAA,GAa5BA,CAAAA,CAAAA,GAbwCA,GAAAA,EAerC,QAAA,KADTxM,CAAAA,GAAAA,GAAUsE,EAAAA,CAAVtE,KAAAA,CAAAA,AAAAA,GAAAA,AACqB4W,CAAAA,CAAAA,EAAAA,GAAaC,EAAAA,CAAUrK,CAAAA,EAAAA,CAAO,CAAA,CAAA,CAAA,GAAS,CAAA,GAAA,CAAKxM,GAAAA,GAAQ6W,EAAAA,CAAUrK,CAAAA,CAAAA,IAAU,CAAA,CAAA,AAAA,CAAA,AAAA;gBAAA,OAd9FwM,CAAAA,GAAAA,SAMKb,CAAAA,EAAAA;oBACR7T,EAAAA,CAAQ2U,SAAAA,IAAanS,EAAAA,CAAQgC,EAAAA,CAAGsD,EAAAA,CAAAA,IAClC+L,CAAAA,CAAAA,GAAW/U,EAAAA,CAAM+U,CAAAA,EAAU,CAAA,EAAG1F,CAAAA,CAAOqE,CAAAA,EAAAA,GAAeF,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,AAAAA,CAAAA;oBAAAA,OAE/CuB,CAAAA,CAAAA;iBAVWe,CAAKf,CAAAA,CAAAA,GAAYA,CAAAA,CAAAA;aAAAA;YAAAA,SAE5BK,CAAAA,GAAAA;gBAAAA,IACDhP,CAAAA,GAAO2D,CAAAA,CAAQ,MAAA,CAAA,AAAA;gBAAA,OACd7M,CAAAA,CAAKoS,CAAAA,CAAAA,CAAMlJ,CAAAA,CAAAA,GAAQlJ,CAAAA,CAAKqO,CAAAA,CAAAA,CAAOnF,CAAAA,CAAAA,GAAQiJ,CAAAA,CAAOsE,EAAAA,CAAAA,CAAW,CAAA,CAAA,CAAA,CAAA;aAAA;YAAA,SAYzD+B,CAAAA,CAASzW,CAAAA,EAAAA;gBAAAA,OACT6V,CAAAA,CAAW7V,CAAAA,GAAMqO,CAAAA,CAAYiE,UAAAA,CAAWwE,MAAAA,EAAAA,GAAW,CAAA,EAAA,CAAA,CAAK7U,EAAAA,CAAQ2U,SAAAA,CAAAA,CAAAA;aAAAA;YAAAA,SAMhER,CAAAA,CAAcpW,CAAAA,EAAK8V,CAAAA,EAAAA;gBAC1BA,CAAAA,GAAWpc,EAAAA,CAAYoc,CAAAA,CAAAA,GAAYK,CAAAA,EAAAA,GAAgBL,CAAAA,CAAAA;gBAAAA,IAC7CG,CAAAA,GAAAA,CAAsB,CAAA,KAARjW,CAAAA,IAAgBoQ,CAAAA,CAAO0F,CAAAA,CAAAA,GAAY1F,CAAAA,CAAOqG,CAAAA,CAAAA,CAAS,CAAA,CAAA,CAAA,EACjEP,CAAAA,GAAAA,CAAsB,CAAA,KAARlW,CAAAA,IAAiBoQ,CAAAA,CAAO0F,CAAAA,CAAAA,GAAY1F,CAAAA,CAAOqG,CAAAA,CAAAA,CAAS,CAAA,CAAA,CAAA,AAAA;gBAAA,OACjER,CAAAA,IAAeC,CAAAA,CAAAA;aAAAA;YAAAA,OAEjB;gBACLrJ,KAAAA,EAAAA,WAAAA;oBAvGA0I,CAAAA,GAAalH,CAAAA,CAAYkH,UAAAA,EACzB1Q,GAAAA,CAAG;wBAAC1B,EAAAA;wBAAea,EAAAA;wBAAeF,EAAAA;wBAAeD,EAAAA;qBAAAA,EAAgB2R,CAAAA,CAAAA;iBAAAA;gBAuGjEuB,IAAAA,EAAAA,SA9FYC,CAAAA,EAAM7M,CAAAA,EAAO0G,CAAAA,EAAM7O,CAAAA,EAAAA;oBAAAA,IAkFfuU,CAAAA,EACVU,CAAAA,EAlFAnB,CAAAA,GAAWK,CAAAA,EAAAA,AACba;oBAAAA,CAAAA,KAAS7M,CAAAA,IAgFGoM,CAAAA,CAAAA,GAhFsBpM,CAAAA,GAAP6M,CAAAA,EAiFzBC,CAAAA,GAAU7G,CAAAA,CAAOiG,CAAAA,CAAMF,CAAAA,EAAAA,EAAeI,CAAAA,CAAAA,CAAAA,EACrCA,CAAAA,GAAuB,CAAA,IAAXU,CAAAA,GAAeA,CAAAA,IAAW5G,CAAAA,CAAAA,QAAAA,GAAcvF,CAAAA,CAAQ,OAAA,CAAA,CAAA,GAAc7M,CAAAA,CAAKqO,CAAAA,CAAAA,CAAOxB,CAAAA,CAAQ,OAAA,CAAA,CAAA,CAAA,IAjFnG/E,CAAAA,CAAAA,EAAAA,EACA6P,CAAAA,CAAUS,CAAAA,CAAMP,CAAAA,EAAiB3L,CAAAA,GAAP6M,CAAAA,CAAAA,EAAAA,CAAe,CAAA,CAAA,CAAA,AAAA,EAE3C7Q,CAAAA,CAAI5O,CAAAA,CAAAA,EACJyN,CAAAA,CAAK5B,EAAAA,EAAY+G,CAAAA,EAAO0G,CAAAA,EAAMmG,CAAAA,CAAAA,EAC9BzB,CAAAA,CAAWnd,KAAAA,CAAM+R,CAAAA,EAAO,WAAA;wBACtBhE,CAAAA,C7EtCc,CAAA,CAAA,E6EuCdnB,CAAAA,CAAK3B,EAAAA,EAAa8G,CAAAA,EAAO0G,CAAAA,EAAMmG,CAAAA,CAAAA,EAC/BhV,CAAAA,IAAYA,CAAAA,EAAAA;qBAAAA,CAAAA;iBAAAA;gBAoFd2T,IAAAA,EAAAA,CAAAA;gBACAC,SAAAA,EAAAA,CAAAA;gBACAS,KAAAA,EAAAA,CAAAA;gBACAtQ,MAAAA,EAAAA,CAAAA;gBACAwM,OAAAA,EAAAA,SAtDeuD,CAAAA,EAAAA;oBAAAA,IAAAA,IACTnK,CAAAA,GAAS0C,CAAAA,CAAY1C,MAAAA,CAAOqG,GAAAA,EAAAA,EAC9B7H,CAAAA,GAAQ,CAAA,EACR+M,CAAAA,GAAcC,CAAAA,GAAAA,CAAAA,EACT9a,CAAAA,GAAI,CAAA,EAAGA,CAAAA,GAAIsP,CAAAA,CAAO1T,MAAAA,EAAQoE,CAAAA,EAAAA,CAAK;wBAAA,IAChC+N,CAAAA,GAAauB,CAAAA,CAAOtP,CAAAA,CAAAA,CAAG8N,KAAAA,EACvBgD,CAAAA,GAAWhN,EAAAA,CAAI0V,CAAAA,CAAWzL,CAAAA,EAAAA,CAAY,CAAA,CAAA,GAAQ0L,CAAAA,CAAAA,AAAAA;wBAAAA,IAAAA,CAChD3I,CAAAA,CAAAA,IAAY+J,CAAAA,CAAAA,AAAAA,EAAAA,MACdA;wBAAAA,CAAAA,GAAc/J,CAAAA,EACdhD,CAAAA,GAAQC,CAAAA;qBAAAA;oBAAAA,OAKLD,CAAAA,CAAAA;iBAAAA;gBAyCP0L,UAAAA,EAAAA,CAAAA;gBACAM,WAAAA,EAAAA,CAAAA;gBACAM,QAAAA,EAAAA,CAAAA;gBACAL,aAAAA,EAAAA,CAAAA;gBACAZ,UAAAA,EAAAA,CAAAA;aAAAA,CAAAA;SAAAA;QAAAA,UAAAA,EAAAA,SClIuB/Q,CAAAA,EAAS4J,EAAAA,EAAapM,CAAAA,EAAAA;YAAAA,IAW3CmV,CAAAA,EACAC,EAAAA,EACA5E,CAAAA,EAZI5N,GAAAA,GAAOL,EAAAA,CAAeC,CAAAA,CAAAA,CAAtBI,EAAAA,EACAyS,CAAAA,GAASjJ,EAAAA,CAATiJ,IAAAA,EACAnB,CAAAA,GAAsCmB,CAAAA,CAAtCnB,WAAAA,EAAaM,CAAAA,GAAyBa,CAAAA,CAAzBb,QAAAA,EAAUZ,CAAAA,GAAeyB,CAAAA,CAAfzB,UAAAA,EAAAA,GAAAA,GACCxH,EAAAA,CAAY1C,MAAAA,EAApCoH,CAAAA,GAAAA,GAAAA,CAAAA,QAAAA,EAAUD,GAAAA,GAAAA,GAAAA,CAAAA,SAAAA,EACZyE,CAAAA,GAAS9S,CAAAA,CAAQgC,EAAAA,CAAGuD,EAAAA,CAAAA,EACpBwN,CAAAA,GAAU/S,CAAAA,CAAQgC,EAAAA,CAAGsD,EAAAA,CAAAA,EACrB0N,CAAAA,GAAUhf,EAAAA,CAAMif,CAAAA,EAAAA,CAAa,CAAA,CAAA,EAC7BC,CAAAA,GAAUlf,EAAAA,CAAMif,CAAAA,EAAAA,CAAa,CAAA,CAAA,EAC/BE,CAAAA,GAAY3V,CAAAA,CAAQ7J,KAAAA,IAAS,CAAA,EAC7Byf,CAAAA,GAAYD,CAAAA,AAAAA;YAAAA,SAQPtG,CAAAA,GAAAA;gBACP8F,CAAAA,GAAatE,GAAAA,CAAAA,CAAU,CAAA,CAAA,EACvBuE,EAAAA,GAAUpV,CAAAA,CAAQoV,OAAAA,EAClB5E,CAAAA,GAAUxQ,CAAAA,CAAQwQ,OAAAA,CAAAA;gBAAAA,IACZtI,CAAAA,GAAQpJ,EAAAA,CAAM6W,CAAAA,EAAW,CAAA,EAAGR,CAAAA,GAAa,CAAA,CAAA,AAC3CjN;gBAAAA,CAAAA,KAAUyN,CAAAA,IACZA,CAAAA,CAAAA,GAAYzN,CAAAA,EACZmN,CAAAA,CAAK9B,UAAAA,EAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAmCAkC,CAAAA,CAAY7G,CAAAA,EAAMmF,CAAAA,EAAAA;gBAAAA,IACnBvV,CAAAA,GAAS4W,EAAAA,IAAY7E,CAAAA,CAAAA,EAAAA,GAAa,CAAA,GAAIC,CAAAA,CAAAA,AAAAA,EACtCuE,CAAAA,GAAOc,CAAAA,CAAiBF,CAAAA,GAAYnX,CAAAA,GAAUoQ,CAAAA,CAAAA,GAAAA,EAAQ,GAAI,CAAA,CAAA,AAAA,EAAI+G,CAAAA,EAAAA,CAAaP,CAAAA,EAAAA,IAAW7E,CAAAA,EAAAA,CAAAA,AAAAA,CAAAA,AAAAA;gBAAAA,OAAAA,EAC9E,KAAVwE,CAAAA,IAAeQ,CAAAA,IAAAA,CACZpX,EAAAA,CAAmB+V,CAAAA,EAAAA,EAAeM,CAAAA,CAAAA,CAAU5F,CAAAA,CAAAA,EAAO,CAAA,CAAA,GAC/CA,CAAAA,GAAO,CAAA,GAAIiG,CAAAA,EAAAA,GAGfd,CAAAA,GAAcgB,CAAAA,GAAOV,CAAAA,CAAKU,CAAAA,CAAAA,CAAAA;aAAAA;YAAAA,SAE1Bc,CAAAA,CAAiBd,GAAAA,EAAM9J,GAAAA,EAAM6K,CAAAA,EAAAA;gBAAAA,IAE5B1f,CAAAA,EACA8R,CAAAA,AAAAA;gBAAAA,OAFJ4I,CAAAA,EAAAA,GACI1a,CAAAA,CAAAA,GAAMye,CAAAA,EAAAA,EAAAA,AACN3M,CAAAA,CAAAA,GAAAA,SA4BuB6M,CAAAA,EAAAA;oBAAAA,IAC3BQ,CAAAA,IAAiC,MAAA,KAAtBvV,CAAAA,CAAQ2U,SAAAA,IAAwBI,CAAAA,KAASY,CAAAA,EAAAA,IAAAA,IAChD9B,CAAAA,GAAWK,CAAAA,EAAAA,EACVL,CAAAA,KAAaD,CAAAA,CAAWmB,CAAAA,EAAAA,CAAM,CAAA,CAAA,IAASxW,EAAAA,CAAQwW,CAAAA,EAAM,CAAA,EAAGvS,CAAAA,CAAQxM,MAAAA,GAAS,CAAA,EAAA,CAAIgK,CAAAA,CAAQiE,MAAAA,CAAAA,EAC1F8Q,CAAAA,GAAOY,CAAAA,GAAAA,EAAcZ,CAAAA,GAAAA,EAASA,CAAAA,CAAAA;oBAAAA,OAG3BA,CAAAA,CAAAA;iBAnCSgB,CAAwBhB,GAAAA,CAAAA,CAAAA,KACxBA,GAAAA,IACZ9J,CAAAA,GAAAA,GAAO8J,GAAAA,EACPA,GAAAA,GAAO7M,CAAAA,EACP4N,CAAAA,GAAAA,CAAW,CAAA,CAAA,AAAA,EAETf,GAAAA,GAAO,CAAA,IAAY3e,CAAAA,GAAP2e,GAAAA,GAEZA,GAAAA,GADExW,EAAAA,CAAQ,CAAA,EAAGwW,GAAAA,EAAM9J,GAAAA,EAAAA,CAAM,CAAA,CAAA,IAAS1M,EAAAA,CAAQnI,CAAAA,EAAK6U,GAAAA,EAAM8J,GAAAA,EAAAA,CAAM,CAAA,CAAA,GACpDzE,CAAAA,CAAQ0F,CAAAA,CAAOjB,GAAAA,CAAAA,CAAAA,GAElBO,CAAAA,GACKQ,CAAAA,GAAWf,GAAAA,GAAO,CAAA,GAAA,CAAMI,CAAAA,CAAAA,GAAa3E,CAAAA,IAAWA,CAAAA,CAAAA,AAAAA,GAAW2E,CAAAA,GAAaJ,GAAAA,GACtE/U,CAAAA,CAAQiE,MAAAA,GACV8Q,GAAAA,GAAO,CAAA,GAAI3e,CAAAA,GAAM,CAAA,GAAA,EAEhB,GAIR0f,CAAAA,IAAYf,GAAAA,KAAS9J,GAAAA,IACvB8J,CAAAA,GAAAA,GAAOzE,CAAAA,CAAQ0F,CAAAA,CAAO/K,GAAAA,CAAAA,GAAS8J,CAAAA,GAAAA,GAAO9J,GAAAA,GAAAA,EAAQ,GAAI,CAAA,CAAA,AAAA,CAAA,CAAA,AAAA,CAAA,GAItD8J,GAAAA,GAAAA,EAAQ,EAEHA,GAAAA,CAAAA;aAAAA;YAAAA,SAWAV,CAAAA,CAAKnM,CAAAA,EAAAA;gBAAAA,OACLoN,CAAAA,GAAAA,AAAUpN,CAAAA,CAAAA,GAAQiN,CAAAA,CAAAA,GAAcA,CAAAA,IAAc,CAAA,GAAIjN,CAAAA,CAAAA;aAAAA;YAAAA,SAElD2M,CAAAA,GAAAA;gBAAAA,OACA9W,EAAAA,CAAIoX,CAAAA,GAAc5E,CAAAA,CAAAA,EAAAA,IAAc+E,CAAAA,IAAUF,EAAAA,GAAU,CAAA,GAAI5E,CAAAA,CAAAA,AAAAA,EAAU,CAAA,CAAA,CAAA;aAAA;YAAA,SAElEF,CAAAA,CAAQF,CAAAA,EAAAA;gBAAAA,OACRtR,EAAAA,CAAMyR,CAAAA,EAAAA,GAAaH,CAAAA,GAAOI,CAAAA,GAAUJ,CAAAA,EAAM,CAAA,EAAGyE,CAAAA,EAAAA,CAAAA,CAAAA;aAAAA;YAAAA,SAE7CmB,CAAAA,CAAO9N,CAAAA,EAAAA;gBAAAA,OACPqI,CAAAA,EAAAA,GAAarI,CAAAA,GAAQlK,EAAAA,CAAAA,AAAOkK,CAAAA,CAAAA,IAAS2M,CAAAA,EAAAA,GAAWM,CAAAA,GAAa,CAAA,GAAIjN,CAAAA,CAAAA,GAASsI,CAAAA,CAAAA,CAAAA;aAAAA;YAAAA,SAM1EyF,CAAAA,CAAS/N,CAAAA,EAAAA;gBACZA,CAAAA,KAAUyN,CAAAA,IACZC,CAAAA,CAAAA,GAAYD,CAAAA,EACZA,CAAAA,GAAYzN,CAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAMPqI,CAAAA,GAAAA;gBAAAA,OAAAA,CACC9Y,EAAAA,CAAYuI,CAAAA,CAAQtE,KAAAA,CAAAA,IAAUsE,CAAAA,CAAQwI,YAAAA,CAAAA;aAAAA;YAAAA,SAEvCgL,CAAAA,GAAAA;gBAAAA,OACAhR,CAAAA,CAAQ+B,KAAAA,CAAMC,EAAAA,CAAG;oBAAClP,CAAAA;oBAAQC,CAAAA;iBAAAA,CAAAA,IAAAA,CAAAA,CAAiByK,CAAAA,CAAQkW,iBAAAA,CAAAA;aAAAA;YAAAA,OAErD;gBACLtL,KAAAA,EAAAA,WAAAA;oBA/HAyE,CAAAA,EAAAA,EACAzM,GAAAA,CAAG;wBAACf,EAAAA;wBAAeD,EAAAA;qBAAAA,EAAgByN,CAAAA,CAAAA;iBAAAA;gBA+HnC8G,EAAAA,EAAAA,SAnHUC,GAAAA,EAASC,GAAAA,EAAgBtW,GAAAA,EAAAA;oBAAAA,IAE3BgV,EAAAA,AADHvB;oBAAAA,CAAAA,EAAAA,IAAAA,EAGU,GADPtL,CAAAA,GAAAA,GAAQmM,CAAAA,CADRU,EAAAA,GAAAA,SAcKqB,CAAAA,EAAAA;wBAAAA,IACTlO,CAAAA,GAAQyN,CAAAA,AAAAA;wBAAAA,IAEDW,CAAAA,EAAW9X,CAAAA,AADlBhH;wBAAAA,EAAAA,CAAS4e,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GACmBA,CAAAA,CAAQtI,KAAAA,mBAAM,IAAsB,EAAA,EAAzDwI,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAW9X,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EACF,GAAA,KAAd8X,CAAAA,IAAmC,GAAA,KAAdA,CAAAA,GACvBpO,CAAAA,GAAQ2N,CAAAA,CAAiBF,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,GAAgBW,CAAAA,GAAAA,CAAAA,CAAa9X,CAAAA,IAAU,CAAA,CAAA,AAAA,CAAA,AAAA,EAAKmX,CAAAA,CAAAA,GAC9C,GAAA,KAAdW,CAAAA,GACTpO,CAAAA,GAAQ1J,CAAAA,GAAS8R,CAAAA,CAAAA,CAAS9R,CAAAA,CAAAA,GAAUgX,CAAAA,CAAAA,CAAQ,CAAA,CAAA,GACrB,GAAA,KAAdc,CAAAA,IACTpO,CAAAA,CAAAA,GAAQwN,CAAAA,CAAAA,CAAQ,CAAA,CAAA,CAAA,AAAA,CAAA,GAGlBxN,CAAAA,GAAQoN,CAAAA,GAASc,CAAAA,GAAUtX,EAAAA,CAAMsX,CAAAA,EAAS,CAAA,EAAGvB,CAAAA,EAAAA,CAAAA;wBAAAA,OAExC3M,CAAAA,CAAAA;qBA5BQqO,CAAMH,GAAAA,CAAAA,CAAAA,CAAAA,IAEAC,CAAAA,GAAAA,IAAkBnO,GAAAA,KAAUyN,CAAAA,CAAAA,IAC7CM,CAAAA,CAAAA,CAAS/N,GAAAA,CAAAA,EACTmN,CAAAA,CAAKP,IAAAA,CAAKC,EAAAA,EAAM7M,GAAAA,EAAO0N,CAAAA,EAAW7V,GAAAA,CAAAA,CAAAA,AAAAA;iBAAAA;gBA8GtCyW,MAAAA,EAAAA,SA1GczC,CAAAA,EAAa3B,CAAAA,EAAUqE,CAAAA,EAAM1W,CAAAA,EAAAA;oBAC3CqM,EAAAA,CAAYqH,MAAAA,CAAO+C,MAAAA,CAAOzC,CAAAA,EAAa3B,CAAAA,EAAUqE,CAAAA,EAAM,WAAA;wBACrDR,CAAAA,CAAS5B,CAAAA,CAAKgB,CAAAA,CAAK/E,OAAAA,CAAQ+E,CAAAA,CAAKnB,WAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAChCnU,CAAAA,IAAYA,CAAAA,EAAAA;qBAAAA,CAAAA;iBAAAA;gBAwGdyV,OAAAA,EAAAA,CAAAA;gBACAE,OAAAA,EAAAA,CAAAA;gBACAD,WAAAA,EAAAA,CAAAA;gBACAZ,MAAAA,EAAAA,CAAAA;gBACAoB,QAAAA,EAAAA,CAAAA;gBACAS,QAAAA,EAAAA,SAlBgB9H,CAAAA,EAAAA;oBAAAA,OACTA,CAAAA,GAAOgH,CAAAA,GAAYD,CAAAA,CAAAA;iBAAAA;gBAkB1BrF,OAAAA,EAAAA,CAAAA;gBACA0F,MAAAA,EAAAA,CAAAA;gBACAW,MAAAA,EAAAA,SA/Bc5C,CAAAA,EAAAA;oBAAAA,OACRtE,CAAAA,GAAU4F,CAAAA,CAAK/E,OAAAA,CAAQyD,CAAAA,CAAAA,EACtBwB,CAAAA,GAAUzW,EAAAA,CAAM2Q,CAAAA,EAAS,CAAA,EAAGoF,CAAAA,EAAAA,CAAAA,GAAYpF,CAAAA,CAAAA;iBAAAA;gBA8B/Cc,QAAAA,EAAAA,CAAAA;gBACAiD,MAAAA,EAAAA,CAAAA;aAAAA,CAAAA;SAAAA;QAAAA,MAAAA,EAAAA,SCtImBhR,CAAAA,EAAS4J,GAAAA,EAAapM,GAAAA,EAAAA;YAAAA,IASvC4W,GAAAA,EACAC,EAAAA,EATE5W,CAAAA,GAAQsC,EAAAA,CAAeC,CAAAA,CAAAA,EACrBI,CAAAA,GAAmB3C,CAAAA,CAAnB2C,EAAAA,EAAIlM,CAAAA,GAAeuJ,CAAAA,CAAfvJ,IAAAA,EAAMqM,CAAAA,GAAS9C,CAAAA,CAAT8C,IAAAA,EACVxK,CAAAA,GAAkByH,GAAAA,CAAlBzH,OAAAA,EAASmQ,CAAAA,GAAS1I,GAAAA,CAAT0I,IAAAA,EACT0B,CAAAA,GAAyBgC,GAAAA,CAAzBhC,QAAAA,EAAUiG,CAAAA,GAAejE,GAAAA,CAAfiE,UAAAA,EACFyG,CAAAA,GAAsB1M,CAAAA,CAA9BuE,MAAAA,EAAoBtE,CAAAA,GAAUD,CAAAA,CAAVC,KAAAA,EACxB0M,CAAAA,GAAUD,CAAAA,EACVlI,CAAAA,GAAOxE,CAAAA,CAASwE,IAAAA,EAChBC,CAAAA,GAAOzE,CAAAA,CAASyE,IAAAA,EAGdF,CAAAA,GAAS,EAAA,AAAA;YAAA,SACN/D,CAAAA,GAAAA;gBAAAA,CAAAA,WAAAA;oBAAAA,IASDoM,CAAAA,GAAUhX,GAAAA,CAAQ2O,MAAAA,AAAAA;oBAAAA,CACpBqI,CAAAA,IAAapI,CAAAA,IAAQC,CAAAA,IAkCzBkI,CAAAA,CAAAA,GAAUD,CAAAA,IAAc7b,CAAAA,CAAO,KAAA,EAAO1C,CAAAA,CAAQoW,MAAAA,CAAAA,EAC9CC,CAAAA,GAAOqI,CAAAA,CAAAA,CAAY,CAAA,CAAA,EACnBpI,CAAAA,GAAOoI,CAAAA,CAAAA,CAAY,CAAA,CAAA,EACnBL,GAAAA,GAAAA,CAAU,CAAA,EACV/d,EAAAA,CAAOke,CAAAA,EAAS;wBAACnI,CAAAA;wBAAMC,CAAAA;qBAAAA,CAAAA,EACtBiI,CAAAA,IAAc7d,EAAAA,CAAO8d,CAAAA,EAAS1M,CAAAA,CAAAA,CAAAA,AAAAA,CApC3BuE;oBAAAA,CAAAA,IAAQC,CAAAA,IACVvU,CAAAA,EAAAA,CAAOqU,CAAAA,EAAQ;wBAAEC,IAAAA,EAAAA,CAAAA;wBAAMC,IAAAA,EAAAA,CAAAA;qBAAAA,CAAAA,EACvBrT,CAAAA,CAAQub,CAAAA,EAASC,CAAAA,GAAU,EAAA,GAAK,MAAA,CAAA,EAChCre,EAAAA,CAASoe,CAAAA,EAASF,EAAAA,GAAoBlQ,EAAAA,GAAAA,IAAAA,GAAiB3G,GAAAA,CAAQ6M,SAAAA,CAAAA,EAC3DmK,CAAAA,IAmBNpU,CAAAA,CAAAA,CAAG;wBAACxB,EAAAA;wBAAaQ,EAAAA;wBAAeK,EAAAA;qBAAAA,EAAiB2B,CAAAA,CAAAA,EACjDlN,CAAAA,CAAKmY,CAAAA,EAAM,OAAA,EAASrY,EAAAA,CAAM2f,CAAAA,EAAI,GAAA,CAAA,CAAA,EAC9Bzf,CAAAA,CAAKkY,CAAAA,EAAM,OAAA,EAASpY,EAAAA,CAAM2f,CAAAA,EAAI,GAAA,CAAA,CAAA,EAnB1BvS,CAAAA,EAAAA,EACA9I,EAAAA,CAAa;wBAAC8T,CAAAA;wBAAMC,CAAAA;qBAAAA,EAAOnJ,EAAAA,EAAe2E,CAAAA,CAAM/G,EAAAA,CAAAA,EAChDP,CAAAA,C3BtC4B,gBAAA,E2BsCD6L,CAAAA,EAAMC,CAAAA,CAAAA,CAAAA,AAAAA,CAAAA,AAAAA;iBApBrCQ,EAAAA,EACAzM,CAAAA,CAAGf,EAAAA,EAAeqV,CAAAA,CAAAA;aAAAA;YAAAA,SAEXA,CAAAA,GAAAA;gBACPlW,CAAAA,EAAAA,EACA4J,CAAAA,EAAAA;aAAAA;YAAAA,SAmBO5J,CAAAA,GAAAA;gBACPf,CAAAA,CAAMe,OAAAA,EAAAA,EACN7D,EAAAA,CAAY4Z,CAAAA,EAASF,EAAAA,CAAAA,EACjBD,GAAAA,GACFza,CAAAA,CAAAA,CAAO2a,CAAAA,GAAa;oBAAClI,CAAAA;oBAAMC,CAAAA;iBAAAA,GAAQkI,CAAAA,CAAAA,EACnCnI,CAAAA,GAAOC,CAAAA,GAAO,IAAA,CAAA,GAEdnU,EAAAA,CAAgB;oBAACkU,CAAAA;oBAAMC,CAAAA;iBAAAA,EAAOzI,EAAAA,CAAAA;aAAAA;YAAAA,SAQzB+P,CAAAA,CAAGC,CAAAA,EAAAA;gBACV/F,CAAAA,CAAW8F,EAAAA,CAAGC,CAAAA,EAAAA,CAAS,CAAA,CAAA;aAAA;YAAA,SAUhBa,CAAAA,CAAYE,CAAAA,EAAAA;gBAAAA,OAEZ9a,CAAAA,CAAAA,iBAAAA,GADyB9D,CAAAA,CAAQ6e,KAAAA,GAAAA,GAAAA,GAASD,CAAAA,CAAAA,GAAQ5e,CAAAA,CAAQqW,IAAAA,GAAOrW,CAAAA,CAAQsW,IAAAA,CAAAA,GAAAA,gIAAAA,GAAgJ7O,CAAAA,GAAAA,CAAQqX,SAAAA,ICzFxN,uFAAA,CAAA,GAAA,MAAA,CAAA,CAAA;aAAA;YAAA,SD4FTzT,CAAAA,GAAAA;gBAAAA,IACDsE,CAAAA,GAAQ1F,CAAAA,CAAQ0F,KAAAA,EAChB0N,CAAAA,GAAYvF,CAAAA,CAAWqF,OAAAA,EAAAA,EACvB4B,CAAAA,GAAYjH,CAAAA,CAAWmF,OAAAA,EAAAA,EACvB+B,CAAAA,GAAAA,EAAyB,GAAb3B,CAAAA,IAAkB1N,CAAAA,GAAQ0N,CAAAA,GAAYlN,CAAAA,CAAK8O,IAAAA,GAAO9O,CAAAA,CAAKkG,IAAAA,EACnE6I,CAAAA,GAAAA,EAAyB,GAAbH,CAAAA,IAA0BA,CAAAA,GAARpP,CAAAA,GAAoBQ,CAAAA,CAAKgP,KAAAA,GAAQhP,CAAAA,CAAKmG,IAAAA,AAC1ED;gBAAAA,CAAAA,CAAK+I,QAAAA,GAAW/B,CAAAA,GAAY,CAAA,EAC5B/G,CAAAA,CAAK8I,QAAAA,GAAWL,CAAAA,GAAY,CAAA,EAC5Bxc,EAAAA,CAAa8T,CAAAA,EAAM/I,EAAAA,EAAY0R,CAAAA,CAAAA,EAC/Bzc,EAAAA,CAAa+T,CAAAA,EAAMhJ,EAAAA,EAAY4R,CAAAA,CAAAA,EAC/B1U,CAAAA,C3BjFgC,gBAAA,E2BiFL6L,CAAAA,EAAMC,CAAAA,EAAM+G,CAAAA,EAAW0B,CAAAA,CAAAA;aAAAA;YAAAA,OAE7C;gBACL3I,MAAAA,EAAAA,CAAAA;gBACA/D,KAAAA,EAAAA,CAAAA;gBACA5J,OAAAA,EAAAA,CAAAA;aAAAA,CAAAA;SAAAA;QAAAA,QAAAA,EAAAA,SE/FqBwB,GAAAA,EAAS4J,GAAAA,EAAapM,CAAAA,EAAAA;YAAAA,IAMzC4X,CAAAA,EACAC,CAAAA,EAAAA,CAAAA,GANuBtV,EAAAA,CAAeC,GAAAA,CAAAA,EAAlCI,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EAAIlM,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAMqM,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EACZE,CAAAA,GAAWD,EAAAA,CAAgBhD,CAAAA,CAAQiD,QAAAA,EAAUT,GAAAA,CAAQ2T,EAAAA,CAAGzf,IAAAA,CAAK8L,GAAAA,EAAS,GAAA,CAAA,EAAA,SA+DlDiB,CAAAA,EAAAA;gBAAAA,IAChBqL,CAAAA,GAAQ1E,CAAAA,CAAR0E,GAAAA,AACRA;gBAAAA,CAAAA,IAAOzT,CAAAA,CAAMyT,CAAAA,EAAK,OAAA,EAAmB,GAAA,GAAPrL,CAAAA,GAAAA,GAAAA,CAAAA,EAC9BV,CAAAA,C7BtDkC,kBAAA,E6BsDLU,CAAAA,CAAAA;aAAAA,CAAAA,EAjEvBW,CAAAA,GAAanB,CAAAA,CAAbmB,QAAAA,EACAgG,CAAAA,GAAyCgC,GAAAA,CAAzChC,QAAAA,EAAsB7B,CAAAA,GAAAA,AAAAA,CAAAA,GAAAA,GAAmB6D,GAAAA,CAA/BhC,QAAAA,CAAAA,CAAY7B,IAAAA,EAAMwG,CAAAA,GAAAA,GAAAA,CAAAA,MAAAA,EAC5B+I,CAAAA,GAAa9X,CAAAA,CAAb8X,QAAAA,EAGJC,CAAAA,GAAuB,OAAA,KAAbD,CAAAA,AAAAA;YAAAA,SA8BLE,CAAAA,GAAAA;gBACH5T,CAAAA,EAAAA,IAAcgI,GAAAA,CAAY1C,MAAAA,CAAOoH,QAAAA,EAAAA,IACnC7N,CAAAA,CAAAA,CAAS9M,KAAAA,CAAAA,CAAO6J,CAAAA,CAAQiY,aAAAA,CAAAA,EACxBJ,CAAAA,GAAUD,CAAAA,GAAUG,CAAAA,GAAAA,CAAU,CAAA,EAC9BnU,CAAAA,EAAAA,EACAb,CAAAA,CAAKX,EAAAA,CAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAGAyB,CAAAA,CAAMqU,CAAAA,EAAAA;gBACbH,CAAAA,GAAAA,CAAAA,CADaG,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAO,CAAA,GACRA,CAAAA,CAAAA,AAAAA,EACZtU,CAAAA,EAAAA,EACKQ,CAAAA,EAAAA,IACHnB,CAAAA,CAAAA,CAASY,KAAAA,EAAAA,EACTd,CAAAA,CAAKV,EAAAA,CAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAGA8V,CAAAA,GAAAA;gBACFJ,CAAAA,IACHH,CAAAA,CAAAA,IAAWC,CAAAA,GAAUhU,CAAAA,CAAAA,CAAM,CAAA,CAAA,GAASmU,CAAAA,EAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAG/BpU,CAAAA,GAAAA;gBACHmL,CAAAA,IACF1W,CAAAA,EAAAA,CAAY0W,CAAAA,EAAQ3H,EAAAA,EAAAA,CAAe2Q,CAAAA,CAAAA,EACnCjd,EAAAA,CAAaiU,CAAAA,EAAQlJ,EAAAA,EAAY7F,CAAAA,CAAQ0I,IAAAA,CAAKqP,CAAAA,GAAU,MAAA,GAAS,OAAA,CAAA,CAAA,CAAA,AAAA;aAAA;YAAA,SAQ5DlO,CAAAA,CAAO3B,CAAAA,EAAAA;gBACRD,CAAAA,GAAQmE,GAAAA,CAAY1C,MAAAA,CAAOC,KAAAA,CAAMzB,CAAAA,CAAAA,CACvCjF;gBAAAA,CAAAA,CAASiB,GAAAA,CAAI+D,CAAAA,IAAAA,CAAUrM,CAAAA,CAAaqM,CAAAA,CAAMG,KAAAA,EAAOgD,EAAAA,CAAAA,IAA4BpL,CAAAA,CAAQiD,QAAAA,CAAAA;aAAAA;YAAAA,OAEhF;gBACL2H,KAAAA,EAAAA,WAAAA;oBAjEIkN,CAAAA,IAAAA,CAAAA,WAAAA;wBAQA9X,CAAAA,CAAQoY,YAAAA,IACV1hB,CAAAA,CAAK6R,CAAAA,EAAM,uBAAA,EAAyB,SAAC5L,CAAAA,EAAAA;4BACnCib,CAAAA,GAAqB,YAAA,KAAXjb,CAAAA,CAAEzF,IAAAA,EACZihB,CAAAA,EAAAA;yBAAAA,CAAAA,CAGAnY;wBAAAA,CAAAA,CAAQqY,YAAAA,IACV3hB,CAAAA,CAAK6R,CAAAA,EAAM,kBAAA,EAAoB,SAAC5L,CAAAA,EAAAA;4BAC9Bkb,CAAAA,GAAqB,SAAA,KAAXlb,CAAAA,CAAEzF,IAAAA,EACZihB,CAAAA,EAAAA;yBAAAA,CAAAA,CAGApJ;wBAAAA,CAAAA,IACFrY,CAAAA,CAAKqY,CAAAA,EAAQ,OAAA,EAAS,WAAA;4BACpBgJ,CAAAA,GAAUC,CAAAA,EAAAA,GAASnU,CAAAA,CAAAA,CAAM,CAAA,CAAA;yBAAA,CAAA,CAG7BjB;wBAAAA,CAAAA,CAAG;4BAACzB,EAAAA;4BAAYa,EAAAA;4BAAcJ,EAAAA;yBAAAA,EAAgBqB,CAAAA,CAASgB,MAAAA,CAAAA,EACvDrB,CAAAA,CAAGzB,EAAAA,EAAY0I,CAAAA,CAAAA;qBAzBbyO,EAAAA,EACAvJ,CAAAA,IAAUjU,EAAAA,CAAaiU,CAAAA,EAAQrJ,EAAAA,EAAe0E,CAAAA,CAASC,KAAAA,CAAM/G,EAAAA,CAAAA,EAC7DyU,CAAAA,IAAWC,CAAAA,EAAAA,EACXpU,CAAAA,EAAAA,CAAAA,AAAAA;iBAAAA;gBA8DF5C,OAAAA,EAASiC,CAAAA,CAASa,MAAAA;gBAClBkU,IAAAA,EAAAA,CAAAA;gBACAnU,KAAAA,EAAAA,CAAAA;gBACAO,QAAAA,EAAAA,CAAAA;aAAAA,CAAAA;SAAAA;QAAAA,KAAAA,EAAAA,SCzFkB5B,GAAAA,EAAS4J,GAAAA,EAAapM,GAAAA,EAAAA;YAAAA,IAClC4C,CAAAA,GAAOL,EAAAA,CAAeC,GAAAA,CAAAA,CAAtBI,EAAAA,AAAAA;YAAAA,SAOC2V,CAAAA,CAAMC,CAAAA,EAAAA;gBACbpM,GAAAA,CAAY1C,MAAAA,CAAO5R,OAAAA,CAAQ,SAACmQ,CAAAA,EAAAA;oBAAAA,IACpB0I,CAAAA,GAAMhX,EAAAA,CAAMsO,CAAAA,CAAMiB,SAAAA,IAAajB,CAAAA,CAAMG,KAAAA,EAAO,KAAA,CAAA,AAC9CuI;oBAAAA,CAAAA,IAAOA,CAAAA,CAAI8H,GAAAA,IACb1J,CAAAA,CAAOyJ,CAAAA,EAAQ7H,CAAAA,EAAK1I,CAAAA,CAAAA;iBAAAA,CAAAA;aAAAA;YAAAA,SAIjB8G,CAAAA,CAAOyJ,CAAAA,EAAQ7H,CAAAA,EAAK1I,CAAAA,EAAAA;gBAC3BA,CAAAA,CAAM5M,KAAAA,CAAM,YAAA,EAAcmd,CAAAA,GAAAA,8BAAAA,GAAwC7H,CAAAA,CAAI8H,GAAAA,GAAAA,IAAAA,GAAU,EAAA,EAAA,CAAI,CAAA,CAAA,EACpFjd,CAAAA,CAAQmV,CAAAA,EAAK6H,CAAAA,GAAS,MAAA,GAAS,EAAA,CAAA;aAAA;YAAA,OAE1B;gBACL5N,KAAAA,EAAAA,WAAAA;oBAlBI5K,GAAAA,CAAQuY,KAAAA,IACV3V,CAAAA,CAAAA,CAAGN,EAAAA,EAAuB9L,EAAAA,CAAMuY,CAAAA,EAAAA,CAAQ,CAAA,CAAA,CAAA,EACxCnM,CAAAA,CAAG;wBAAC1B,EAAAA;wBAAeW,EAAAA;wBAAeD,EAAAA;qBAAAA,EAAgBpL,EAAAA,CAAM+hB,CAAAA,EAAAA,CAAO,CAAA,CAAA,CAAA,CAAA,AAAA;iBAAA;gBAiBjEvX,OAAAA,EAASxK,EAAAA,CAAM+hB,CAAAA,EAAAA,CAAO,CAAA,CAAA;aAAA,CAAA;SAAA;QAAA,MAAA,EAAA,SCnBH/V,EAAAA,EAAS4J,CAAAA,EAAapM,EAAAA,EAAAA;YAAAA,IAKvCiD,CAAAA,EACAlD,CAAAA,EAAAA,GAAAA,GALiBwC,EAAAA,CAAeC,EAAAA,CAAAA,EAA5BI,GAAAA,GAAAA,GAAAA,CAAAA,EAAAA,EAAIG,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,EACKmB,CAAAA,GAAU1B,EAAAA,CAAnB+B,KAAAA,CAASL,GAAAA,EACTmR,CAAAA,GAASjJ,CAAAA,CAATiJ,IAAAA,EACAnB,CAAAA,GAAoDmB,CAAAA,CAApDnB,WAAAA,EAAaM,CAAAA,GAAuCa,CAAAA,CAAvCb,QAAAA,EAAUL,CAAAA,GAA6BkB,CAAAA,CAA7BlB,aAAAA,EAAeR,CAAAA,GAAc0B,CAAAA,CAAd1B,SAAAA,EAG1C+E,CAAAA,GAAW,CAAA,AAAA;YAAA,SAKNlC,CAAAA,CAAOzC,CAAAA,EAAa3B,CAAAA,EAAUqE,CAAAA,EAAMkC,CAAAA,EAAYC,CAAAA,EAAAA;gBAAAA,IACjD3N,CAAAA,GAAOiJ,CAAAA,EAAAA,AACb2E;gBAAAA,CAAAA,EAAAA,EACIpC,CAAAA,IACIhC,CAAAA,CAAAA,GAAOrI,CAAAA,CAAYiH,MAAAA,CAAOb,UAAAA,EAAAA,EAC1BzE,CAAAA,GAAShP,EAAAA,CAAKgV,CAAAA,CAAAA,GAAeU,CAAAA,GAAOzW,EAAAA,CAAME,EAAAA,CAAI6V,CAAAA,CAAAA,GAAeU,CAAAA,CAAAA,IAAS,CAAA,EAC5EV,CAAAA,GAAcsB,CAAAA,CAAKzB,UAAAA,CAAWxH,CAAAA,CAAYiE,UAAAA,CAAWsG,MAAAA,CAAO5C,CAAAA,GAAcU,CAAAA,CAAAA,CAAAA,GAAS1G,CAAAA,CAAAA,AAAAA,CAAAA;gBAAAA,IAE/E+K,CAAAA,GAAa3a,EAAAA,CAAmB8M,CAAAA,EAAM8I,CAAAA,EAAa,CAAA,CAAA,AACzD2E;gBAAAA,CAAAA,GAAW,CAAA,EACXtG,CAAAA,GAAW0G,CAAAA,GAAa,CAAA,GAAI1G,CAAAA,IAAYrU,EAAAA,CAAIG,EAAAA,CAAI6V,CAAAA,GAAc9I,CAAAA,CAAAA,GCzBrC,GAAA,EACD,GAAA,CAAA,EDyBxBlL,CAAAA,GAAW4Y,CAAAA,EACX1V,CAAAA,GAAWD,EAAAA,CAAgBoP,CAAAA,EAAU2G,CAAAA,EAAOviB,EAAAA,CAAMoN,CAAAA,EAAQqH,CAAAA,EAAM8I,CAAAA,EAAa6E,CAAAA,CAAAA,EAAc,CAAA,CAAA,EAC3F1U,CAAAA,CAAI3O,CAAAA,CAAAA,EACJwN,CAAAA,CAAKf,EAAAA,CAAAA,EACLiB,CAAAA,CAAS9M,KAAAA,EAAAA;aAAAA;YAAAA,SAEF4iB,CAAAA,GAAAA;gBACP7U,CAAAA,CnFlCgB,CAAA,CAAA,EmFmChBnE,CAAAA,IAAYA,CAAAA,EAAAA,EACZgD,CAAAA,CAAKd,EAAAA,CAAAA;aAAAA;YAAAA,SAEE2B,CAAAA,CAAOqH,CAAAA,EAAM+N,CAAAA,EAAIJ,CAAAA,EAAanV,CAAAA,EAAAA;gBAAAA,IAC/BoQ,CAAAA,GAAWK,CAAAA,EAAAA,EAEX/I,CAAAA,GAAAA,AADSF,CAAAA,CAAAA,GAAAA,AAAQ+N,CAAAA,CAAAA,GAAK/N,CAAAA,CAAAA,GAqBdgO,CAAAA,CAAAA,GArB6BxV,CAAAA,EAAAA,AAsBnCyV,CAAAA,CAAAA,GAAelZ,EAAAA,CAAfkZ,UAAAA,CAAAA,GACYA,CAAAA,CAAWD,CAAAA,CAAAA,GAAK,CAAA,GAAInb,IAAAA,CAAKqb,GAAAA,CAAI,CAAA,GAAIF,CAAAA,EAAG,CAAA,CAAA,CAAA,AAAA,GAtBjCpF,CAAAA,CAAAA,GAAY6E,CAAAA,AACnC/E;gBAAAA,CAAAA,CAAUE,CAAAA,GAAW1I,CAAAA,CAAAA,EACjB3I,EAAAA,CAAQgC,EAAAA,CAAGsD,EAAAA,CAAAA,IAAAA,CAAW8Q,CAAAA,IAAezE,CAAAA,EAAAA,IACvCuE,CAAAA,CAAAA,IC5CyB,EAAA,ED6CrBxa,EAAAA,CAAIiN,CAAAA,CAAAA,GC/CuB,EAAA,IDgD7BqL,CAAAA,CAAOhC,CAAAA,CAASL,CAAAA,CAAAA,CAAc,CAAA,CAAA,CAAA,EC/CP,GAAA,EAAA,CD+CgC,CAAA,EAAA,KAAO,CAAA,EAAA,CAAQ,CAAA,CAAA,CAAA,AAAA;aAAA;YAAA,SAInE0E,CAAAA,GAAAA;gBACH5V,CAAAA,IACFA,CAAAA,CAASa,MAAAA,EAAAA;aAAAA;YAAAA,SAGJA,GAAAA,GAAAA;gBACHb,CAAAA,IAAAA,CAAaA,CAAAA,CAASmB,QAAAA,EAAAA,IACxByU,CAAAA,CAAAA,EAAAA,EACAE,CAAAA,EAAAA,CAAAA,AAAAA;aAAAA;YAAAA,OAOG;gBACLnO,KAAAA,EAAAA,WAAAA;oBArDAhI,GAAAA,CAAGzB,EAAAA,EAAY0X,CAAAA,CAAAA,EACfjW,GAAAA,CAAG;wBAACf,EAAAA;wBAAeD,EAAAA;qBAAAA,EAAgBkC,GAAAA,CAAAA;iBAAAA;gBAqDnC9C,OAAAA,EAAS6X,CAAAA;gBACTrC,MAAAA,EAAAA,CAAAA;gBACA1S,MAAAA,EAAAA,GAAAA;aAAAA,CAAAA;SAAAA;QAAAA,IAAAA,EAAAA,SE/DiBtB,CAAAA,EAAS4J,EAAAA,EAAapM,CAAAA,EAAAA;YAAAA,IAMrCoZ,CAAAA,EACAC,GAAAA,EACAC,EAAAA,EACAC,CAAAA,EACAC,CAAAA,EAEAC,CAAAA,EACA9B,CAAAA,EACA1b,CAAAA,EAAAA,GAAAA,GAb+BsG,EAAAA,CAAeC,CAAAA,CAAAA,EAA1CI,GAAAA,GAAAA,GAAAA,CAAAA,EAAAA,EAAIG,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,EAAMrM,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,EAAM6J,CAAAA,GAAAA,GAAAA,CAAAA,MAAAA,EAChBgE,CAAAA,GAAU/B,CAAAA,CAAV+B,KAAAA,EACA8Q,CAAAA,GAAqEjJ,EAAAA,CAArEiJ,IAAAA,EAAM5B,CAAAA,GAA+DrH,EAAAA,CAA/DqH,MAAAA,EAAQpD,CAAAA,GAAuDjE,EAAAA,CAAvDiE,UAAAA,EAAwBhG,CAAAA,GAA+B+B,EAAAA,CAA3ChC,QAAAA,CAAYC,KAAAA,EAAkB0C,CAAAA,GAAaX,EAAAA,CAAtBsN,KAAAA,CAAS3M,MAAAA,EACxDlE,CAAAA,GAAAA,AAAAA,CAAAA,GAAAA,GAAoBuD,EAAAA,CAAYtD,SAAAA,CAAAA,CAAhCD,OAAAA,EAASsF,CAAAA,GAAAA,GAAAA,CAAAA,MAAAA,EACT+F,CAAAA,GAA+BmB,CAAAA,CAA/BnB,WAAAA,EAAaC,CAAAA,GAAkBkB,CAAAA,CAAlBlB,aAAAA,EAMjBwF,CAAAA,GAAAA,CAAW,CAAA,AAAA;YAAA,SAYNtK,CAAAA,GAAAA;gBAAAA,IACCQ,CAAAA,GAAS7P,CAAAA,CAAT6P,IAAAA,AACR+J;gBAAAA,CAAAA,CAAAA,CAAS/J,CAAAA,CAAAA,EACT0J,CAAAA,GAAkB,MAAA,KAAT1J,CAAAA;aAAAA;YAAAA,SAEFgK,CAAAA,CAAcld,CAAAA,EAAAA;gBAAAA,IAGbmd,CAAAA,EAmHWC,CAAAA,EACXC,CAAAA,AAtHRP;gBAAAA,CAAAA,GAAAA,CAAiB,CAAA,EACZ9B,CAAAA,IACGmC,CAAAA,CAAAA,GAAUG,CAAAA,CAAatd,CAAAA,CAAAA,EAmHZod,CAAAA,GAlHDpd,CAAAA,CAAEV,MAAAA,EAmHZ+d,CAAAA,GAAWha,CAAAA,CAAXga,MAAAA,EACAzgB,CAAAA,CAAQwgB,CAAAA,EAAAA,GAAAA,GAAa/S,EAAAA,GAAAA,KAAAA,GAA2BJ,EAAAA,CAAAA,IAAoBoT,CAAAA,IAAWzgB,CAAAA,CAAQwgB,CAAAA,EAASC,CAAAA,CAAAA,IAAAA,CApHxEF,CAAAA,IAAYnd,CAAAA,CAAEud,MAAAA,IACrC7J,CAAAA,CAAAA,CAAWmD,MAAAA,EAAAA,GAUd9W,CAAAA,CAAQC,CAAAA,EAAAA,CAAG,CAAA,CAAA,GATXV,CAAAA,CAAAA,GAAS6d,CAAAA,GAAUzP,CAAAA,GAAQgI,MAAAA,EAC3BmH,CAAAA,GAAWjV,CAAAA,CAAMC,EAAAA,CAAG;oBAAClP,CAAAA;oBAAQC,CAAAA;iBAAAA,CAAAA,EAC7B+jB,EAAAA,GAAgB,IAAA,EAChB5iB,CAAAA,CAAKuF,CAAAA,EAAQ2L,EAAAA,EAAqBuS,CAAAA,EAAe9O,EAAAA,CAAAA,EACjD3U,CAAAA,CAAKuF,CAAAA,EAAQ4L,EAAAA,EAAmBuS,CAAAA,EAAa/O,EAAAA,CAAAA,EAC7CgK,CAAAA,CAAKvR,MAAAA,EAAAA,EACL2P,CAAAA,CAAO3P,MAAAA,EAAAA,EACPuW,CAAAA,CAAK1d,CAAAA,CAAAA,CAAAA,AAAAA,CAAAA,AAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAOJwd,CAAAA,CAAcxd,CAAAA,EAAAA;gBAAAA,IA6DFA,CAAAA,EACO2d,CAAAA,EACpBC,CAAAA,EAKmB5d,CAAAA,AAnEpB4H;gBAAAA,CAAAA,CAAMC,EAAAA,CrFpDS,CAAA,CAAA,IqFqDlBD,CAAAA,CAAAA,CAAML,GAAAA,CrFrDY,CAAA,CAAA,EqFsDlBnB,CAAAA,CjC5CoB,MAAA,CAAA,CAAA,AAAA,EiC8ClBpG,CAAAA,CAAE6d,UAAAA,IACAhB,CAAAA,CAAAA,GACFnE,CAAAA,CAAAA,CAAK1B,SAAAA,CAAUyF,CAAAA,GAAyBqB,CAAAA,CAAU9d,CAAAA,CAAAA,GAyFvCgd,CAAAA,CAAAA,IAAYnX,CAAAA,CAAQgC,EAAAA,CAAGsD,EAAAA,CAAAA,GxBxJlB,CAAA,GwBwJsC,CAAA,CAAA,AAAA,CAAA,EAxFhD4S,CAAAA,GxB/Dc,GAAA,GwB+DJC,CAAAA,CAAShe,CAAAA,CAAAA,EACnBie,CAAAA,GAAcjB,CAAAA,KAAcA,CAAAA,CAAAA,GAAWxF,CAAAA,EAAAA,CAAAA,AAAAA,EAAAA,AACzCuG,CAAAA,CAAAA,IAAWE,CAAAA,CAAAA,IACbP,CAAAA,CAAK1d,CAAAA,CAAAA,EAEP8c,CAAAA,GAAAA,CAAiB,CAAA,EACjB1W,CAAAA,CjCtDsB,UAAA,CAAA,EiCuDtBrG,CAAAA,CAAQC,CAAAA,CAAAA,CAAAA,GAsDLuB,EAAAA,CAAIuc,CAAAA,CADc9d,CAAAA,GApDMA,CAAAA,CAAAA,CAAAA,GAqDJuB,EAAAA,CAAIuc,CAAAA,CAAU9d,CAAAA,EAAAA,CAAG,CAAA,CAAA,CAAA,IARzBA,CAAAA,CAAAA,GA5CQA,CAAAA,EA6CD2d,CAAAA,GAAeta,CAAAA,CAAjC6a,gBAAAA,EACFN,CAAAA,GAAQnjB,CAAAA,CAASkjB,CAAAA,CAAAA,EACjBQ,CAAAA,GAAQP,CAAAA,IAASD,CAAAA,CAAWQ,KAAAA,IAAS,CAAA,EACrCC,CAAAA,GAAAA,AAASR,CAAAA,CAAAA,GAAQD,CAAAA,CAAWS,KAAAA,GAAAA,CAAST,CAAAA,CAAAA,IAAe,EAAA,EAhDtDd,CAAAA,GAiDGtb,EAAAA,CAAIuc,CAAAA,CAAU9d,CAAAA,CAAAA,CAAAA,GAAOsd,CAAAA,CAAAA,CAAatd,CAAAA,CAAAA,GAAKoe,CAAAA,GAAQD,CAAAA,CAAAA,AAAAA,EAhDlDpe,CAAAA,CAAQC,CAAAA,CAAAA,CAAAA,AAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAILyd,CAAAA,CAAYzd,GAAAA,EAAAA;gBACf4H,CAAAA,CAAMC,EAAAA,CrF1EU,CAAA,CAAA,IqF2ElBD,CAAAA,CAAAA,CAAML,GAAAA,CrF9EQ,CAAA,CAAA,EqF+EdnB,CAAAA,CjChEuB,SAAA,CAAA,CAAA,AAAA,EiCkErByW,CAAAA,IAAAA,CAAAA,SAkBQ7c,GAAAA,EAAAA;oBAAAA,IACNqe,GAAAA,GAAAA,SAyBiBre,CAAAA,EAAAA;wBAAAA,IACnB6F,CAAAA,CAAQgC,EAAAA,CAAGuD,EAAAA,CAAAA,IAAAA,CAAU4R,CAAAA,EAAU;4BAAA,IAC3BxV,CAAAA,GAAOwW,CAAAA,CAAShe,CAAAA,CAAAA,AAAAA;4BAAAA,IAClBwH,CAAAA,IAAQA,CAAAA,GxBjIU,GAAA,EAAA,OwBkIbsW,CAAAA,CAAU9d,CAAAA,CAAAA,GAAKwH,CAAAA,CAAAA;yBAAAA;wBAAAA,OAGnB,CAAA,CAAA;qBAhCU8W,CAAgBte,GAAAA,CAAAA,EAC3BoX,CAAAA,GAAAA,SAiCoBiH,CAAAA,EAAAA;wBAAAA,OACnB9G,CAAAA,EAAAA,GAAgBnV,EAAAA,CAAKic,CAAAA,CAAAA,GAAYnd,EAAAA,CAAIK,EAAAA,CAAI8c,CAAAA,CAAAA,GAAahb,CAAAA,CAAAA,CAAQkb,UAAAA,IAAc,GAAA,CAAA,AAAA,EAAM3B,CAAAA,GAASrE,CAAAA,GAAAA,CAAAA,GAAW9I,EAAAA,CAAYiH,MAAAA,CAAOf,QAAAA,EAAAA,GAActS,CAAAA,CAAAA,CAAQmb,aAAAA,IAAiB,CAAA,CAAA,AAAA,CAAA,CAAA;qBAlCnJC,CAAmBJ,GAAAA,CAAAA,EACjC/W,GAAAA,GAASjE,CAAAA,CAAQiE,MAAAA,IAAUjE,CAAAA,CAAQqb,YAAAA,AACzCtO;oBAAAA,CAAAA,CAAAA,CAAO,CAAA,CAAA,EACHwM,CAAAA,GACFlJ,CAAAA,CAAWmG,MAAAA,CAAOzC,CAAAA,EAAa,CAAA,EAAG/T,CAAAA,CAAQyW,IAAAA,CAAAA,GACjCjU,CAAAA,CAAQgC,EAAAA,CAAGwD,EAAAA,CAAAA,GACpBqI,CAAAA,CAAW8F,EAAAA,CAAGhI,CAAAA,CAAOpP,EAAAA,CAAKic,GAAAA,CAAAA,CAAAA,GAAa,CAAA,GAAI/W,GAAAA,GAAS,GAAA,GAAM,GAAA,GAAMA,GAAAA,GAAS,GAAA,GAAM,GAAA,CAAA,GACtEzB,CAAAA,CAAQgC,EAAAA,CAAGsD,EAAAA,CAAAA,IAAU6R,CAAAA,IAAY1V,GAAAA,GAC1CoM,CAAAA,CAAW8F,EAAAA,CAAGhC,CAAAA,CAAAA,CAAc,CAAA,CAAA,GAAQ,GAAA,GAAM,GAAA,CAAA,GAE1C9D,CAAAA,CAAW8F,EAAAA,CAAG9F,CAAAA,CAAWsG,MAAAA,CAAO5C,CAAAA,CAAAA,EAAAA,CAAc,CAAA,CAAA,CAEhDhH;oBAAAA,CAAAA,CAAAA,CAAO,CAAA,CAAA;iBA/BL+H,CAAKnY,GAAAA,CAAAA,EACLD,CAAAA,CAAQC,GAAAA,CAAAA,CAAAA,AAAAA,EAEV4D,CAAAA,CAAOtE,CAAAA,EAAQ2L,EAAAA,EAAqBuS,CAAAA,CAAAA,EACpC5Z,CAAAA,CAAOtE,CAAAA,EAAQ4L,EAAAA,EAAmBuS,CAAAA,CAAAA,EAClCZ,CAAAA,GAAAA,CAAW,CAAA;aAAA;YAAA,SAEJ8B,CAAAA,CAAQ3e,CAAAA,EAAAA;gBAAAA,CACVgb,CAAAA,IAAY8B,CAAAA,IACf/c,CAAAA,CAAQC,CAAAA,EAAAA,CAAG,CAAA,CAAA;aAAA;YAAA,SAGN0d,CAAAA,CAAK1d,CAAAA,EAAAA;gBACZ2c,EAAAA,GAAgBD,GAAAA,EAChBA,GAAAA,GAAY1c,CAAAA,EACZyc,CAAAA,GAAelF,CAAAA,EAAAA;aAAAA;YAAAA,SAwCRuG,CAAAA,CAAU9d,CAAAA,EAAG4e,CAAAA,EAAAA;gBAAAA,OACbC,CAAAA,CAAQ7e,CAAAA,EAAG4e,CAAAA,CAAAA,GAAcC,CAAAA,CAAQC,CAAAA,CAAa9e,CAAAA,CAAAA,EAAI4e,CAAAA,CAAAA,CAAAA;aAAAA;YAAAA,SAElDZ,CAAAA,CAAShe,CAAAA,EAAAA;gBAAAA,OACTS,EAAAA,CAAOT,CAAAA,CAAAA,GAAKS,EAAAA,CAAOqe,CAAAA,CAAa9e,CAAAA,CAAAA,CAAAA,CAAAA;aAAAA;YAAAA,SAEhC8e,CAAAA,CAAa9e,CAAAA,EAAAA;gBAAAA,OACb0c,GAAAA,KAAc1c,CAAAA,IAAK2c,EAAAA,IAAiBD,GAAAA,CAAAA;aAAAA;YAAAA,SAEpCmC,CAAAA,CAAQ7e,CAAAA,EAAG4e,CAAAA,EAAAA;gBAAAA,OAAAA,AACVtB,CAAAA,CAAAA,CAAatd,CAAAA,CAAAA,GAAKA,CAAAA,CAAE+e,cAAAA,CAAe,CAAA,CAAA,GAAK/e,CAAAA,CAAAA,AAAAA,CAAAA,MAAAA,GAAUkM,CAAAA,CAAQ0S,CAAAA,GAAa,GAAA,GAAM,GAAA,CAAA,CAAA,CAAA;aAAA;YAAA,SAS9EtB,CAAAA,CAAatd,CAAAA,EAAAA;gBAAAA,OACS,WAAA,IAAA,OAAfgf,UAAAA,IAA8Bhf,CAAAA,YAAagf,UAAAA,CAAAA;aAAAA;YAAAA,SAKlD/B,CAAAA,CAAQ/hB,CAAAA,EAAAA;gBACf8f,CAAAA,GAAW9f,CAAAA;aAAAA;YAAAA,OAEN;gBACL+S,KAAAA,EAAAA,WAAAA;oBAhJAlU,CAAAA,CAAK2T,CAAAA,EAAOzC,EAAAA,EAAqBhR,CAAAA,EAAMyU,EAAAA,CAAAA,EACvC3U,CAAAA,CAAK2T,CAAAA,EAAOxC,EAAAA,EAAmBjR,CAAAA,EAAMyU,EAAAA,CAAAA,EACrC3U,CAAAA,CAAK2T,CAAAA,EAAO1C,EAAAA,EAAqBkS,CAAAA,EAAexO,EAAAA,CAAAA,EAChD3U,CAAAA,CAAK2T,CAAAA,EAAO,OAAA,EAASiR,CAAAA,EAAS;wBAAE/P,OAAAA,EAAAA,CAAS,CAAA;qBAAA,CAAA,EACzC7U,CAAAA,CAAK2T,CAAAA,EAAO,WAAA,EAAa3N,CAAAA,CAAAA,EACzBkG,GAAAA,CAAG;wBAAC1B,EAAAA;wBAAeW,EAAAA;qBAAAA,EAAgBwN,CAAAA,CAAAA;iBAAAA;gBA4InCuK,OAAAA,EAAAA,CAAAA;gBACAgC,UAAAA,EAAAA,WAAAA;oBAAAA,OAROpC,CAAAA,CAAAA;iBAAAA;aAAAA,CAAAA;SAAAA;QAAAA,QAAAA,EAAAA,SlB5JchX,CAAAA,EAAS4J,GAAAA,EAAapM,CAAAA,EAAAA;YAAAA,IAIzC/D,CAAAA,EACA0b,CAAAA,EAAAA,CAAAA,GAJyBpV,EAAAA,CAAeC,CAAAA,CAAAA,EAApCI,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EAAIlM,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAM6J,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,EACVgI,CAAAA,GAAS/F,CAAAA,CAAT+F,IAAAA,EACAM,CAAAA,GAAYuD,GAAAA,CAAYtD,SAAAA,CAAxBD,OAAAA,AAAAA;YAAAA,SASCwG,CAAAA,GAAAA;gBAAAA,IACCwM,CAAAA,GAAa7b,CAAAA,CAAb6b,QAAAA,AACJA;gBAAAA,CAAAA,IACF5f,CAAAA,CAAAA,GAAsB,QAAA,KAAb4f,CAAAA,GAAwBxJ,MAAAA,GAAS9J,CAAAA,EAC1C7R,CAAAA,CAAKuF,CAAAA,EAAQ8P,EAAAA,EAAgB+P,CAAAA,CAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAGxB9a,CAAAA,GAAAA;gBACPT,CAAAA,CAAOtE,CAAAA,EAAQ8P,EAAAA,CAAAA;aAAAA;YAAAA,SAKRlC,CAAAA,GAAAA;gBAAAA,IACDkS,CAAAA,GAAYpE,CAAAA,AAClBA;gBAAAA,CAAAA,GAAAA,CAAW,CAAA,EACX9gB,EAAAA,CAAS,WAAA;oBACP8gB,CAAAA,GAAWoE,CAAAA;iBAAAA,CAAAA;aAAAA;YAAAA,SAGND,CAAAA,CAAUnf,CAAAA,EAAAA;gBACZgb,CAAAA,IAAAA,CAAAA,AACGtd,CAAAA,CAAAA,GAAMyR,EAAAA,CAAanP,CAAAA,CAAAA,CAAAA,KACbkM,CAAAA,CAAQlE,EAAAA,CAAAA,GAClBnC,CAAAA,CAAQ2T,EAAAA,CAAG,GAAA,CAAA,GACF9b,CAAAA,KAAQwO,CAAAA,CAAQjE,EAAAA,CAAAA,IACzBpC,CAAAA,CAAQ2T,EAAAA,CAAG,GAAA,CAAA,CAAA,AAAA;aAAA;YAAA,OAIV;gBACLvL,KAAAA,EAAAA,WAAAA;oBApCAyE,CAAAA,EAAAA,EACAzM,CAAAA,CAAGf,EAAAA,EAAeb,CAAAA,CAAAA,EAClB4B,CAAAA,CAAGf,EAAAA,EAAewN,CAAAA,CAAAA,EAClBzM,CAAAA,CAAGzB,EAAAA,EAAY0I,CAAAA,CAAAA;iBAAAA;gBAkCf7I,OAAAA,EAAAA,CAAAA;gBACA4Y,OAAAA,EAAAA,SAvBe/hB,CAAAA,EAAAA;oBACf8f,CAAAA,GAAW9f,CAAAA;iBAAAA;aAAAA,CAAAA;SAAAA;QAAAA,QAAAA,EAAAA,SmBJU2K,GAAAA,EAAS4J,GAAAA,EAAapM,CAAAA,EAAAA;YAAAA,IAAAA,GAAAA,GACbuC,EAAAA,CAAeC,GAAAA,CAAAA,EAAvCI,GAAAA,GAAAA,GAAAA,CAAAA,EAAAA,EAAIE,CAAAA,GAAAA,GAAAA,CAAAA,GAAAA,EAAKpM,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,EAAMqM,CAAAA,GAAAA,GAAAA,CAAAA,IAAAA,EACjBiZ,CAAAA,GAAoC,YAAA,KAArBhc,CAAAA,CAAQic,QAAAA,EACvBtc,CAAAA,GAAS;gBAACuB,EAAAA;gBAAeU,EAAAA;gBAAeR,EAAAA;gBAAaa,EAAAA;aAAAA,EACvDia,CAAAA,GAAU,EAAA,AAAA;YAAA,SAQL7M,CAAAA,GAAAA;gBACPvZ,EAAAA,CAAMomB,CAAAA,CAAAA,EACN9P,GAAAA,CAAY1C,MAAAA,CAAO5R,OAAAA,CAAQ,SAACmQ,CAAAA,EAAAA;oBAC1BhL,EAAAA,CAASgL,CAAAA,CAAMG,KAAAA,EAAO8D,EAAAA,CAAAA,CAAgBpU,OAAAA,CAAQ,SAAC6Y,CAAAA,EAAAA;wBAAAA,IACvC8H,CAAAA,GAAM7c,CAAAA,CAAa+U,CAAAA,EAAK3E,EAAAA,CAAAA,EACxBmQ,CAAAA,GAASvgB,CAAAA,CAAa+U,CAAAA,EAAK1E,EAAAA,CAAAA,AAC7BwM;wBAAAA,CAAAA,KAAQ9H,CAAAA,CAAI8H,GAAAA,IAAO0D,CAAAA,KAAWxL,CAAAA,CAAIwL,MAAAA,IAC9BrgB,CAAAA,CAAAA,GAAYkE,CAAAA,CAAQzH,OAAAA,CAAQ6jB,OAAAA,EAE5BA,CAAAA,GAAUziB,EAAAA,CADVb,CAAAA,GAAS6X,CAAAA,CAAIhB,aAAAA,EAAAA,GAAAA,GACe7T,CAAAA,CAAAA,IAAgBb,CAAAA,CAAO,MAAA,EAAQa,CAAAA,EAAWhD,CAAAA,CAAAA,EAC5EojB,CAAAA,CAAQ/jB,IAAAA,CAAK;4BAACwY,CAAAA;4BAAK1I,CAAAA;4BAAOmU,CAAAA;yBAAAA,CAAAA,EAC1BzL,CAAAA,CAAI8H,GAAAA,IAAOjd,CAAAA,CAAQmV,CAAAA,EAAK,MAAA,CAAA,CAAA,AAAA;qBAAA,CAAA;iBAAA,CAAA,EAI9BqL,CAAAA,IAAgBK,CAAAA,EAAAA;aAAAA;YAAAA,SAETnJ,CAAAA,GAAAA;gBACPgJ,CAAAA,CAAAA,GAAUA,CAAAA,CAAQxiB,MAAAA,CAAO,SAACuH,CAAAA,EAAAA;oBAAAA,IAClBiK,CAAAA,GAAWlL,CAAAA,CAAQwQ,OAAAA,GAAAA,CAAAA,AAAYxQ,CAAAA,CAAAA,CAAQsc,YAAAA,IAAgB,CAAA,CAAA,GAAK,CAAA,CAAA,GAAK,CAAA,AAAA;oBAAA,OAAA,CAChErb,CAAAA,CAAK,CAAA,CAAA,CAAG+J,QAAAA,CAASxI,GAAAA,CAAQ0F,KAAAA,EAAOgD,CAAAA,CAAAA,IAAYqR,CAAAA,CAAKtb,CAAAA,CAAAA,CAAAA;iBAAAA,CAAAA,CAAAA,CAElDjL,MAAAA,IAAU8M,CAAAA,CAAInD,CAAAA,CAAAA;aAAAA;YAAAA,SAEf4c,CAAAA,CAAKtb,CAAAA,EAAAA;gBAAAA,IACL0P,CAAAA,GAAO1P,CAAAA,CAAAA,CAAAA,CAAAA,AACdtI;gBAAAA,EAAAA,CAASsI,CAAAA,CAAK,CAAA,CAAA,CAAGmH,KAAAA,EAAOZ,EAAAA,CAAAA,EACxB9Q,CAAAA,CAAKia,CAAAA,EAAK,YAAA,EAAcna,EAAAA,CAAMgmB,CAAAA,EAAQvb,CAAAA,CAAAA,CAAAA,EACtCnG,EAAAA,CAAa6V,CAAAA,EAAK,KAAA,EAAO/U,CAAAA,CAAa+U,CAAAA,EAAK3E,EAAAA,CAAAA,CAAAA,EAC3ClR,EAAAA,CAAa6V,CAAAA,EAAK,QAAA,EAAU/U,CAAAA,CAAa+U,CAAAA,EAAK1E,EAAAA,CAAAA,CAAAA,EAC9CvR,EAAAA,CAAgBiW,CAAAA,EAAK3E,EAAAA,CAAAA,EACrBtR,EAAAA,CAAgBiW,CAAAA,EAAK1E,EAAAA,CAAAA;aAAAA;YAAAA,SAEduQ,CAAAA,CAAOvb,CAAAA,EAAMtE,CAAAA,EAAAA;gBAAAA,IACbgU,CAAAA,GAAc1P,CAAAA,CAAAA,CAAAA,CAAAA,EAATgH,CAAAA,GAAShH,CAAAA,CAAAA,CAAAA,CAAAA,AACrB9D;gBAAAA,EAAAA,CAAY8K,CAAAA,CAAMG,KAAAA,EAAOZ,EAAAA,CAAAA,EACV,OAAA,KAAX7K,CAAAA,CAAEzF,IAAAA,IACJiF,CAAAA,CAAAA,CAAO8E,CAAAA,CAAK,CAAA,CAAA,CAAA,EACZzF,CAAAA,CAAQmV,CAAAA,EAAK,EAAA,CAAA,EACb5N,CAAAA,CAAKT,EAAAA,EAAuBqO,CAAAA,EAAK1I,CAAAA,CAAAA,EACjClF,CAAAA,CAAKjB,EAAAA,CAAAA,CAAAA,AAAAA,EAEPka,CAAAA,IAAgBK,CAAAA,EAAAA;aAAAA;YAAAA,SAETA,CAAAA,GAAAA;gBACPH,CAAAA,CAAQlmB,MAAAA,IAAUumB,CAAAA,CAAKL,CAAAA,CAAQ9H,KAAAA,EAAAA,CAAAA;aAAAA;YAAAA,OAE1B;gBACLxJ,KAAAA,EAAAA,WAAAA;oBAtDI5K,CAAAA,CAAQic,QAAAA,IACV5M,CAAAA,CAAAA,EAAAA,EACAzM,GAAAA,CAAGhB,EAAAA,EAAeyN,CAAAA,CAAAA,EAClB2M,CAAAA,IAAgBpZ,GAAAA,CAAGjD,CAAAA,EAAQuT,CAAAA,CAAAA,CAAAA,AAAAA;iBAAAA;gBAoD7BlS,OAAAA,EAASxK,EAAAA,CAAMV,EAAAA,EAAOomB,CAAAA,CAAAA;aAAAA,CAAAA;SAAAA;QAAAA,UAAAA,EAAAA,SCjDC1Z,CAAAA,EAAS4J,GAAAA,EAAapM,CAAAA,EAAAA;YAAAA,IAO3CoO,CAAAA,EACAqO,CAAAA,EAPExc,GAAAA,GAAQsC,EAAAA,CAAeC,CAAAA,CAAAA,EACrBI,GAAAA,GAAmB3C,GAAAA,CAAnB2C,EAAAA,EAAIG,GAAAA,GAAe9C,GAAAA,CAAf8C,IAAAA,EAAMrM,CAAAA,GAASuJ,GAAAA,CAATvJ,IAAAA,EACVgT,CAAAA,GAAiC0C,GAAAA,CAAjC1C,MAAAA,EAAQU,CAAAA,GAAyBgC,GAAAA,CAAzBhC,QAAAA,EAAUiG,EAAAA,GAAejE,GAAAA,CAAfiE,UAAAA,EAClBE,CAAAA,GAA2BF,EAAAA,CAA3BE,QAAAA,EAAUmG,EAAAA,GAAiBrG,EAAAA,CAAjBqG,QAAAA,EAAUP,EAAAA,GAAO9F,EAAAA,CAAP8F,EAAAA,EACpBtN,EAAAA,GAAYuD,GAAAA,CAAYtD,SAAAA,CAAxBD,OAAAA,EACFzQ,CAAAA,GAAQ,EAAA,AAAA;YAAA,SAaL4I,EAAAA,GAAAA;gBACHoN,CAAAA,IACFjS,CAAAA,CAAAA,CAAOiO,CAAAA,CAASzB,UAAAA,GAAa1S,EAAAA,CAAMmY,CAAAA,CAAKrV,QAAAA,CAAAA,GAAYqV,CAAAA,CAAAA,EACpDjR,EAAAA,CAAYiR,CAAAA,EAAMqO,CAAAA,CAAAA,EAClB3mB,EAAAA,CAAMsC,CAAAA,CAAAA,EACNgW,CAAAA,GAAO,IAAA,CAAA,AAAA,EAETnO,GAAAA,CAAMe,OAAAA,EAAAA;aAAAA;YAAAA,SA4BCsa,CAAAA,CAAQlL,CAAAA,EAAAA;gBACf+F,EAAAA,CAAAA,GAAAA,GAAO/F,CAAAA,EAAAA,CAAQ,CAAA,CAAA;aAAA;YAAA,SAER0L,CAAAA,CAAU1L,CAAAA,EAAMzT,CAAAA,EAAAA;gBAAAA,IACf3G,CAAAA,GAAWoC,CAAAA,CAAXpC,MAAAA,EACFqE,CAAAA,GAAMyR,EAAAA,CAAanP,CAAAA,CAAAA,EACnB+f,CAAAA,GAAMC,CAAAA,EAAAA,EACRC,CAAAA,GAAAA,EAAY,AACZviB;gBAAAA,CAAAA,KAAQwO,EAAAA,CAAQjE,EAAAA,EAAAA,CAAa,CAAA,EAAO8X,CAAAA,CAAAA,GACtCE,CAAAA,GAAAA,EAAaxM,CAAAA,GAAOpa,CAAAA,GACXqE,CAAAA,KAAQwO,EAAAA,CAAQlE,EAAAA,EAAAA,CAAY,CAAA,EAAO+X,CAAAA,CAAAA,GAC5CE,CAAAA,GAAAA,AAAAA,CAAAA,EAAcxM,CAAAA,GAAOpa,CAAAA,CAAAA,GAAUA,CAAAA,GACd,MAAA,KAARqE,CAAAA,GACTuiB,CAAAA,GAAW,CAAA,GACM,KAAA,KAARviB,CAAAA,IACTuiB,CAAAA,CAAAA,GAAW5mB,CAAAA,GAAS,CAAA,CAAA,AAAA,CAEhB6mB;gBAAAA,CAAAA,GAAOzkB,CAAAA,CAAMwkB,CAAAA,CAAAA,CACfC;gBAAAA,CAAAA,IACFnhB,CAAAA,CAAAA,CAAMmhB,CAAAA,CAAK3C,MAAAA,CAAAA,EACX/D,EAAAA,CAAAA,GAAAA,GAAOyG,CAAAA,CAAAA,EACPlgB,CAAAA,CAAQC,CAAAA,EAAAA,CAAG,CAAA,CAAA,CAAA,AAAA;aAAA;YAAA,SAGNggB,CAAAA,GAAAA;gBAAAA,OACA3c,CAAAA,CAAQ8c,mBAAAA,IAAuB9c,CAAAA,CAAQ6M,SAAAA,CAAAA;aAAAA;YAAAA,SAEvClD,EAAAA,CAAMzB,CAAAA,EAAAA;gBAAAA,OACN9P,CAAAA,CAAMiY,EAAAA,CAAW2F,MAAAA,CAAO9N,CAAAA,CAAAA,CAAAA,CAAAA;aAAAA;YAAAA,SAExBtE,CAAAA,GAAAA;gBAAAA,IAUGsW,CAAAA,EATJtL,CAAAA,GAAOjF,EAAAA,CAAM+M,EAAAA,CAAAA,CAAS,CAAA,CAAA,CAAA,EACtB5M,CAAAA,GAAOH,EAAAA,CAAM+M,EAAAA,EAAAA,CAAAA,AACf9H;gBAAAA,CAAAA,IAEFzR,CAAAA,EAAAA,CADQ+c,CAAAA,GAAWtL,CAAAA,CAAXsL,MAAAA,EACY9S,EAAAA,CAAAA,EACpB1M,EAAAA,CAAgBwf,CAAAA,EAAQtU,EAAAA,CAAAA,EACxB9K,EAAAA,CAAaof,CAAAA,EAAQ1U,EAAAA,EAAAA,EAAY,CAAA,CAAA,AAAA,EAE/BsE,CAAAA,IAEFnR,CAAAA,EAAAA,CADQuhB,CAAAA,GAAWpQ,CAAAA,CAAXoQ,MAAAA,EACS9S,EAAAA,CAAAA,EACjBtM,EAAAA,CAAaof,CAAAA,EAAQtU,EAAAA,EAAAA,CAAe,CAAA,CAAA,EACpC9K,EAAAA,CAAaof,CAAAA,EAAQ1U,EAAAA,EAAW,EAAA,CAAA,CAAA,AAAA,EAElCzC,GAAAA,CnChHoC,oBAAA,EmCgHL;oBAAEqL,IAAAA,EAAAA,CAAAA;oBAAMhW,KAAAA,EAAAA,CAAAA;iBAAAA,EAASwW,CAAAA,EAAM9E,CAAAA,CAAAA;aAAAA;YAAAA,OAEjD;gBACL1R,KAAAA,EAAAA,CAAAA;gBACAwS,KAAAA,EAAAA,SA9FOA,GAAAA,GAAAA;oBACP5J,EAAAA,EAAAA,EACA4B,GAAAA,CAAG;wBAACf,EAAAA;wBAAeD,EAAAA;qBAAAA,EAAgBgJ,GAAAA,CAAAA,EAC/B5K,CAAAA,CAAQ2I,UAAAA,IAAce,CAAAA,CAAOoH,QAAAA,EAAAA,IAC/BlO,CAAAA,GAAAA,CAAG;wBAACzB,EAAAA;wBAAYa,EAAAA;wBAAcC,EAAAA;qBAAAA,EAAiB2B,CAAAA,CAAAA,EAAAA,WAAAA;wBAAAA,IAgBzC5N,GAAAA,GAAWwM,CAAAA,CAAXxM,MAAAA,EACAuC,CAAAA,GAA2ByH,CAAAA,CAA3BzH,OAAAA,EAASmQ,CAAAA,GAAkB1I,CAAAA,CAAlB0I,IAAAA,EAAM8H,CAAAA,GAAYxQ,CAAAA,CAAZwQ,OAAAA,EACjBzS,CAAAA,GAAMwS,CAAAA,EAAAA,GAAava,GAAAA,GAASiI,EAAAA,CAAKjI,GAAAA,GAASwa,CAAAA,CAAAA,AAEhD7X;wBAAAA,EAAAA,CADAyV,CAAAA,GAAOhE,CAAAA,CAASzB,UAAAA,IAAc1N,CAAAA,CAAO,IAAA,EAAM1C,CAAAA,CAAQoQ,UAAAA,EAAYyB,CAAAA,CAASC,KAAAA,CAAMsF,aAAAA,CAAAA,EAC/D8M,CAAAA,GAAuB1V,EAAAA,GAAAA,IAAAA,GAAqB4V,CAAAA,EAAAA,CAAAA,EAC3D7hB,EAAAA,CAAasT,CAAAA,EAAM7I,EAAAA,EAAM,SAAA,CAAA,EACzBzK,EAAAA,CAAasT,CAAAA,EAAMvI,EAAAA,EAAY6C,CAAAA,CAAKqU,MAAAA,CAAAA,EACpCjiB,EAAAA,CAAasT,CAAAA,EAAMpI,EAAAA,EAAkB2W,CAAAA,EAAAA,KAAmB5X,EAAAA,GAAM,UAAA,GAAa,EAAA,CAAA,CAAA;wBAAA,IACtE,IAAI3K,CAAAA,GAAI,CAAA,EAAGA,CAAAA,GAAI2D,CAAAA,EAAK3D,CAAAA,EAAAA,CAAK;4BAAA,IACtB4iB,CAAAA,GAAK/hB,CAAAA,CAAO,IAAA,EAAM,IAAA,EAAMmT,CAAAA,CAAAA,EACxB8L,CAAAA,GAASjf,CAAAA,CAAO,QAAA,EAAU;gCAAEgiB,KAAAA,EAAO1kB,CAAAA,CAAQ6X,IAAAA;gCAAMlZ,IAAAA,EAAM,QAAA;6BAAA,EAAY8lB,CAAAA,CAAAA,EACnE3T,CAAAA,GAAWK,CAAAA,CAAOyG,KAAAA,CAAM/V,CAAAA,CAAAA,CAAGmP,GAAAA,CAAI,SAACtB,CAAAA,EAAAA;gCAAAA,OAAUA,CAAAA,CAAMG,KAAAA,CAAM9E,EAAAA,CAAAA;6BAAAA,CAAAA,EACtD4Z,CAAAA,GAAAA,CAAQ3M,CAAAA,EAAAA,IAAwB,CAAA,GAAVC,CAAAA,GAAc9H,CAAAA,CAAKyU,KAAAA,GAAQzU,CAAAA,CAAKkB,MAAAA,AAC5DlT;4BAAAA,CAAAA,CAAKwjB,CAAAA,EAAQ,OAAA,EAAS1jB,EAAAA,CAAM8kB,CAAAA,EAASlhB,CAAAA,CAAAA,CAAAA,EACjC4F,CAAAA,CAAQod,kBAAAA,IACV1mB,CAAAA,CAAKwjB,CAAAA,EAAQ,SAAA,EAAW1jB,EAAAA,CAAMslB,CAAAA,EAAW1hB,CAAAA,CAAAA,CAAAA,EAE3CU,EAAAA,CAAakiB,CAAAA,EAAIzX,EAAAA,EAAM,cAAA,CAAA,EACvBzK,EAAAA,CAAaof,CAAAA,EAAQ3U,EAAAA,EAAM,KAAA,CAAA,EAC3BzK,EAAAA,CAAaof,CAAAA,EAAQxU,EAAAA,EAAe2D,CAAAA,CAASxG,IAAAA,CAAK,GAAA,CAAA,CAAA,EAClD/H,EAAAA,CAAaof,CAAAA,EAAQrU,EAAAA,EAAY7G,EAAAA,CAAOke,CAAAA,EAAM9iB,CAAAA,GAAI,CAAA,CAAA,CAAA,EAClDU,EAAAA,CAAaof,CAAAA,EAAQ1U,EAAAA,EAAAA,EAAY,CAAA,EACjCpN,CAAAA,CAAMD,IAAAA,CAAK;gCAAE6kB,EAAAA,EAAAA,CAAAA;gCAAI9C,MAAAA,EAAAA,CAAAA;gCAAQ9J,IAAAA,EAAMhW,CAAAA;6BAAAA,CAAAA;yBAAAA;qBArC/BijB,EAAAA,EACAzZ,CAAAA,EAAAA,EACAb,GAAAA,CnC9BkC,oBAAA,EmC8BH;wBAAEqL,IAAAA,EAAAA,CAAAA;wBAAMhW,KAAAA,EAAAA,CAAAA;qBAAAA,EAASuR,EAAAA,CAAMnH,CAAAA,CAAQ0F,KAAAA,CAAAA,CAAAA,CAAAA,AAAAA;iBAAAA;gBAwFhElH,OAAAA,EAAAA,EAAAA;gBACA2I,KAAAA,EAAAA,EAAAA;gBACA/F,MAAAA,EAAAA,CAAAA;aAAAA,CAAAA;SAAAA;QAAAA,IAAAA,EAAAA,SlBhIiBpB,GAAAA,EAAS4J,GAAAA,EAAapM,GAAAA,EAAAA;YAAAA,IACjCwI,GAAAA,GAA6BxI,GAAAA,CAA7BwI,YAAAA,EAAcI,CAAAA,GAAe5I,GAAAA,CAAf4I,UAAAA,EAChBjJ,CAAAA,GAAS,EAAA,AAAA;YAAA,SAINiL,CAAAA,GAAAA;gBAAAA,IA6BD3K,GAAAA,EACE2C,CAAAA,AA7BRJ;gBAAAA,GAAAA,CAAQ8G,OAAAA,CAAQxR,OAAAA,CAAQ,SAACmE,CAAAA,EAAAA;oBAClBA,CAAAA,CAAOqhB,QAAAA,IACVC,CAAAA,CAAAA,CAAK/a,GAAAA,EAASvG,CAAAA,CAAOwN,MAAAA,CAAAA,EACrB8T,CAAAA,CAAKthB,CAAAA,CAAOwN,MAAAA,EAAQjH,GAAAA,CAAAA,CAAAA,AAAAA;iBAAAA,CAAAA,EAGpBgG,GAAAA,IAsBEvI,CAAAA,GAAAA,GAAQsC,EAAAA,CAAeC,GAAAA,CAAAA,EAAAA,AACrBI,CAAAA,CAAAA,GAAO3C,GAAAA,CAAP2C,EAAAA,CAAAA,CACLtB,EAAAA,EAAaga,CAAAA,CAAAA,EAChB1Y,CAAAA,CAAGjB,EAAAA,EAAqBma,CAAAA,CAAAA,EACxBlZ,CAAAA,CAAG;oBAAC1B,EAAAA;oBAAeW,EAAAA;iBAAAA,EAAgB+B,CAAAA,CAAAA,EACnCjE,CAAAA,CAAOxH,IAAAA,CAAK8H,GAAAA,CAAAA,EACZA,GAAAA,CAAM8C,IAAAA,CAAKZ,EAAAA,EAA0BK,GAAAA,CAAQ8G,OAAAA,CAAAA,CAAAA,AAAAA;aAAAA;YAAAA,SAxBtCtI,CAAAA,GAAAA;gBACPrB,CAAAA,CAAO7H,OAAAA,CAAQ,SAACmI,CAAAA,EAAAA;oBACdA,CAAAA,CAAMe,OAAAA,EAAAA;iBAAAA,CAAAA,EAERlL,EAAAA,CAAM6J,CAAAA,CAAAA;aAAAA;YAAAA,SAMC4d,CAAAA,CAAK9T,GAAAA,EAAQxN,CAAAA,EAAAA;gBACdgE,GAAAA,GAAQsC,EAAAA,CAAekH,GAAAA,CAAAA,CAC7BxJ;gBAAAA,GAAAA,CAAM2C,EAAAA,CAAGzB,EAAAA,EAAY,SAAC+G,CAAAA,EAAO0G,CAAAA,EAAMmG,CAAAA,EAAAA;oBACjC9Y,CAAAA,CAAOka,EAAAA,CAAGla,CAAAA,CAAOuI,EAAAA,CAAGuD,EAAAA,CAAAA,GAAQgN,CAAAA,GAAO7M,CAAAA,CAAAA;iBAAAA,CAAAA,EAErCvI,CAAAA,CAAOxH,IAAAA,CAAK8H,GAAAA,CAAAA;aAAAA;YAAAA,SAWL2D,CAAAA,GAAAA;gBACP9I,EAAAA,CAAasR,GAAAA,CAAYhC,QAAAA,CAASgE,IAAAA,EAAMpI,EAAAA,EAAkBhG,GAAAA,CAAQ6M,SAAAA,KAAc9H,EAAAA,GAAM,UAAA,GAAa,EAAA,CAAA;aAAA;YAAA,SAE5FuW,CAAAA,CAAQrT,CAAAA,EAAAA;gBACfzF,GAAAA,CAAQ2T,EAAAA,CAAGlO,CAAAA,CAAMC,KAAAA,CAAAA;aAAAA;YAAAA,SAEV4T,CAAAA,CAAU7T,CAAAA,EAAOtL,CAAAA,EAAAA;gBACpB1E,EAAAA,CAASkU,EAAAA,EAAcL,EAAAA,CAAanP,CAAAA,CAAAA,CAAAA,IACtC2e,CAAAA,CAAAA,CAAQrT,CAAAA,CAAAA,EACRvL,CAAAA,CAAQC,CAAAA,CAAAA,CAAAA,AAAAA;aAAAA;YAAAA,OAGL;gBACL2Q,KAAAA,EAAAA,WAAAA;oBApDA9K,GAAAA,CAAQxC,OAAAA,GAAU;wBAAE4I,UAAAA,EAAYnR,EAAAA,CAAYmR,CAAAA,CAAAA,GAAcJ,GAAAA,GAAeI,CAAAA;qBAAAA;iBAAAA;gBAqDzEgC,KAAAA,EAAAA,CAAAA;gBACA5J,OAAAA,EAAAA,CAAAA;gBACAkW,OAAAA,EAAAA,WAAAA;oBAnCAlW,CAAAA,EAAAA,EACA4J,CAAAA,EAAAA;iBAAAA;aAAAA,CAAAA;SAAAA;QAAAA,KAAAA,EAAAA,SmBpCkBpI,CAAAA,EAAS4J,CAAAA,EAAapM,CAAAA,EAAAA;YAAAA,IAClCtJ,GAAAA,GAAS6L,EAAAA,CAAeC,CAAAA,CAAAA,CAAxB9L,IAAAA,EACJ8mB,CAAAA,GAAW,CAAA,AAAA;YAAA,SAMNC,GAAAA,CAAQ9gB,CAAAA,EAAAA;gBAAAA,IAEL+gB,CAAAA,EAEFrgB,CAAAA,EACAQ,CAAAA,EACA8f,CAAAA,EAQarJ,CAAAA,AAbjB3X;gBAAAA,CAAAA,CAAE6d,UAAAA,IAEElG,CAAAA,CAAAA,GAAAA,AADEoJ,CAAAA,CAAAA,GAAW/gB,CAAAA,CAAX+gB,MAAAA,CAAAA,GACmB,CAAA,EACrBrgB,CAAAA,GAAYD,EAAAA,CAAOT,CAAAA,CAAAA,EACnBkB,CAAAA,GAAMmC,CAAAA,CAAQ4d,iBAAAA,IAAqB,CAAA,EACnCD,CAAAA,GAAQ3d,CAAAA,CAAQ6d,UAAAA,IAAc,CAAA,EAChC3f,EAAAA,CAAIwf,CAAAA,CAAAA,GAAU7f,CAAAA,IAA8B8f,CAAAA,GAAvBtgB,CAAAA,GAAYmgB,CAAAA,IACnChb,CAAAA,CAAAA,CAAQ2T,EAAAA,CAAG7B,CAAAA,GAAY,GAAA,GAAM,GAAA,CAAA,EAC7BkJ,CAAAA,GAAWngB,CAAAA,CAAAA,AAAAA,EAMP2C,CAAAA,CAAQ8d,YAAAA,IAAAA,CAAgBtb,CAAAA,CAAQ+B,KAAAA,CAAMC,EAAAA,CAAGlP,CAAAA,CAAAA,IAAAA,EAA8D,KAAnD8W,CAAAA,CAAYiE,UAAAA,CAAWoF,WAAAA,CAAYnB,CAAAA,CAAAA,IAJjE5X,CAAAA,CAAQC,CAAAA,CAAAA,CAAAA,AAAAA;aAAAA;YAAAA,OAMjC;gBACLiO,KAAAA,EAAAA,WAAAA;oBAtBI5K,CAAAA,CAAQ+d,KAAAA,IACVrnB,GAAAA,CAAK0V,CAAAA,CAAYhC,QAAAA,CAASC,KAAAA,EAAO,OAAA,EAASoT,GAAAA,EAASpS,EAAAA,CAAAA;iBAAAA;aAAAA,CAAAA;SAAAA;QAAAA,IAAAA,EAAAA,SCJpC7I,GAAAA,EAAS4J,CAAAA,EAAapM,CAAAA,EAAAA;YAAAA,IACjC4C,CAAAA,GAAOL,EAAAA,CAAeC,GAAAA,CAAAA,CAAtBI,EAAAA,EACAyH,CAAAA,GAAU+B,CAAAA,CAAYhC,QAAAA,CAAtBC,KAAAA,EAEF2M,CAAAA,GADWhX,CAAAA,CAATge,IAAAA,IAAAA,CACiBhe,CAAAA,CAAQwI,YAAAA,EAC3ByV,CAAAA,GAAKhjB,CAAAA,CAAO,MAAA,EAAQkM,EAAAA,CAAAA,AAAAA;YAAAA,SAejByS,CAAAA,CAAQjC,CAAAA,EAAAA;gBACXX,CAAAA,IACFlc,EAAAA,CAAauP,CAAAA,EAAOnE,EAAAA,EAAWyR,CAAAA,GAAW,KAAA,GAAQ,QAAA,CAAA;aAAA;YAAA,OAG/C;gBACL/M,KAAAA,EAAAA,WAAAA;oBAnBIoM,CAAAA,IACF4C,CAAAA,CAAAA,CAAAA,CAASxN,CAAAA,CAAY8R,QAAAA,CAAS9Z,QAAAA,EAAAA,CAAAA,EAC9BtJ,EAAAA,CAAauP,CAAAA,EAAOlE,EAAAA,EAAe,WAAA,CAAA,EACnC8X,CAAAA,CAAGE,WAAAA,GAAc,KAAA,EACjBvb,CAAAA,CAAGR,EAAAA,EAAqB5L,EAAAA,CAAMojB,CAAAA,EAAAA,CAAS,CAAA,CAAA,CAAA,EACvChX,CAAAA,CAAGP,EAAAA,EAAsB7L,EAAAA,CAAMojB,CAAAA,EAAAA,CAAS,CAAA,CAAA,CAAA,EACxChX,CAAAA,CAAG;wBAACxB,EAAAA;wBAAaa,EAAAA;qBAAAA,EAAiBzL,EAAAA,CAAMqC,EAAAA,EAAQwR,CAAAA,EAAO4T,CAAAA,CAAAA,CAAAA,CAAAA,AAAAA;iBAAAA;gBAczDrE,OAAAA,EAAAA,CAAAA;gBACA5Y,OAAAA,EAAAA,WAAAA;oBAXAtG,EAAAA,CAAgB2P,CAAAA,EAAO;wBAACnE,EAAAA;wBAAWC,EAAAA;qBAAAA,CAAAA,EACnChK,CAAAA,CAAO8hB,CAAAA,CAAAA;iBAAAA;aAAAA,CAAAA;SAAAA;KAAAA,CAAAA,ECrBEG,EAAAA,GAAW;QACtBlnB,IAAAA,EAAM,OAAA;QACNgY,IAAAA,EAAM,QAAA;QACNmP,KAAAA,EAAO,GAAA;QACP7N,OAAAA,EAAS,CAAA;QACT7F,WAAAA,EAAAA,CAAa,CAAA;QACbgE,MAAAA,EAAAA,CAAQ,CAAA;QACRhG,UAAAA,EAAAA,CAAY,CAAA;QACZyU,kBAAAA,EAAAA,CAAoB,CAAA;QACpBna,QAAAA,EAAU,GAAA;QACVmV,YAAAA,EAAAA,CAAc,CAAA;QACdC,YAAAA,EAAAA,CAAc,CAAA;QACdJ,aAAAA,EAAAA,CAAe,CAAA;QACfqG,MAAAA,EAAQ,+BAAA;QACRzO,IAAAA,EAAAA,CAAM,CAAA;QACNhD,SAAAA,EAAW,KAAA;QACX8H,SAAAA,EAAAA,CAAW,CAAA;QACXxL,cAAAA,EAAgB,4CAAA;QAChB6U,IAAAA,EAAAA,CAAM,CAAA;QACNzlB,OAAAA,E9BcqB;YACrB6P,KAAAA,EAAO5B,EAAAA;YACPsM,KAAAA,EAAOrM,EAAAA;YACPkI,MAAAA,EAAQhI,EAAAA;YACRyQ,KAAAA,EAAOxQ,EAAAA;YACPgI,IAAAA,EAAM/H,EAAAA;YACNgI,IAAAA,EAAM/H,EAAAA;YACN6B,UAAAA,EAAY5B,EAAAA;YACZqJ,IAAAA,EAAMpJ,EAAAA;YACNoV,OAAAA,EA1B8B7e,EAAAA,GAAAA,WAAAA;SAAAA;Q8BI9BmL,IAAAA,ECtBkB;YAClBkG,IAAAA,EAAM,gBAAA;YACNC,IAAAA,EAAM,YAAA;YACN6I,KAAAA,EAAO,mBAAA;YACPF,IAAAA,EAAM,kBAAA;YACN5N,MAAAA,EAAQ,gBAAA;YACRuT,KAAAA,EAAO,eAAA;YACPnF,IAAAA,EAAM,gBAAA;YACNnU,KAAAA,EAAO,gBAAA;YACPuL,QAAAA,EAAU,UAAA;YACVhH,KAAAA,EAAO,OAAA;YACP2U,MAAAA,EAAQ,wBAAA;YACRlS,UAAAA,EAAY,UAAA;SAAA;QDWZyB,aAAAA,EAAe;YACb+R,KAAAA,EAAO,CAAA;YACPE,WAAAA,EAAa,CAAA;YACbzG,QAAAA,EAAU,OAAA;SAAA;KAAA,AAAA;IAAA,SEvBE0G,EAAAA,CAAKhc,CAAAA,EAAS4J,CAAAA,EAAapM,GAAAA,EAAAA;QAAAA,IACjC4C,GAAAA,GAAOL,EAAAA,CAAeC,CAAAA,CAAAA,CAAtBI,EAAAA,AAAAA;QAAAA,OAgBD;YACLgI,KAAAA,EAAAA,WAAAA;gBAfAhI,GAAAA,CAAG;oBAAC1B,EAAAA;oBAAeU,EAAAA;iBAAAA,EAAgB,WAAA;oBACjC/K,EAAAA,CAAS,WAAA;wBACPuV,CAAAA,CAAY1C,MAAAA,CAAOrO,KAAAA,CAAM,YAAA,EAAA,UAAA,GAAyB2E,GAAAA,CAAQqe,KAAAA,GAAAA,KAAAA,GAAWre,GAAAA,CAAQse,MAAAA,CAAAA;qBAAAA,CAAAA;iBAAAA,CAAAA;aAAAA;YAcjFnoB,KAAAA,EAAAA,SAVa+R,CAAAA,EAAOuW,CAAAA,EAAAA;gBAAAA,IACZpU,CAAAA,GAAU+B,CAAAA,CAAYhC,QAAAA,CAAtBC,KAAAA,AACRhP;gBAAAA,CAAAA,CAAMgP,CAAAA,EAAO,QAAA,EAAU/M,EAAAA,CAAKtB,CAAAA,CAAKqO,CAAAA,CAAAA,CAAOgH,MAAAA,CAAAA,CAAAA,EACxCxa,EAAAA,CAAS,WAAA;oBACP4nB,CAAAA,EAAAA,EACApjB,CAAAA,CAAMgP,CAAAA,EAAO,QAAA,EAAU,EAAA,CAAA;iBAAA,CAAA;aAAA;YAMzBvG,MAAAA,EAAQlN,CAAAA;SAAAA,CAAAA;KAAAA;IAAAA,SCpBIqR,EAAAA,CAAMzF,CAAAA,EAAS4J,GAAAA,EAAapM,CAAAA,EAAAA;QAAAA,IAKtC0e,CAAAA,EAJIhoB,GAAAA,GAAS6L,EAAAA,CAAeC,CAAAA,CAAAA,CAAxB9L,IAAAA,EACA2e,CAAAA,GAA6BjJ,GAAAA,CAA7BiJ,IAAAA,EAAMhF,CAAAA,GAAuBjE,GAAAA,CAAvBiE,UAAAA,EAAYoD,CAAAA,GAAWrH,GAAAA,CAAXqH,MAAAA,EAClBrF,GAAAA,GAAShC,GAAAA,CAAYhC,QAAAA,CAArBgE,IAAAA,EACFuQ,CAAAA,GAAanoB,EAAAA,CAAM6E,CAAAA,EAAO+S,GAAAA,EAAM,YAAA,CAAA,AAAA;QAAA,SA2B7BtK,GAAAA,GAAAA;YACP6a,CAAAA,CAAW,EAAA,CAAA,EACXlL,CAAAA,CAAO3P,MAAAA,EAAAA;SAAAA;QAAAA,OAaF;YACL8G,KAAAA,EAAAA,WAAAA;gBAxCAlU,GAAAA,CAAK0X,GAAAA,EAAM,eAAA,EAAiB,SAACzR,CAAAA,EAAAA;oBACvBA,CAAAA,CAAEV,MAAAA,KAAWmS,GAAAA,IAAQsQ,CAAAA,IACvB5a,CAAAA,GAAAA,EAAAA,EACA4a,CAAAA,EAAAA,CAAAA,AAAAA;iBAAAA,CAAAA;aAAAA;YAsCJvoB,KAAAA,EAAAA,SAlCa+R,GAAAA,EAAOuW,GAAAA,EAAAA;gBAAAA,IACd1K,GAAAA,GAAcsB,CAAAA,CAAKzB,UAAAA,CAAW1L,GAAAA,EAAAA,CAAO,CAAA,CAAA,EACrC2L,GAAAA,GAAWwB,CAAAA,CAAKnB,WAAAA,EAAAA,EAChBmK,CAAAA,GAAAA,SAkBUnW,CAAAA,EAAAA;oBAAAA,IACRqW,CAAAA,GAAgBve,CAAAA,CAAhBue,WAAAA,AAAAA;oBAAAA,IACJ/b,CAAAA,CAAQgC,EAAAA,CAAGsD,EAAAA,CAAAA,IAAUyW,CAAAA,EAAa;wBAAA,IAC9B3P,CAAAA,GAAOyB,CAAAA,CAAWqG,QAAAA,CAAAA,CAAS,CAAA,CAAA,EAC3BtgB,CAAAA,GAAMia,CAAAA,CAAWwE,MAAAA,EAAAA,AAAAA;wBAAAA,IACV,CAAA,KAATjG,CAAAA,IAAuBxY,CAAAA,IAAT8R,CAAAA,IAAwB9R,CAAAA,IAARwY,CAAAA,IAAyB,CAAA,KAAV1G,CAAAA,EAAAA,OACxCqW,CAAAA,CAAAA;qBAAAA;oBAAAA,OAGJve,CAAAA,CAAQqe,KAAAA,CAAAA;iBA3BDO,CAAS1W,GAAAA,CAAAA,AACY;AAAA,gBAAA,CAAA,IAA/BhK,EAAAA,CAAI6V,GAAAA,GAAcF,GAAAA,CAAAA,IAA2B,CAAA,IAATwK,CAAAA,GAClCre,CAAAA,CAAQ6e,SAAAA,GACVpL,CAAAA,CAAO+C,MAAAA,CAAOzC,GAAAA,EAAasK,CAAAA,EAAAA,CAAO,CAAA,EAAOI,GAAAA,CAAAA,GAEzCE,CAAAA,CAAAA,CAAAA,YAAAA,GAAwBN,CAAAA,GAAAA,KAAAA,GAAWre,CAAAA,CAAQse,MAAAA,CAAAA,EAC3CjJ,CAAAA,CAAK1B,SAAAA,CAAUI,GAAAA,EAAAA,CAAa,CAAA,CAAA,EAC5B2K,CAAAA,GAAcD,GAAAA,CAAAA,AAAAA,GAGhBpJ,CAAAA,CAAAA,CAAK3B,IAAAA,CAAKxL,GAAAA,CAAAA,EACVuW,GAAAA,EAAAA,CAAAA,AAAAA;aAAAA;YAqBF3a,MAAAA,EAAAA,GAAAA;SAAAA,CAAAA;KCuEOgb;IAAAA,EAAAA,GAAAA,WAAAA;QAAAA,SAAAA,GAAAA,CA/GG7iB,CAAAA,EAAQ+D,CAAAA,EAAAA;YAAAA,IAAAA,CACbC,KAAAA,GAAQsC,EAAAA,EAAAA,EAAAA,IAAAA,CACR+F,UAAAA,GAAa,EAAA,EAAA,IAAA,CACb/D,KAAAA,GAAQF,EAAAA,C9FfM,CAAA,CAAA,EAAA,IAAA,C8FgBdiF,OAAAA,GAAU,EAAA,EAAA,IAAA,CACVyV,EAAAA,GAAK,EAAA,EAAA,IAAA,CACLC,EAAAA,GAAK,EAAA,CACJzW;YAAAA,CAAAA,GAAO/Q,EAAAA,CAASyE,CAAAA,CAAAA,GAAUc,EAAAA,CAAM5B,QAAAA,EAAUc,CAAAA,CAAAA,GAAUA,CAAAA,CAC1DwB;YAAAA,EAAAA,CAAO8K,CAAAA,EAASA,CAAAA,GAAAA,cAAAA,CAAAA,EAEhBvI,CAAAA,GAAUxF,EAAAA,CAAM;gBACdwO,KAAAA,EAAOpN,CAAAA,CAAAA,IAAAA,CAFJ2M,IAAAA,GAAOA,CAAAA,EAEgB1C,EAAAA,CAAAA,IAAe,EAAA;gBACzC2J,UAAAA,EAAY5T,CAAAA,CAAa2M,CAAAA,EAAMzC,EAAAA,CAAAA,IAAoB,EAAA;aAAA,EAClDsY,EAAAA,EAAUa,GAAAA,CAAQC,QAAAA,EAAUlf,CAAAA,IAAW,EAAA,CAAA,CAAA;YAAA,IAAA;gBAExCxF,EAAAA,CAAMwF,CAAAA,EAASmf,IAAAA,CAAK5I,KAAAA,CAAM3a,CAAAA,CAAa2M,CAAAA,EAAM/K,EAAAA,CAAAA,CAAAA,CAAAA;aAC7C,CAAA,OAAOb,GAAAA,EAAAA;gBACPc,EAAAA,CAAAA,CAAO,CAAA,EAAO,cAAA,CAAA;aAAA;YAAA,IAAA,CAEXshB,EAAAA,GAAKjlB,MAAAA,CAAOmB,MAAAA,CAAOT,EAAAA,CAAM,EAAA,EAAIwF,CAAAA,CAAAA,CAAAA;SAAAA;QAAAA,IAAAA,GAAAA,GAAAA,GAAAA,CAAAA,SAAAA,AAAAA;QAAAA,OAAAA,GAAAA,CAEpC4K,KAAAA,GAAA,SAAMwU,GAAAA,EAAY9L,GAAAA,EAAAA;YAAAA,IAAAA,CAAAA,GAAAA,IAAAA,EACR/O,CAAAA,GAAmC8a,IAAAA,CAAnC9a,KAAAA,EAAmB6H,CAAAA,GAAgBiT,IAAAA,CAA5B/W,UAAAA,AAAAA;YAAAA,OACf7K,EAAAA,CAAO8G,CAAAA,CAAMC,EAAAA,CAAG;A9FnCG,iBAAA;AAME,iBAAA;aAAA,CAAA,E8F6BkB,kBAAA,CAAA,EACvCD,CAAAA,CAAML,GAAAA,C9FpCa,CAAA,CAAA,EAAA,IAAA,C8FqCdob,EAAAA,GAAKlT,CAAAA,EAAAA,IAAAA,CACLmT,EAAAA,GAAKjM,GAAAA,IAAc+L,IAAAA,CAAKE,EAAAA,IAAOF,CAAAA,IAAAA,CAAK7a,EAAAA,CAAGwD,EAAAA,CAAAA,GAAQwW,EAAAA,GAAOvW,EAAAA,CAAAA,AAAAA,EAAAA,IAAAA,CACtD+W,EAAAA,GAAKI,GAAAA,IAAcC,IAAAA,CAAKL,EAAAA,EAE7BhlB,EAAAA,CADqBM,EAAAA,CAAO,EAAA,EAAIklB,EAAAA,EAAuBH,IAAAA,CAAKL,EAAAA,EAAI;gBAAE1L,UAAAA,EAAY+L,IAAAA,CAAKE,EAAAA;aAAAA,CAAAA,EAC9D,SAACE,CAAAA,EAAWplB,CAAAA,EAAAA;gBACzBqlB,CAAAA,GAAYD,CAAAA,CAAUE,CAAAA,EAAMvT,CAAAA,EAAauT,CAAAA,CAAKZ,EAAAA,CAAAA,CAAAA;gBACpD3S,CAAAA,CAAAA,CAAY/R,CAAAA,CAAAA,GAAOqlB,CAAAA,CAAAA,CACTpS,KAAAA,IAASoS,CAAAA,CAAUpS,KAAAA,EAAAA;aAAAA,CAAAA,EAE/BtT,EAAAA,CAAOoS,CAAAA,EAAa,SAACsT,CAAAA,EAAAA;gBACnBA,CAAAA,CAAU9U,KAAAA,IAAS8U,CAAAA,CAAU9U,KAAAA,EAAAA;aAAAA,CAAAA,EAAAA,IAAAA,CAE1B7H,IAAAA,CAAK7B,EAAAA,CAAAA,EACVvI,EAAAA,CAAS0mB,IAAAA,CAAK9W,IAAAA,ElC9Be,gBAAA,CAAA,EkC+B7BhE,CAAAA,CAAML,GAAAA,C9FjDU,CAAA,CAAA,EAAA,IAAA,C8FkDXnB,IAAAA,C1CnDkB,OAAA,CAAA,E0CoDhBsc,IAAAA,CAAAA;SAAAA,EAAAA,GAAAA,CAET9B,IAAAA,GAAA,SAAK9T,CAAAA,EAAAA;YAAAA,OAAAA,IAAAA,CACEH,OAAAA,CAAQnR,IAAAA,CAAK;gBAAEsR,MAAAA,EAAAA,CAAAA;aAAAA,CAAAA,EACpBA,CAAAA,CAAOH,OAAAA,CAAQnR,IAAAA,CAAK;gBAAEsR,MAAAA,EAAQ4V,IAAAA;gBAAM/B,QAAAA,EAAAA,CAAU,CAAA;aAAA,CAAA,EAC1C+B,IAAAA,CAAK9a,KAAAA,CAAMC,EAAAA,C9FxDC,CAAA,CAAA,IAAA,CAAA,IAAA,C8FyDT8a,EAAAA,CAAGM,IAAAA,CAAK1I,OAAAA,EAAAA,EACbzN,CAAAA,CAAOnB,UAAAA,CAAWsX,IAAAA,CAAK1I,OAAAA,EAAAA,CAAAA,AAAAA,EAElBmI,IAAAA,CAAAA;SAAAA,EAAAA,GAAAA,CAETlJ,EAAAA,GAAA,SAAGC,CAAAA,EAAAA;YAAAA,OAAAA,IAAAA,CACIkJ,EAAAA,CAAGjP,UAAAA,CAAW8F,EAAAA,CAAGC,CAAAA,CAAAA,EACfiJ,IAAAA,CAAAA;SAAAA,EAAAA,GAAAA,CAETzc,EAAAA,GAAA,SAAGjD,CAAAA,EAAQI,CAAAA,EAAAA;YAAAA,OAAAA,IAAAA,CACJE,KAAAA,CAAM2C,EAAAA,CAAGjD,CAAAA,EAAQI,CAAAA,CAAAA,EACfsf,IAAAA,CAAAA;SAAAA,EAAAA,GAAAA,CAETvc,GAAAA,GAAA,SAAInD,CAAAA,EAAAA;YAAAA,OAAAA,IAAAA,CACGM,KAAAA,CAAM6C,GAAAA,CAAInD,CAAAA,CAAAA,EACR0f,IAAAA,CAAAA;SAAAA,EAAAA,GAAAA,CAETtc,IAAAA,GAAA,SAAK9C,CAAAA,EAAAA;YAAAA,IAAAA,CAAAA,AAAAA;YAAAA,OAAAA,AAAAA,CAAAA,CAAAA,GAAAA,IAAAA,CACEA,KAAAA,CAAAA,CAAM8C,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA;gBAAK9C,CAAAA;aAAAA,CAAAA,MAAAA,CAAUhK,EAAAA,CAAMU,SAAAA,EAAW,CAAA,CAAA,CAAA,CAAA,EACpC0oB,IAAAA,CAAAA;SAAAA,EAAAA,GAAAA,CAET7mB,GAAAA,GAAA,SAAI+V,CAAAA,EAAQrG,CAAAA,EAAAA;YAAAA,OAAAA,IAAAA,CACLoX,EAAAA,CAAG5V,MAAAA,CAAOlR,GAAAA,CAAI+V,CAAAA,EAAQrG,CAAAA,CAAAA,EACpBmX,IAAAA,CAAAA;SAAAA,EAAAA,GAAAA,CAETljB,MAAAA,GAAA,SAAO8T,CAAAA,EAAAA;YAAAA,OAAAA,IAAAA,CACAqP,EAAAA,CAAG5V,MAAAA,CAAOvN,MAAAA,CAAO8T,CAAAA,CAAAA,EACfoP,IAAAA,CAAAA;SAAAA,EAAAA,GAAAA,CAET7a,EAAAA,GAAA,SAAGtN,CAAAA,EAAAA;YAAAA,OACMmoB,IAAAA,CAAKN,EAAAA,CAAG7nB,IAAAA,KAASA,CAAAA,CAAAA;SAAAA,EAAAA,GAAAA,CAE1BgW,OAAAA,GAAA,WAAA;YAAA,OAAA,IAAA,CACOnK,IAAAA,CAAKnB,EAAAA,CAAAA,EACHyd,IAAAA,CAAAA;SAAAA,EAAAA,GAAAA,CAETre,OAAAA,GAAA,SAAQwL,CAAAA,EAAAA;YAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,CAAAA,GAAAA,CAAa,CAAA,CAAA,AAAA,CAAA;YAAA,IACXvM,GAAAA,GAAiBof,IAAAA,CAAjBpf,KAAAA,EAAOsE,CAAAA,GAAU8a,IAAAA,CAAV9a,KAAAA,AAAAA;YAAAA,OACXA,CAAAA,CAAMC,EAAAA,C9FjGS,CAAA,CAAA,G8FkGjBjC,EAAAA,CAAe8c,IAAAA,CAAAA,CAAMzc,EAAAA,C1CjGA,OAAA,E0CiGgByc,IAAAA,CAAKre,OAAAA,CAAQtK,IAAAA,CAAK2oB,IAAAA,EAAM7S,CAAAA,CAAAA,CAAAA,GAE7DxS,CAAAA,EAAAA,CAAOqlB,IAAAA,CAAKC,EAAAA,EAAI,SAACI,CAAAA,EAAAA;gBACfA,CAAAA,CAAU1e,OAAAA,IAAW0e,CAAAA,CAAU1e,OAAAA,CAAQwL,CAAAA,CAAAA;aAAAA,EAAAA,CACtC,CAAA,CAAA,EACHvM,GAAAA,CAAM8C,IAAAA,CAAKb,EAAAA,CAAAA,EACXjC,GAAAA,CAAMe,OAAAA,EAAAA,EACNwL,CAAAA,IAAc1W,EAAAA,CAAMupB,IAAAA,CAAK/V,OAAAA,CAAAA,EACzB/E,CAAAA,CAAML,GAAAA,C9FpGa,CAAA,CAAA,CAAA,AAAA,E8FsGdmb,IAAAA,CAAAA;SAAAA,EAAAA,YAAAA,CAAAA,GAAAA,EAAAA;YAAAA;gBAAAA,GAAAA,EAAAA,SAAAA;gBAAAA,GAAAA,EAET,WAAA;oBAAA,OACSA,IAAAA,CAAKN,EAAAA,CAAAA;iBAAAA;gBAAAA,GAAAA,EAEd,SAAY/e,CAAAA,EAAAA;oBAAAA,IAAAA,CACLsf,EAAAA,CAAG5F,KAAAA,CAAMxV,GAAAA,CAAIlE,CAAAA,EAAAA,CAAS,CAAA,CAAA;iBAAA;aAAA;YAAA;gBAAA,GAAA,EAAA,QAAA;gBAAA,GAAA,EAE7B,WAAA;oBAAA,OACSqf,IAAAA,CAAKC,EAAAA,CAAG5V,MAAAA,CAAOmH,SAAAA,CAAAA,CAAU,CAAA,CAAA,CAAA;iBAAA;aAAA;YAAA;gBAAA,GAAA,EAAA,OAAA;gBAAA,GAAA,EAElC,WAAA;oBAAA,OACSwO,IAAAA,CAAKC,EAAAA,CAAGjP,UAAAA,CAAWqG,QAAAA,EAAAA,CAAAA;iBAAAA;aAAAA;SAAAA,CAAAA,EAAAA,GAAAA,CAAAA;KAAAA,EAAAA,CAAAA;IAAAA,OAI9BoI,EAAAA,CAAOI,QAAAA,GAAW,EAAA,EAClBJ,EAAAA,CAAOtpB,MAAAA,GAASA,E/F7HHH,EAAAA,EAAAA,CAAAA;CAAAA,CAAAA,CAAAA","sources":["node_modules/@splidejs/splide/dist/js/splide.min.js","node_modules/@splidejs/splide/src/js/constants/media.ts","node_modules/@splidejs/splide/src/js/constants/states.ts","node_modules/@splidejs/splide/src/js/utils/array/empty/empty.ts","node_modules/@splidejs/splide/src/js/utils/arrayLike/slice/slice.ts","node_modules/@splidejs/splide/src/js/utils/function/apply/apply.ts","node_modules/@splidejs/splide/src/js/utils/function/noop/noop.ts","node_modules/@splidejs/splide/src/js/utils/function/nextTick/nextTick.ts","node_modules/@splidejs/splide/src/js/utils/function/raf/raf.ts","node_modules/@splidejs/splide/src/js/utils/type/type.ts","node_modules/@splidejs/splide/src/js/utils/array/toArray/toArray.ts","node_modules/@splidejs/splide/src/js/utils/array/forEach/forEach.ts","node_modules/@splidejs/splide/src/js/utils/array/includes/includes.ts","node_modules/@splidejs/splide/src/js/utils/array/push/push.ts","node_modules/@splidejs/splide/src/js/utils/dom/toggleClass/toggleClass.ts","node_modules/@splidejs/splide/src/js/utils/dom/addClass/addClass.ts","node_modules/@splidejs/splide/src/js/utils/dom/append/append.ts","node_modules/@splidejs/splide/src/js/utils/dom/before/before.ts","node_modules/@splidejs/splide/src/js/utils/dom/matches/matches.ts","node_modules/@splidejs/splide/src/js/utils/dom/children/children.ts","node_modules/@splidejs/splide/src/js/utils/dom/child/child.ts","node_modules/@splidejs/splide/src/js/utils/object/ownKeys/ownKeys.ts","node_modules/@splidejs/splide/src/js/utils/object/forOwn/forOwn.ts","node_modules/@splidejs/splide/src/js/utils/object/assign/assign.ts","node_modules/@splidejs/splide/src/js/utils/object/merge/merge.ts","node_modules/@splidejs/splide/src/js/utils/object/omit/omit.ts","node_modules/@splidejs/splide/src/js/utils/dom/removeAttribute/removeAttribute.ts","node_modules/@splidejs/splide/src/js/utils/dom/setAttribute/setAttribute.ts","node_modules/@splidejs/splide/src/js/utils/dom/create/create.ts","node_modules/@splidejs/splide/src/js/utils/dom/style/style.ts","node_modules/@splidejs/splide/src/js/utils/dom/display/display.ts","node_modules/@splidejs/splide/src/js/utils/dom/focus/focus.ts","node_modules/@splidejs/splide/src/js/utils/dom/getAttribute/getAttribute.ts","node_modules/@splidejs/splide/src/js/utils/dom/hasClass/hasClass.ts","node_modules/@splidejs/splide/src/js/utils/dom/rect/rect.ts","node_modules/@splidejs/splide/src/js/utils/dom/remove/remove.ts","node_modules/@splidejs/splide/src/js/utils/dom/parseHtml/parseHtml.ts","node_modules/@splidejs/splide/src/js/utils/dom/prevent/prevent.ts","node_modules/@splidejs/splide/src/js/utils/dom/query/query.ts","node_modules/@splidejs/splide/src/js/utils/dom/queryAll/queryAll.ts","node_modules/@splidejs/splide/src/js/utils/dom/removeClass/removeClass.ts","node_modules/@splidejs/splide/src/js/utils/dom/timeOf/timeOf.ts","node_modules/@splidejs/splide/src/js/utils/dom/unit/unit.ts","node_modules/@splidejs/splide/src/js/constants/project.ts","node_modules/@splidejs/splide/src/js/utils/error/assert/assert.ts","node_modules/@splidejs/splide/src/js/utils/math/math/math.ts","node_modules/@splidejs/splide/src/js/utils/math/approximatelyEqual/approximatelyEqual.ts","node_modules/@splidejs/splide/src/js/utils/math/between/between.ts","node_modules/@splidejs/splide/src/js/utils/math/clamp/clamp.ts","node_modules/@splidejs/splide/src/js/utils/math/sign/sign.ts","node_modules/@splidejs/splide/src/js/utils/string/format/format.ts","node_modules/@splidejs/splide/src/js/utils/string/pad/pad.ts","node_modules/@splidejs/splide/src/js/utils/string/uniqueId/uniqueId.ts","node_modules/@splidejs/splide/src/js/constructors/EventBinder/EventBinder.ts","node_modules/@splidejs/splide/src/js/constants/events.ts","node_modules/@splidejs/splide/src/js/constructors/EventInterface/EventInterface.ts","node_modules/@splidejs/splide/src/js/constructors/RequestInterval/RequestInterval.ts","node_modules/@splidejs/splide/src/js/constructors/State/State.ts","node_modules/@splidejs/splide/src/js/constants/arrows.ts","node_modules/@splidejs/splide/src/js/constants/directions.ts","node_modules/@splidejs/splide/src/js/components/Direction/Direction.ts","node_modules/@splidejs/splide/src/js/constants/attributes.ts","node_modules/@splidejs/splide/src/js/constants/classes.ts","node_modules/@splidejs/splide/src/js/components/Drag/constants.ts","node_modules/@splidejs/splide/src/js/constants/types.ts","node_modules/@splidejs/splide/src/js/components/Slides/Slide.ts","node_modules/@splidejs/splide/src/js/components/Autoplay/constants.ts","node_modules/@splidejs/splide/src/js/constants/listener-options.ts","node_modules/@splidejs/splide/src/js/utils/dom/normalizeKey/normalizeKey.ts","node_modules/@splidejs/splide/src/js/components/Keyboard/Keyboard.ts","node_modules/@splidejs/splide/src/js/components/LazyLoad/constants.ts","node_modules/@splidejs/splide/src/js/components/Sync/Sync.ts","node_modules/@splidejs/splide/src/js/components/Media/Media.ts","node_modules/@splidejs/splide/src/js/components/Elements/Elements.ts","node_modules/@splidejs/splide/src/js/utils/dom/closest/closest.ts","node_modules/@splidejs/splide/src/js/components/Slides/Slides.ts","node_modules/@splidejs/splide/src/js/components/Layout/Layout.ts","node_modules/@splidejs/splide/src/js/constructors/Throttle/Throttle.ts","node_modules/@splidejs/splide/src/js/components/Clones/Clones.ts","node_modules/@splidejs/splide/src/js/components/Move/Move.ts","node_modules/@splidejs/splide/src/js/components/Controller/Controller.ts","node_modules/@splidejs/splide/src/js/components/Arrows/Arrows.ts","node_modules/@splidejs/splide/src/js/components/Arrows/path.ts","node_modules/@splidejs/splide/src/js/components/Autoplay/Autoplay.ts","node_modules/@splidejs/splide/src/js/components/Cover/Cover.ts","node_modules/@splidejs/splide/src/js/components/Scroll/Scroll.ts","node_modules/@splidejs/splide/src/js/components/Scroll/constants.ts","node_modules/@splidejs/splide/src/js/components/Drag/Drag.ts","node_modules/@splidejs/splide/src/js/components/LazyLoad/LazyLoad.ts","node_modules/@splidejs/splide/src/js/components/Pagination/Pagination.ts","node_modules/@splidejs/splide/src/js/components/Wheel/Wheel.ts","node_modules/@splidejs/splide/src/js/components/Live/Live.ts","node_modules/@splidejs/splide/src/js/constants/defaults.ts","node_modules/@splidejs/splide/src/js/constants/i18n.ts","node_modules/@splidejs/splide/src/js/transitions/Fade/Fade.ts","node_modules/@splidejs/splide/src/js/transitions/Slide/Slide.ts","node_modules/@splidejs/splide/src/js/core/Splide/Splide.ts"],"sourcesContent":[null,"export const MEDIA_PREFERS_REDUCED_MOTION = '(prefers-reduced-motion: reduce)';","/**\r\n * Splide has been just created.\r\n */\r\nexport const CREATED = 1;\r\n\r\n/**\r\n * Splide has mounted components.\r\n */\r\nexport const MOUNTED = 2;\r\n\r\n/**\r\n * Splide is ready.\r\n */\r\nexport const IDLE = 3;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const MOVING = 4;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const SCROLLING = 5;\r\n\r\n/**\r\n * The user is dragging the slider.\r\n */\r\nexport const DRAGGING = 6;\r\n\r\n/**\r\n * Splide has been destroyed.\r\n */\r\nexport const DESTROYED = 7;\r\n\r\n/**\r\n * The collection of all states.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATES = {\r\n  CREATED,\r\n  MOUNTED,\r\n  IDLE,\r\n  MOVING,\r\n  SCROLLING,\r\n  DRAGGING,\r\n  DESTROYED,\r\n};\r\n","/**\r\n * Empties the array.\r\n *\r\n * @param array - A array to empty.\r\n */\r\nexport function empty( array: any[] ): void {\r\n  array.length = 0;\r\n}\r\n","/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return Array.prototype.slice.call( arrayLike, start, end );\r\n}\r\n","import { AnyFunction, ShiftN } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\n\r\n\r\n/**\r\n * Create a function where provided arguments are bound.\r\n * `this` parameter will be always null.\r\n *\r\n * @param func - A function.\r\n * @param args - Arguments to bind to the function.\r\n *\r\n * @return A function where arguments are bound.\r\n */\r\nexport function apply<F extends AnyFunction, A extends any[] = any[]>(\r\n  func: F,\r\n  ...args: A\r\n): ( ...args: ShiftN<Parameters<F>, A[\"length\"]> ) => ReturnType<F>;\r\n\r\n/**\r\n * Create a function where provided arguments are bound.\r\n * `this` parameter will be always null.\r\n *\r\n * @param func - A function.\r\n */\r\nexport function apply( func: AnyFunction ): any {\r\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n  return func.bind( null, ...slice( arguments, 1 ) );\r\n}\r\n","/**\r\n * No operation.\r\n */\r\nexport const noop = (): void => {}; // eslint-disable-line no-empty-function, @typescript-eslint/no-empty-function\r\n","import { AnyFunction } from '../../../types';\r\n\r\n\r\n/**\r\n * Invokes the callback on the next tick.\r\n *\r\n * @param callback - A callback function.\r\n */\r\nexport const nextTick: ( callback: AnyFunction ) => ReturnType<typeof setTimeout> = setTimeout;\r\n","/**\r\n * The arias of `window.requestAnimationFrame()`.\r\n */\r\nexport function raf( func: FrameRequestCallback ): number {\r\n  return requestAnimationFrame( func );\r\n}\r\n","import { AnyFunction } from '../../types';\r\nimport { apply } from '../function';\r\n\r\n\r\n/**\r\n * The alias of the type check function.\r\n *\r\n * @param type    - A type.\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is the specified type.\r\n */\r\nfunction typeOf( type: string, subject: unknown ): boolean {\r\n  return typeof subject === type;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\r\nexport function isObject( subject: unknown ): subject is object {\r\n  return ! isNull( subject ) && typeOf( 'object', subject );\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\r\nexport const isArray: <T>( subject: unknown ) => subject is T[] = Array.isArray;\r\n\r\n/**\r\n * Checks if the given subject is a function or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a function, or otherwise `false`.\r\n */\r\nexport const isFunction = <( subject: unknown ) => subject is AnyFunction>apply( typeOf, 'function' );\r\n\r\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\r\nexport const isString = <( subject: unknown ) => subject is string>apply( typeOf, 'string' );\r\n\r\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\r\nexport const isUndefined = <( subject: unknown ) => subject is undefined>apply( typeOf, 'undefined' );\r\n\r\n/**\r\n * Checks if the given subject is `null` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `null`, or otherwise `false`.\r\n */\r\nexport function isNull( subject: unknown ): subject is null {\r\n  return subject === null;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\r\n */\r\nexport function isHTMLElement( subject: unknown ): subject is HTMLElement {\r\n  return subject instanceof HTMLElement;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLButtonElement or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLButtonElement, or otherwise `false`.\r\n */\r\nexport function isHTMLButtonElement( subject: unknown ): subject is HTMLButtonElement {\r\n  return subject instanceof HTMLButtonElement;\r\n}\r\n","import { isArray } from '../../type/type';\r\n\r\n\r\n/**\r\n * Push the provided value to an array if the value is not an array.\r\n *\r\n * @param value - A value to push.\r\n *\r\n * @return An array containing the value, or the value itself if it is already an array.\r\n */\r\nexport function toArray<T>( value: T | T[] ): T[] {\r\n  return isArray( value ) ? value : [ value ];\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * The extended `Array#forEach` method that accepts a single value as an argument.\r\n *\r\n * @param values   - A value or values to iterate over.\r\n * @param iteratee - An iteratee function.\r\n */\r\nexport function forEach<T>( values: T | T[], iteratee: ( value: T, index: number, array: T[] ) => void ): void {\r\n  toArray( values ).forEach( iteratee );\r\n}\r\n","/**\r\n * Checks if the array includes the value or not.\r\n * `Array#includes` is not supported by IE.\r\n *\r\n * @param array - An array.\r\n * @param value - A value to search for.\r\n *\r\n * @return `true` if the array includes the value, or otherwise `false`.\r\n */\r\nexport function includes<T>( array: T[], value: T ): boolean {\r\n  return array.indexOf( value ) > -1;\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * Extended `Array#push()` that accepts an item or an array with items.\r\n *\r\n * @param array - An array to push items.\r\n * @param items - An item or items to push.\r\n *\r\n * @return A provided array itself.\r\n */\r\nexport function push<T>( array: T[], items: T | T[] ): T[] {\r\n  array.push( ...toArray( items ) );\r\n  return array;\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Toggles the provided class or classes by following the `add` boolean.\r\n *\r\n * @param elm     - An element whose classes are toggled.\r\n * @param classes - A class or class names.\r\n * @param add     - Whether to add or remove a class.\r\n */\r\nexport function toggleClass( elm: Element, classes: string | string[], add: boolean ): void {\r\n  if ( elm ) {\r\n    forEach( classes, name => {\r\n      if ( name ) {\r\n        elm.classList[ add ? 'add' : 'remove' ]( name );\r\n      }\r\n    } );\r\n  }\r\n}\r\n","import { isString } from '../../type/type';\r\nimport { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\r\nexport function addClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, isString( classes ) ? classes.split( ' ' ) : classes, true );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\r\nexport function append( parent: Element, children: Node | Node[] ): void {\r\n  forEach( children, parent.appendChild.bind( parent ) );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Inserts a node or nodes before the specified reference node.\r\n *\r\n * @param nodes - A node or nodes to insert.\r\n * @param ref   - A reference node.\r\n */\r\nexport function before( nodes: Node | Node[], ref: Node | null ): void {\r\n  forEach( nodes, node => {\r\n    const parent = ( ref || node ).parentNode;\r\n\r\n    if ( parent ) {\r\n      parent.insertBefore( node, ref );\r\n    }\r\n  } );\r\n}\r\n","import { isHTMLElement } from '../../type/type';\r\n\r\n\r\n/**\r\n * Checks if the element can be selected by the provided selector or not.\r\n *\r\n * @param elm      - An element to check.\r\n * @param selector - A selector to test.\r\n *\r\n * @return `true` if the selector matches the element, or otherwise `false`.\r\n */\r\nexport function matches( elm: Element | EventTarget, selector: string ): boolean {\r\n  return isHTMLElement( elm ) && ( elm[ 'msMatchesSelector' ] || elm.matches ).call( elm, selector );\r\n}\r\n","import { slice } from '../../arrayLike';\r\nimport { matches } from '../matches/matches';\r\n\r\n\r\n/**\r\n * Finds children that has the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - Optional. A selector to filter children.\r\n *\r\n * @return An array with filtered children.\r\n */\r\nexport function children<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E[] {\r\n  const children = parent ? slice( parent.children ) as E[] : [];\r\n  return selector ? children.filter( child => matches( child, selector ) ) : children;\r\n}\r\n","import { children } from '../children/children';\r\n\r\n\r\n/**\r\n * Returns a child element that matches the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return A matched child element if available, or otherwise `undefined`.\r\n */\r\nexport function child<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E | undefined {\r\n  return selector ? children<E>( parent, selector )[ 0 ] : parent.firstElementChild as E;\r\n}\r\n","/**\r\n * An alias of Object.keys\r\n */\r\nexport const ownKeys = Object.keys;","import { ownKeys } from '../ownKeys/ownKeys';\r\n\r\n\r\n/**\r\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\r\n *\r\n * @param object   - An object to iterate over.\r\n * @param iteratee - An iteratee function that takes the value and key as arguments.\r\n * @param right    - If `true`, the method iterates over the object from the end like `forEachRight()`.\r\n *\r\n * @return A provided object itself.\r\n */\r\nexport function forOwn<T extends object>(\r\n  object: T,\r\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void,\r\n  right?: boolean\r\n): T {\r\n  if ( object ) {\r\n    let keys = ownKeys( object );\r\n    keys = right ? keys.reverse() : keys;\r\n\r\n    for ( let i = 0; i < keys.length; i++ ) {\r\n      const key = keys[ i ];\r\n\r\n      if ( key !== '__proto__' ) {\r\n        if ( iteratee( object[ key ], key ) === false ) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return object;\r\n}\r\n","import { Cast, Head, Push, Resolve, Shift } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Assigns U to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - An object to assign.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Assign<T, U> = Omit<T, keyof U> & U;\r\n\r\n/**\r\n * Recursively assigns U[] to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - A tuple contains objects.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Assigned<T extends object, U extends object[], N extends number, C extends any[] = []> = {\r\n  0: T,\r\n  1: Assigned<Assign<T, Head<U>>, Shift<U>, N, Push<C>>,\r\n}[ C['length'] extends N ? 0 : 1 ] extends infer A ? Cast<A, any> : never;\r\n\r\nexport function assign<T extends object>( object: T ): T;\r\n\r\nexport function assign<T extends object, U extends object[]>(\r\n  object: T,\r\n  ...sources: U\r\n): Resolve<Assigned<T, U, U['length']>>\r\n\r\n/**\r\n * Assigns all own enumerable properties of all source objects to the provided object.\r\n * `undefined` in source objects will be skipped.\r\n *\r\n * @param object - An object to assign properties to.\r\n *\r\n * @return An object assigned properties of the sources to.\r\n */\r\nexport function assign<T extends object>( object: T ): any {\r\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n  slice( arguments, 1 ).forEach( source => {\r\n    forOwn( source, ( value, key ) => {\r\n      object[ key ] = source[ key ];\r\n    } );\r\n  } );\r\n\r\n  return object;\r\n}\r\n","import { Cast, Head, Push, Resolve, Shift } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\nimport { isArray, isObject } from '../../type/type';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Merges U to T.\r\n *\r\n * @typeParam T - An object to merge U into.\r\n * @typeParam U - An object to merge properties from.\r\n *\r\n * @return A merged object type.\r\n */\r\nexport type Merge<T extends object, U extends object> = Omit<T, keyof U> & {\r\n  [ K in ( keyof T & keyof U ) ]: U[ K ] extends object\r\n    ? U[ K ] extends any[]\r\n      ? U[ K ]\r\n      : T[ K ] extends object\r\n        ? Merge<T[ K ], U[ K ]> extends infer A ? Resolve<Cast<A, object>> : never\r\n        : U[ K ]\r\n    : U[ K ];\r\n} & Omit<U, keyof T>;\r\n\r\n/**\r\n * Recursively merges U[] to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - A tuple contains objects.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Merged<T extends object, U extends object[], N extends number, C extends any[] = []> = {\r\n  0: T,\r\n  1: Merged<Merge<T, Head<U>>, Shift<U>, N, Push<C>>,\r\n}[ C['length'] extends N ? 0 : 1 ] extends infer A ? Cast<A, any> : never;\r\n\r\nexport function merge<T extends object>( object: T ): T;\r\n\r\nexport function merge<T extends object, U extends object[]>(\r\n  object: T,\r\n  ...sources: U\r\n): Resolve<Merged<T, U, U['length']>>\r\n\r\n/**\r\n * Recursively merges source properties to the object.\r\n * Be aware that this method does not merge arrays. They are just duplicated by `slice()`.\r\n *\r\n * @param object - An object to merge properties to.\r\n *\r\n * @return A new object with merged properties.\r\n */\r\nexport function merge<T extends object>( object: T ): any {\r\n  // eslint-disable-next-line prefer-rest-params\r\n  slice( arguments, 1 ).forEach( source => {\r\n    forOwn( source, ( value, key ) => {\r\n      if ( isArray( value ) ) {\r\n        object[ key ] = value.slice();\r\n      } else if ( isObject( value ) ) {\r\n        object[ key ] = merge( {}, isObject( object[ key ] ) ? object[ key ] : {}, value );\r\n      } else {\r\n        object[ key ] = value;\r\n      }\r\n    } );\r\n  } );\r\n\r\n  return object;\r\n}\r\n","import { toArray } from '../../array';\r\nimport { ownKeys } from '../ownKeys/ownKeys';\r\n\r\n\r\n/**\r\n * Deletes specified own keys from the object.\r\n *\r\n * @param object - An object.\r\n * @param keys   - A key or keys to delete. If not specified, all own enumerable keys will be deleted.\r\n */\r\nexport function omit( object: object, keys?: string | string[] ): void {\r\n  toArray( keys || ownKeys( object ) ).forEach( key => {\r\n    delete object[ key ];\r\n  } );\r\n}","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes attributes from the element.\r\n *\r\n * @param elms  - An element or elements.\r\n * @param attrs - An attribute or attributes to remove.\r\n */\r\nexport function removeAttribute( elms: Element | Element[], attrs: string | string[] ): void {\r\n  forEach( elms, elm => {\r\n    forEach( attrs, attr => {\r\n      elm && elm.removeAttribute( attr );\r\n    } );\r\n  } );\r\n}\r\n","import { forEach } from '../../array';\r\nimport { forOwn } from '../../object';\r\nimport { isNull, isObject } from '../../type/type';\r\nimport { removeAttribute } from '../removeAttribute/removeAttribute';\r\n\r\n\r\nexport function setAttribute( elms: Element | Element[], attr: string, value: string | number | boolean ): void;\r\nexport function setAttribute( elms: Element | Element[], attrs: Record<string, string | number | boolean> ): void;\r\n\r\n/**\r\n * Sets attribute/attributes to the element or elements.\r\n * If the value is `null` or an empty string, the attribute will be removed.\r\n *\r\n * @param elms  - An element or an array with elements.\r\n * @param attrs - An attribute name of an object with pairs of a name and a value.\r\n * @param value - A value to set.\r\n */\r\nexport function setAttribute(\r\n  elms: Element | Element[],\r\n  attrs: string | Record<string, string | number | boolean>,\r\n  value?: string | number | boolean\r\n): void {\r\n  if ( isObject( attrs ) ) {\r\n    forOwn( attrs, ( value, name ) => {\r\n      setAttribute( elms, name, value );\r\n    } );\r\n  } else {\r\n    forEach( elms, elm => {\r\n      isNull( value ) || value === '' ? removeAttribute( elm, attrs ) : elm.setAttribute( attrs, String( value ) );\r\n    } );\r\n  }\r\n}\r\n","import { isString } from '../../type/type';\r\nimport { addClass } from '../addClass/addClass';\r\nimport { append } from '../append/append';\r\nimport { setAttribute } from '../setAttribute/setAttribute';\r\n\r\n\r\nexport function create<K extends keyof HTMLElementTagNameMap>(\r\n  tag: K,\r\n  attrs?: Record<string, string | number | boolean> | string,\r\n  parent?: HTMLElement\r\n): HTMLElementTagNameMap[ K ];\r\n\r\nexport function create(\r\n  tag: string,\r\n  attrs?: Record<string, string | number | boolean> | string,\r\n  parent?: HTMLElement\r\n): HTMLElement;\r\n\r\n/**\r\n * Creates a HTML element.\r\n *\r\n * @param tag    - A tag name.\r\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\r\n * @param parent - Optional. A parent element where the created element is appended.\r\n */\r\nexport function create<K extends keyof HTMLElementTagNameMap>(\r\n  tag: K,\r\n  attrs?: Record<string, string | number | boolean> | string,\r\n  parent?: HTMLElement\r\n): HTMLElementTagNameMap[ K ] {\r\n  const elm = document.createElement( tag );\r\n\r\n  if ( attrs ) {\r\n    isString( attrs ) ? addClass( elm, attrs ) : setAttribute( elm, attrs );\r\n  }\r\n\r\n  parent && append( parent, elm );\r\n\r\n  return elm;\r\n}\r\n","import { isNull, isUndefined } from '../../type/type';\r\n\r\n\r\nexport function style<K extends keyof CSSStyleDeclaration>(\r\n  elm: HTMLElement,\r\n  prop: K,\r\n): CSSStyleDeclaration[ K ];\r\n\r\nexport function style(\r\n  elm: HTMLElement,\r\n  prop: string,\r\n): string;\r\n\r\nexport function style(\r\n  elm: HTMLElement,\r\n  prop: string,\r\n  value: string | number\r\n): void;\r\n\r\n\r\n/**\r\n * Applies inline styles to the provided element by an object literal.\r\n *\r\n * @param elm   - An element to apply styles to.\r\n * @param prop  - An object literal with styles or a property name.\r\n * @param value - A value to set.\r\n */\r\nexport function style(\r\n  elm: HTMLElement,\r\n  prop: string,\r\n  value?: string | number\r\n): string | void {\r\n  if ( isUndefined( value ) ) {\r\n    return getComputedStyle( elm )[ prop ];\r\n  }\r\n\r\n  if ( ! isNull( value ) ) {\r\n    elm.style[ prop ] = `${ value }`;\r\n  }\r\n}\r\n","import { style } from '../style/style';\r\n\r\n\r\n/**\r\n * Sets the `display` CSS value to the element.\r\n *\r\n * @param elm     - An element to set a new value to.\r\n * @param display - A new `display` value.\r\n */\r\nexport function display( elm: HTMLElement, display: string ): void {\r\n  style( elm, 'display', display );\r\n}\r\n","/**\r\n * Focuses the provided element without scrolling the ascendant element.\r\n *\r\n * @param elm - An element to focus.\r\n */\r\nexport function focus( elm: HTMLElement ): void {\r\n  elm[ 'setActive' ] && elm[ 'setActive' ]() || elm.focus( { preventScroll: true } );\r\n}\r\n","/**\r\n * Returns the specified attribute value.\r\n *\r\n * @param elm  - An element.\r\n * @param attr - An attribute to get.\r\n */\r\nexport function getAttribute( elm: Element, attr: string ): string | null {\r\n  return elm.getAttribute( attr );\r\n}\r\n","/**\r\n * Checks if the element contains the specified class or not.\r\n *\r\n * @param elm       - An element to check.\r\n * @param className - A class name that may be contained by the element.\r\n *\r\n * @return `true` if the element contains the class, or otherwise `false`.\r\n */\r\nexport function hasClass( elm: Element, className: string ): boolean {\r\n  return elm && elm.classList.contains( className );\r\n}\r\n","/**\r\n * Returns a DOMRect object of the provided element.\r\n *\r\n * @param target - An element.\r\n */\r\nexport function rect( target: Element ): DOMRect {\r\n  return target.getBoundingClientRect();\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes the provided node from its parent.\r\n *\r\n * @param nodes - A node or nodes to remove.\r\n */\r\nexport function remove( nodes: Node | Node[] ): void {\r\n  forEach( nodes, node => {\r\n    if ( node && node.parentNode ) {\r\n      node.parentNode.removeChild( node );\r\n    }\r\n  } );\r\n}\r\n","import { child } from '../child/child';\r\n\r\n\r\n/**\r\n * Parses the provided HTML string and returns the first element.\r\n *\r\n * @param html - An HTML string to parse.\r\n *\r\n * @return An Element on success, or otherwise `undefined`.\r\n */\r\nexport function parseHtml<E extends HTMLElement>( html: string ): E | undefined {\r\n  return child<E>( new DOMParser().parseFromString( html, 'text/html' ).body );\r\n}\r\n","/**\r\n * Call the `preventDefault()` of the provided event.\r\n *\r\n * @param e               - An Event object.\r\n * @param stopPropagation - Optional. Whether to stop the event propagation or not.\r\n */\r\nexport function prevent( e: Event, stopPropagation?: boolean ): void {\r\n  e.preventDefault();\r\n\r\n  if ( stopPropagation ) {\r\n    e.stopPropagation();\r\n    e.stopImmediatePropagation();\r\n  }\r\n}\r\n","/**\r\n * Returns an element that matches the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return A found element or `null`.\r\n */\r\nexport function query<E extends Element = Element>( parent: Element | Document, selector: string ): E | null {\r\n  return parent && parent.querySelector( selector );\r\n}\r\n","import { slice } from '../../arrayLike';\r\n\r\n\r\n/**\r\n * Returns elements that match the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return An array with matched elements.\r\n */\r\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector?: string ): E[] {\r\n  return selector ? slice<E>( parent.querySelectorAll( selector ) ) : [];\r\n}\r\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Removes classes from the element.\r\n *\r\n * @param elm     - An element to remove classes from.\r\n * @param classes - Classes to remove.\r\n */\r\nexport function removeClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, false );\r\n}\r\n","/**\r\n * Extracts the timestamp from the event object.\r\n *\r\n * @param e - An Event object.\r\n */\r\nexport function timeOf( e: Event ): number {\r\n  return e.timeStamp;\r\n}","import { isString } from '../../type/type';\r\n\r\n\r\n/**\r\n * Appends `px` to the provided number.\r\n * If the value is already string, just returns it.\r\n *\r\n * @param value - A value to append `px` to.\r\n *\r\n * @return A string with the CSS unit.\r\n */\r\nexport function unit( value: number | string ): string {\r\n  return isString( value ) ? value : value ? `${ value }px` : '';\r\n}\r\n","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message?: string ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\r\n  }\r\n}\r\n","export const { min, max, floor, ceil, abs } = Math;\r\n","import { abs } from '../math/math';\r\n\r\n\r\n/**\r\n * Checks if the provided 2 numbers are approximately equal or not.\r\n *\r\n * @param x       - A number.\r\n * @param y       - Another number to compare.\r\n * @param epsilon - An accuracy that defines the approximation.\r\n *\r\n * @return `true` if 2 numbers are considered to be equal, or otherwise `false`.\r\n */\r\nexport function approximatelyEqual( x: number, y: number, epsilon: number ): boolean {\r\n  return abs( x - y ) < epsilon;\r\n}\r\n","import { max, min } from '../math/math';\r\n\r\n\r\n/**\r\n * Checks if the subject number is between `minOrMax` and `maxOrMin`.\r\n *\r\n * @param number    - A subject number to check.\r\n * @param minOrMax  - A min or max number.\r\n * @param maxOrMin  - A max or min number.\r\n * @param exclusive - Optional. Whether to exclude `x` or `y`.\r\n */\r\nexport function between( number: number, minOrMax: number, maxOrMin: number, exclusive?: boolean ): boolean {\r\n  const minimum = min( minOrMax, maxOrMin );\r\n  const maximum = max( minOrMax, maxOrMin );\r\n  return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;\r\n}\r\n","import { max, min } from '../math/math';\r\n\r\n\r\n/**\r\n * Clamps a number.\r\n *\r\n * @param number - A subject number to check.\r\n * @param x      - A min or max number.\r\n * @param y      - A min or max number.\r\n */\r\nexport function clamp( number: number, x: number, y: number ): number {\r\n  const minimum = min( x, y );\r\n  const maximum = max( x, y );\r\n  return min( max( minimum, number ), maximum );\r\n}\r\n","/**\r\n * Returns the sign of the provided number.\r\n *\r\n * @param x - A number.\r\n *\r\n * @return `1` for positive numbers, `-1` for negative numbers, or `0` for `0`.\r\n */\r\nexport function sign( x: number ): number {\r\n  return +( x > 0 ) - +( x < 0 );\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Formats a string.\r\n *\r\n * @param string       - A string to format.\r\n * @param replacements - A replacement or replacements.\r\n *\r\n * @return A formatted string.\r\n */\r\nexport function format( string: string, replacements: string | number | Array<string | number> ): string {\r\n  forEach( replacements, replacement => {\r\n    string = string.replace( '%s', `${ replacement }` );\r\n  } );\r\n\r\n  return string;\r\n}\r\n","/**\r\n * Pads the number with 0.\r\n *\r\n * @param number - A number to pad.\r\n *\r\n * @return string - Padded number.\r\n */\r\nexport function pad( number: number ): string {\r\n  return number < 10 ? `0${ number }` : `${ number }`;\r\n}\r\n","import { pad } from '../pad/pad';\r\n\r\n\r\n/**\r\n * Stores unique IDs.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst ids: Record<string, number> = {};\r\n\r\n/**\r\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\r\n *\r\n * @param prefix - A prefix for the ID.\r\n */\r\nexport function uniqueId( prefix: string ): string {\r\n  return `${ prefix }${ pad( ( ids[ prefix ] = ( ids[ prefix ] || 0 ) + 1 ) ) }`;\r\n}\r\n","import { AnyFunction } from '../../types';\r\nimport { empty, forEach } from '../../utils';\r\n\r\n\r\n/**\r\n * The type for an EventTarget or an array with EventTarget objects.\r\n *\r\n * @since 4.0.0\r\n */\r\ntype EventTargets = EventTarget | EventTarget[];\r\n\r\n/**\r\n * The interface for the EventBinder object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface EventBinderObject {\r\n  bind( target: EventTargets, events: string | string[], callback: AnyFunction, options?: AddEventListenerOptions ): void\r\n  unbind( target: EventTarget | EventTarget[], events: string | string[], callback?: AnyFunction ): void;\r\n  dispatch<T>( target: EventTarget, event: string, detail?: T ): void;\r\n  destroy(): void;\r\n}\r\n\r\n/**\r\n * The constructor function to provide methods to subscribe native events.\r\n *\r\n * @since 4.0.0\r\n * @constructor\r\n *\r\n * @return An EventBinder object.\r\n */\r\nexport function EventBinder(): EventBinderObject {\r\n  /**\r\n   * Stores all handlers that listen to native events.\r\n   * `[ target, event, namespace, callback, remover ]`\r\n   */\r\n  let listeners: [ EventTarget, string, string | undefined, AnyFunction, () => void ][] = [];\r\n\r\n  /**\r\n   * Listens to native events.\r\n   * - `destroy()` can unsubscribe all events.\r\n   * - In IE, mediaQueryList does not inherit EventTarget,\r\n   *   and only supports deprecated `addListener` and `removeListener`.\r\n   *\r\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event or events to listen to.\r\n   * @param callback - A callback function.\r\n   * @param options  - Optional. The options to pass to the `addEventListener` function.\r\n   */\r\n  function bind(\r\n    targets: EventTargets,\r\n    events: string | string[],\r\n    callback: AnyFunction,\r\n    options?: AddEventListenerOptions\r\n  ): void {\r\n    forEachEvent( targets, events, ( target, event, namespace ) => {\r\n      const isEventTarget = 'addEventListener' in target;\r\n      const remover = isEventTarget\r\n        ? target.removeEventListener.bind( target, event, callback, options )\r\n        : target[ 'removeListener' ].bind( target, callback );\r\n\r\n      isEventTarget ? target.addEventListener( event, callback, options ) : target[ 'addListener' ]( callback );\r\n      listeners.push( [ target, event, namespace, callback, remover ] );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes the event handler.\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event name or names to remove.\r\n   * @param callback - Optional. Specify the callback to remove.\r\n   */\r\n  function unbind( targets: EventTargets, events: string | string[], callback?: AnyFunction ): void {\r\n    forEachEvent( targets, events, ( target, event, namespace ) => {\r\n      listeners = listeners.filter( listener => {\r\n        if ( listener[ 0 ] === target\r\n          && listener[ 1 ] === event\r\n          && listener[ 2 ] === namespace\r\n          && ( ! callback || listener[ 3 ] === callback )\r\n        ) {\r\n          listener[ 4 ]();\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Dispatches a custom event of the target.\r\n   *\r\n   * @param target - An event target.\r\n   * @param type   - An event type.\r\n   * @param detail - Optional. The `detail` object of the event.\r\n   *\r\n   * @return An event object.\r\n   */\r\n  function dispatch<T>( target: EventTarget, type: string, detail?: T ): CustomEvent {\r\n    let e: CustomEvent;\r\n    const bubbles = true;\r\n\r\n    if ( typeof CustomEvent === 'function' ) {\r\n      e = new CustomEvent( type, { bubbles, detail } );\r\n    } else {\r\n      e = document.createEvent( 'CustomEvent' );\r\n      e.initCustomEvent( type, bubbles, false, detail );\r\n    }\r\n\r\n    target.dispatchEvent( e );\r\n    return e;\r\n  }\r\n\r\n  /**\r\n   * Iterates over each target and event.\r\n   *\r\n   * @param targets  - A target element, the window object or the document object.\r\n   * @param events   - An event name or names.\r\n   * @param iteratee - An iteratee function.\r\n   */\r\n  function forEachEvent(\r\n    targets: EventTargets,\r\n    events: string | string[],\r\n    iteratee: ( target: EventTarget, event: string, namespace: string | undefined ) => void\r\n  ): void {\r\n    forEach( targets, target => {\r\n      target && forEach( events, events => {\r\n        events.split( ' ' ).forEach( eventNS => {\r\n          const fragment = eventNS.split( '.' );\r\n          iteratee( target, fragment[ 0 ], fragment[ 1 ] );\r\n        } );\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes all listeners.\r\n   */\r\n  function destroy(): void {\r\n    listeners.forEach( data => { data[ 4 ]() } );\r\n    empty( listeners );\r\n  }\r\n\r\n  return {\r\n    bind,\r\n    unbind,\r\n    dispatch,\r\n    destroy,\r\n  };\r\n}\r\n","export const EVENT_MOUNTED            = 'mounted';\r\nexport const EVENT_READY              = 'ready';\r\nexport const EVENT_MOVE               = 'move';\r\nexport const EVENT_MOVED              = 'moved';\r\nexport const EVENT_SHIFTED            = 'shifted';\r\nexport const EVENT_CLICK              = 'click';\r\nexport const EVENT_ACTIVE             = 'active';\r\nexport const EVENT_INACTIVE           = 'inactive';\r\nexport const EVENT_VISIBLE            = 'visible';\r\nexport const EVENT_HIDDEN             = 'hidden';\r\nexport const EVENT_SLIDE_KEYDOWN      = 'slide:keydown';\r\nexport const EVENT_REFRESH            = 'refresh';\r\nexport const EVENT_UPDATED            = 'updated';\r\nexport const EVENT_RESIZE             = 'resize';\r\nexport const EVENT_RESIZED            = 'resized';\r\nexport const EVENT_DRAG               = 'drag';\r\nexport const EVENT_DRAGGING           = 'dragging';\r\nexport const EVENT_DRAGGED            = 'dragged';\r\nexport const EVENT_SCROLL             = 'scroll';\r\nexport const EVENT_SCROLLED           = 'scrolled';\r\nexport const EVENT_DESTROY            = 'destroy';\r\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\r\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\r\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\r\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\r\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\r\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\r\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\r\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\r\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\r\n\r\n","import { EVENT_DESTROY } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, EventMap } from '../../types';\r\nimport { apply, assign, isArray, slice, toArray } from '../../utils';\r\nimport { EventBinder, EventBinderObject } from '../EventBinder/EventBinder';\r\n\r\n\r\n/**\r\n * The interface for the EventInterface object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface EventInterfaceObject extends EventBinderObject {\r\n  on<K extends keyof EventMap>( event: K, callback: EventMap[ K ] ): void;\r\n  on( events: string | string[], callback: AnyFunction ): void;\r\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): void;\r\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): void\r\n  emit( event: string, ...args: any[] ): void;\r\n\r\n  /** @internal */\r\n  bus: DocumentFragment;\r\n}\r\n\r\n/**\r\n * The constructor function that provides interface for internal and native events.\r\n *\r\n * @since 3.0.0\r\n * @constructor\r\n *\r\n * @param Splide - A Splide instance.\r\n *\r\n * @return A collection of interface functions.\r\n */\r\nexport function EventInterface( Splide?: Splide ): EventInterfaceObject {\r\n  /**\r\n   * The document fragment for internal events.\r\n   * Provide the Splide instance to share the bus.\r\n   */\r\n  const bus = Splide ? Splide.event.bus : document.createDocumentFragment();\r\n\r\n  /**\r\n   * An event binder object.\r\n   */\r\n  const binder = EventBinder();\r\n\r\n  /**\r\n   * Listens to an internal event or events.\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\r\n   * @param callback - A callback function to register.\r\n   */\r\n  function on( events: string | string[], callback: AnyFunction ): void {\r\n    binder.bind( bus, toArray( events ).join( ' ' ), e => {\r\n      callback.apply( callback, isArray( e.detail ) ? e.detail : [] );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Triggers callback functions.\r\n   * This accepts additional arguments and passes them to callbacks.\r\n   *\r\n   * @param event - An event name.\r\n   */\r\n  function emit( event: string ): void {\r\n    // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n    binder.dispatch( bus, event, slice( arguments, 1 ) );\r\n  }\r\n\r\n  if ( Splide ) {\r\n    Splide.event.on( EVENT_DESTROY, binder.destroy );\r\n  }\r\n\r\n  return assign( binder, {\r\n    bus,\r\n    on,\r\n    off: apply( binder.unbind, bus ),\r\n    emit,\r\n  } );\r\n}","import { min, raf } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the returning value of the RequestInterval.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface RequestIntervalInterface {\r\n  start( resume?: boolean ): void;\r\n  pause(): void;\r\n  rewind(): void;\r\n  cancel(): void;\r\n  set( interval: number ): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * Requests interval like the native `setInterval()` with using `requestAnimationFrame`.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param interval   - The interval duration in milliseconds.\r\n * @param onInterval - The callback fired on every interval.\r\n * @param onUpdate   - Optional. Called on every animation frame, taking the progress rate.\r\n * @param limit      - Optional. Limits the number of interval.\r\n */\r\nexport function RequestInterval(\r\n  interval: number,\r\n  onInterval: () => void,\r\n  onUpdate?: ( rate: number ) => void,\r\n  limit?: number\r\n): RequestIntervalInterface {\r\n  const { now } = Date;\r\n\r\n  /**\r\n   * The time when the interval starts.\r\n   */\r\n  let startTime: number;\r\n\r\n  /**\r\n   * The current progress rate.\r\n   */\r\n  let rate = 0;\r\n\r\n  /**\r\n   * The animation frame ID.\r\n   */\r\n  let id: number;\r\n\r\n  /**\r\n   * Indicates whether the interval is currently paused or not.\r\n   */\r\n  let paused = true;\r\n\r\n  /**\r\n   * The loop count. This only works when the `limit` argument is provided.\r\n   */\r\n  let count = 0;\r\n\r\n  /**\r\n   * The update function called on every animation frame.\r\n   */\r\n  function update(): void {\r\n    if ( ! paused ) {\r\n      rate = interval ? min( ( now() - startTime ) / interval, 1 ) : 1;\r\n      onUpdate && onUpdate( rate );\r\n\r\n      if ( rate >= 1 ) {\r\n        onInterval();\r\n        startTime = now();\r\n\r\n        if ( limit && ++count >= limit ) {\r\n          return pause();\r\n        }\r\n      }\r\n\r\n      raf( update );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the interval.\r\n   *\r\n   * @param resume - Optional. Whether to resume the paused progress or not.\r\n   */\r\n  function start( resume?: boolean ): void {\r\n    ! resume && cancel();\r\n    startTime = now() - ( resume ? rate * interval : 0 );\r\n    paused    = false;\r\n    raf( update );\r\n  }\r\n\r\n  /**\r\n   * Pauses the interval.\r\n   */\r\n  function pause(): void {\r\n    paused = true;\r\n  }\r\n\r\n  /**\r\n   * Rewinds the current progress.\r\n   */\r\n  function rewind(): void {\r\n    startTime = now();\r\n    rate      = 0;\r\n\r\n    if ( onUpdate ) {\r\n      onUpdate( rate );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the interval.\r\n   */\r\n  function cancel() {\r\n    id && cancelAnimationFrame( id );\r\n    rate   = 0;\r\n    id     = 0;\r\n    paused = true;\r\n  }\r\n\r\n  /**\r\n   * Sets new interval duration.\r\n   *\r\n   * @param time - The interval duration in milliseconds.\r\n   */\r\n  function set( time: number ): void {\r\n    interval = time;\r\n  }\r\n\r\n  /**\r\n   * Checks if the interval is paused or not.\r\n   *\r\n   * @return `true` if the interval is paused, or otherwise `false`.\r\n   */\r\n  function isPaused(): boolean {\r\n    return paused;\r\n  }\r\n\r\n  return {\r\n    start,\r\n    rewind,\r\n    pause,\r\n    cancel,\r\n    set,\r\n    isPaused,\r\n  };\r\n}\r\n","import { includes, toArray } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the State object.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface StateObject {\r\n  set( state: number ): void;\r\n  is( states: number | number[] ): boolean;\r\n}\r\n\r\n/**\r\n * The function providing a super simple state system.\r\n *\r\n * @param initialState - Specifies the initial state.\r\n */\r\nexport function State( initialState: number ): StateObject {\r\n  /**\r\n   * The current state.\r\n   */\r\n  let state = initialState;\r\n\r\n  /**\r\n   * Sets a new state.\r\n   *\r\n   * @param value - A new state value.\r\n   */\r\n  function set( value: number ): void {\r\n    state = value;\r\n  }\r\n\r\n  /**\r\n   * Checks if the current state matches the provided one.\r\n   *\r\n   * @param states - A state to check.\r\n   *\r\n   * @return `true` if the current state is the provided one.\r\n   */\r\n  function is( states: number | number[] ): boolean {\r\n    return includes( toArray( states ), state );\r\n  }\r\n\r\n  return { set, is };\r\n}\r\n","const ARROW = 'Arrow';\r\nexport const ARROW_LEFT  = `${ ARROW }Left`;\r\nexport const ARROW_RIGHT = `${ ARROW }Right`;\r\nexport const ARROW_UP    = `${ ARROW }Up`;\r\nexport const ARROW_DOWN  = `${ ARROW }Down`;","/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP } from '../../constants/arrows';\r\nimport { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): string;\r\n  orient( value: number ): number;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  width     : [ 'height' ],\r\n  left      : [ 'top', 'right' ],\r\n  right     : [ 'bottom', 'left' ],\r\n  x         : [ 'y' ],\r\n  X         : [ 'Y' ],\r\n  Y         : [ 'X' ],\r\n  ArrowLeft : [ ARROW_UP, ARROW_RIGHT ],\r\n  ArrowRight: [ ARROW_DOWN, ARROW_LEFT ],\r\n};\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport function Direction( Splide: Splide, Components: Components, options: Options ): DirectionComponent {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop      - A property name to translate.\r\n   * @param axisOnly  - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\r\n   */\r\n  function resolve( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): string {\r\n    direction = direction || options.direction;\r\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n\r\n    return ORIENTATION_MAP[ prop ] && ORIENTATION_MAP[ prop ][ index ]\r\n      || prop.replace( /width|left|right/i, ( match, offset ) => {\r\n        const replacement = ORIENTATION_MAP[ match.toLowerCase() ][ index ] || match;\r\n        return offset > 0 ? replacement.charAt( 0 ).toUpperCase() + replacement.slice( 1 ) : replacement;\r\n      } );\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value - A value to orient.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient( value: number ): number {\r\n    return value * ( options.direction === RTL ? 1 : -1 );\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n  };\r\n}\r\n","export const ROLE      = 'role';\r\nexport const TAB_INDEX = 'tabindex';\r\nexport const DISABLED  = 'disabled';\r\n\r\nexport const ARIA_PREFIX          = 'aria-';\r\nexport const ARIA_CONTROLS        = `${ ARIA_PREFIX }controls`;\r\nexport const ARIA_CURRENT         = `${ ARIA_PREFIX }current`;\r\nexport const ARIA_SELECTED        = `${ ARIA_PREFIX }selected`;\r\nexport const ARIA_LABEL           = `${ ARIA_PREFIX }label`;\r\nexport const ARIA_LABELLEDBY      = `${ ARIA_PREFIX }labelledby`;\r\nexport const ARIA_HIDDEN          = `${ ARIA_PREFIX }hidden`;\r\nexport const ARIA_ORIENTATION     = `${ ARIA_PREFIX }orientation`;\r\nexport const ARIA_ROLEDESCRIPTION = `${ ARIA_PREFIX }roledescription`;\r\nexport const ARIA_LIVE            = `${ ARIA_PREFIX }live`;\r\nexport const ARIA_RELEVANT        = `${ ARIA_PREFIX }relevant`;\r\n\r\n/**\r\n * The array with all attributes to remove later.\r\n * Need to manually remove attributes that are not in this.\r\n * Note that removing aria-live disables the live region until the page reload.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ALL_ATTRIBUTES = [\r\n  ROLE,\r\n  TAB_INDEX,\r\n  DISABLED,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_LABEL,\r\n  ARIA_LABELLEDBY,\r\n  ARIA_HIDDEN,\r\n  ARIA_ORIENTATION,\r\n  ARIA_ROLEDESCRIPTION,\r\n];\r\n","import { PROJECT_CODE } from './project';\r\n\r\n\r\nexport const CLASS_ROOT            = PROJECT_CODE;\r\nexport const CLASS_TRACK           = `${ PROJECT_CODE }__track`;\r\nexport const CLASS_LIST            = `${ PROJECT_CODE }__list`;\r\nexport const CLASS_SLIDE           = `${ PROJECT_CODE }__slide`;\r\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS          = `${ PROJECT_CODE }__arrows`;\r\nexport const CLASS_ARROW           = `${ PROJECT_CODE }__arrow`;\r\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION      = `${ PROJECT_CODE }__pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS        = `${ PROJECT_CODE }__progress`;\r\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_TOGGLE          = `${ PROJECT_CODE }__toggle`;\r\nexport const CLASS_TOGGLE_PLAY     = `${ CLASS_TOGGLE }__play`;\r\nexport const CLASS_TOGGLE_PAUSE    = `${ CLASS_TOGGLE }__pause`;\r\nexport const CLASS_SPINNER         = `${ PROJECT_CODE }__spinner`;\r\nexport const CLASS_SR              = `${ PROJECT_CODE }__sr`;\r\nexport const CLASS_INITIALIZED     = 'is-initialized';\r\nexport const CLASS_ACTIVE          = 'is-active';\r\nexport const CLASS_PREV            = 'is-prev';\r\nexport const CLASS_NEXT            = 'is-next';\r\nexport const CLASS_VISIBLE         = 'is-visible';\r\nexport const CLASS_LOADING         = 'is-loading';\r\nexport const CLASS_FOCUS_IN        = 'is-focus-in';\r\n\r\n\r\n/**\r\n * The array with all status classes.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [\r\n  CLASS_ACTIVE,\r\n  CLASS_VISIBLE,\r\n  CLASS_PREV,\r\n  CLASS_NEXT,\r\n  CLASS_LOADING,\r\n  CLASS_FOCUS_IN,\r\n];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide     : CLASS_SLIDE,\r\n  clone     : CLASS_CLONE,\r\n  arrows    : CLASS_ARROWS,\r\n  arrow     : CLASS_ARROW,\r\n  prev      : CLASS_ARROW_PREV,\r\n  next      : CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page      : CLASS_PAGINATION_PAGE,\r\n  spinner   : CLASS_SPINNER,\r\n};\r\n","/**\r\n * The power of the friction.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION = 5;\r\n\r\n/**\r\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOG_INTERVAL = 200;\r\n\r\n/**\r\n * Start events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_DOWN_EVENTS = 'touchstart mousedown';\r\n\r\n/**\r\n * Update events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_MOVE_EVENTS = 'touchmove mousemove';\r\n\r\n/**\r\n * End events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_UP_EVENTS = 'touchend touchcancel mouseup';\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","import {\r\n  ALL_ATTRIBUTES,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_HIDDEN,\r\n  ARIA_LABEL,\r\n  ARIA_ROLEDESCRIPTION,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_CONTAINER,\r\n  CLASS_NEXT,\r\n  CLASS_PREV,\r\n  CLASS_VISIBLE,\r\n  STATUS_CLASSES,\r\n} from '../../constants/classes';\r\nimport {\r\n  EVENT_ACTIVE,\r\n  EVENT_CLICK,\r\n  EVENT_HIDDEN,\r\n  EVENT_INACTIVE,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SHIFTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_VISIBLE,\r\n} from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent } from '../../types';\r\nimport {\r\n  abs,\r\n  apply,\r\n  ceil,\r\n  child,\r\n  floor,\r\n  focus,\r\n  format,\r\n  getAttribute,\r\n  hasClass,\r\n  min,\r\n  pad,\r\n  queryAll,\r\n  rect,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  style as _style,\r\n  toggleClass,\r\n} from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Slide sub component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface  SlideComponent extends BaseComponent {\r\n  index: number;\r\n  slideIndex: number;\r\n  slide: HTMLElement;\r\n  container: HTMLElement;\r\n  isClone: boolean;\r\n  update(): void;\r\n  style( prop: string, value: string | number, useContainer?: boolean ): void\r\n  isWithin( from: number, distance: number ): boolean;\r\n}\r\n\r\n/**\r\n * The sub component for managing each slide.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param index      - A slide index.\r\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not a clone.\r\n * @param slide      - A slide element.\r\n *\r\n * @return A Slide sub component.\r\n */\r\nexport function Slide( Splide: Splide, index: number, slideIndex: number, slide: HTMLElement ): SlideComponent {\r\n  const event = EventInterface( Splide );\r\n  const { on, emit, bind } = event;\r\n  const { Components, root, options } = Splide;\r\n  const { isNavigation, updateOnMove, i18n, pagination, slideFocus } = options;\r\n  const { resolve } = Components.Direction;\r\n  const styles         = getAttribute( slide, 'style' );\r\n  const label          = getAttribute( slide, ARIA_LABEL );\r\n  const isClone        = slideIndex > -1;\r\n  const container      = child( slide, `.${ CLASS_CONTAINER }` );\r\n  const focusableNodes = queryAll( slide, options.focusableNodes || '' );\r\n\r\n  /**\r\n   * Turns into `true` when the component is destroyed.\r\n   */\r\n  let destroyed: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount( this: SlideComponent ): void {\r\n    if ( ! isClone ) {\r\n      slide.id = `${ root.id }-slide${ pad( index + 1 ) }`;\r\n      setAttribute( slide, ROLE, pagination ? 'tabpanel' : 'group' );\r\n      setAttribute( slide, ARIA_ROLEDESCRIPTION, i18n.slide );\r\n      setAttribute( slide, ARIA_LABEL, label || format( i18n.slideLabel, [ index + 1, Splide.length ] ) );\r\n    }\r\n\r\n    listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    bind( slide, 'click', apply( emit, EVENT_CLICK, self ) );\r\n    bind( slide, 'keydown', apply( emit, EVENT_SLIDE_KEYDOWN, self ) );\r\n    on( [ EVENT_MOVED, EVENT_SHIFTED, EVENT_SCROLLED ], update );\r\n    on( EVENT_NAVIGATION_MOUNTED, initNavigation );\r\n\r\n    if ( updateOnMove ) {\r\n      on( EVENT_MOVE, onMove );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    destroyed = true;\r\n    event.destroy();\r\n    removeClass( slide, STATUS_CLASSES );\r\n    removeAttribute( slide, ALL_ATTRIBUTES );\r\n    setAttribute( slide, 'style', styles );\r\n    setAttribute( slide, ARIA_LABEL, label || '' );\r\n  }\r\n\r\n  /**\r\n   * Initializes slides as navigation.\r\n   */\r\n  function initNavigation(): void {\r\n    const controls = Splide.splides.map( target => {\r\n      const Slide = target.splide.Components.Slides.getAt( index );\r\n      return Slide ? Slide.slide.id : '';\r\n    } ).join( ' ' );\r\n\r\n    setAttribute( slide, ARIA_LABEL, format( i18n.slideX, ( isClone ? slideIndex : index ) + 1 ) );\r\n    setAttribute( slide, ARIA_CONTROLS, controls );\r\n    setAttribute( slide, ROLE, slideFocus ? 'button' : '' );\r\n    slideFocus && removeAttribute( slide, ARIA_ROLEDESCRIPTION );\r\n  }\r\n\r\n  /**\r\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\r\n   */\r\n  function onMove(): void {\r\n    if ( ! destroyed ) {\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates attribute and classes of the slide.\r\n   */\r\n  function update(): void {\r\n    if ( ! destroyed ) {\r\n      const { index: curr } = Splide;\r\n\r\n      updateActivity();\r\n      updateVisibility();\r\n      toggleClass( slide, CLASS_PREV, index === curr - 1 );\r\n      toggleClass( slide, CLASS_NEXT, index === curr + 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the status related with activity.\r\n   */\r\n  function updateActivity(): void {\r\n    const active = isActive();\r\n\r\n    if ( active !== hasClass( slide, CLASS_ACTIVE ) ) {\r\n      toggleClass( slide, CLASS_ACTIVE, active );\r\n      setAttribute( slide, ARIA_CURRENT, isNavigation && active || '' );\r\n      emit( active ? EVENT_ACTIVE : EVENT_INACTIVE, self );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates classes and attributes related with visibility.\r\n   * - Do not update aria-hidden on shifting to avoid Window Narrator from start reading contents.\r\n   * - If the slide has focus and gets hidden, moves focus to the active slide.\r\n   */\r\n  function updateVisibility(): void {\r\n    const visible = isVisible();\r\n    const hidden = ! visible && ( ! isActive() || isClone );\r\n\r\n    if ( ! Splide.state.is( [ MOVING, SCROLLING ] ) ) {\r\n      setAttribute( slide, ARIA_HIDDEN, hidden || '' );\r\n    }\r\n\r\n    setAttribute( focusableNodes, TAB_INDEX, hidden ? -1 : '' );\r\n\r\n    if ( slideFocus ) {\r\n      setAttribute( slide, TAB_INDEX, hidden ? -1 : 0 );\r\n    }\r\n\r\n    if ( visible !== hasClass( slide, CLASS_VISIBLE ) ) {\r\n      toggleClass( slide, CLASS_VISIBLE, visible );\r\n      emit( visible ? EVENT_VISIBLE : EVENT_HIDDEN, self );\r\n    }\r\n\r\n    if ( ! visible && document.activeElement === slide ) {\r\n      const Slide = Components.Slides.getAt( Splide.index );\r\n      Slide && focus( Slide.slide );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to the slider or the container.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: string, value: string | number, useContainer?: boolean ): void {\r\n    _style( ( useContainer && container ) || slide, prop, value );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is active or not.\r\n   *\r\n   * @return `true` if the slide is active.\r\n   */\r\n  function isActive(): boolean {\r\n    const { index: curr } = Splide;\r\n    return curr === index || ( options.cloneStatus && curr === slideIndex );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is visible or not.\r\n   */\r\n  function isVisible(): boolean {\r\n    if ( Splide.is( FADE ) ) {\r\n      return isActive();\r\n    }\r\n\r\n    const trackRect = rect( Components.Elements.track );\r\n    const slideRect = rect( slide );\r\n    const left      = resolve( 'left' );\r\n    const right     = resolve( 'right' );\r\n\r\n    return floor( trackRect[ left ] ) <= ceil( slideRect[ left ] )\r\n      && floor( slideRect[ right ] ) <= ceil( trackRect[ right ] );\r\n  }\r\n\r\n  /**\r\n   * Calculates how far this slide is from another slide and\r\n   * returns `true` if the distance is within the given number.\r\n   *\r\n   * @param from     - An index of a base slide.\r\n   * @param distance - `true` if the slide is within this number.\r\n   *\r\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\r\n   */\r\n  function isWithin( from: number, distance: number ): boolean {\r\n    let diff = abs( from - index );\r\n\r\n    if ( ! isClone && ( options.rewind || Splide.is( LOOP ) ) ) {\r\n      diff = min( diff, Splide.length - diff );\r\n    }\r\n\r\n    return diff <= distance;\r\n  }\r\n\r\n  const self = {\r\n    index,\r\n    slideIndex,\r\n    slide,\r\n    container,\r\n    isClone,\r\n    mount,\r\n    destroy,\r\n    update,\r\n    style,\r\n    isWithin,\r\n  };\r\n\r\n  return self;\r\n}\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the autoplay interval duration.\r\n *\r\n * @since 3.5.0\r\n */\r\nexport const INTERVAL_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-interval`;\r\n","/**\r\n * AddEventListenerOptions for listeners that may prevent the browser scroll.\r\n *\r\n * @since 3.4.1\r\n */\r\nexport const SCROLL_LISTENER_OPTIONS = { passive: false, capture: true };\r\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP } from '../../../constants/arrows';\r\nimport { isString } from '../../type/type';\r\n\r\n\r\n/**\r\n * The map to associate a non-standard name to the standard one.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport const NORMALIZATION_MAP = {\r\n  Spacebar: ' ',\r\n  Right   : ARROW_RIGHT,\r\n  Left    : ARROW_LEFT,\r\n  Up      : ARROW_UP,\r\n  Down    : ARROW_DOWN,\r\n};\r\n\r\n/**\r\n * Normalizes the key.\r\n *\r\n * @param key - A string or a KeyboardEvent object.\r\n *\r\n * @return A normalized key.\r\n */\r\nexport function normalizeKey( key: string | KeyboardEvent ): string {\r\n  key = isString( key ) ? key : key.key;\r\n  return NORMALIZATION_MAP[ key ] || key;\r\n}","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport { EVENT_MOVE, EVENT_UPDATED } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { nextTick } from '../../utils';\r\nimport { normalizeKey } from '../../utils/dom/normalizeKey/normalizeKey';\r\n\r\n\r\n/**\r\n * The interface for the Keyboard component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface KeyboardComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * The keyboard event name.\r\n *\r\n * @since 3.6.0\r\n */\r\nconst KEYBOARD_EVENT = 'keydown';\r\n\r\n/**\r\n * The component for controlling the slider by keyboards.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Keyboard component object.\r\n */\r\nexport function Keyboard( Splide: Splide, Components: Components, options: Options ): KeyboardComponent {\r\n  const { on, bind, unbind } = EventInterface( Splide );\r\n  const { root } = Splide;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * The target element of the keyboard event.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Indicates whether the component is currently disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, destroy );\r\n    on( EVENT_UPDATED, init );\r\n    on( EVENT_MOVE, onMove );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { keyboard } = options;\r\n\r\n    if ( keyboard ) {\r\n      target = keyboard === 'global' ? window : root;\r\n      bind( target, KEYBOARD_EVENT, onKeydown );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    unbind( target, KEYBOARD_EVENT );\r\n  }\r\n\r\n  /**\r\n   * Disables the keyboard input.\r\n   *\r\n   * @param value - Toggles disabling/enabling the keyboard input.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  /**\r\n   * Called when the slider moves.\r\n   * To avoid the slider from moving twice, wait for a tick.\r\n   */\r\n  function onMove(): void {\r\n    const _disabled = disabled;\r\n    disabled = true;\r\n    nextTick( () => { disabled = _disabled } );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the target.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( e: KeyboardEvent ): void {\r\n    if ( ! disabled ) {\r\n      const key = normalizeKey( e );\r\n\r\n      if ( key === resolve( ARROW_LEFT ) ) {\r\n        Splide.go( '<' );\r\n      } else if ( key === resolve( ARROW_RIGHT ) ) {\r\n        Splide.go( '>' );\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    disable,\r\n  };\r\n}\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the src value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRC_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-lazy`;\r\n\r\n/**\r\n * The data attribute for the srcset value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRCSET_DATA_ATTRIBUTE = `${ SRC_DATA_ATTRIBUTE }-srcset`;\r\n\r\n/**\r\n * The selector string for images to load.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const IMAGE_SELECTOR = `[${ SRC_DATA_ATTRIBUTE }], [${ SRCSET_DATA_ATTRIBUTE }]`;\r\n","import { ARIA_ORIENTATION } from '../../constants/attributes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_CLICK,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { EventInterface, EventInterfaceObject } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { empty, includes, isUndefined, prevent, setAttribute } from '../../utils';\r\nimport { normalizeKey } from '../../utils/dom/normalizeKey/normalizeKey';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Sync component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SyncComponent extends BaseComponent {\r\n  remount(): void;\r\n}\r\n\r\n/**\r\n * The keys for triggering the navigation slide.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst TRIGGER_KEYS = [ ' ', 'Enter' ];\r\n\r\n/**\r\n * The component for syncing multiple sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Sync component object.\r\n */\r\nexport function Sync( Splide: Splide, Components: Components, options: Options ): SyncComponent {\r\n  const { isNavigation, slideFocus } = options;\r\n\r\n  /**\r\n   * Stores event objects.\r\n   */\r\n  const events: EventInterfaceObject[] = [];\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    Splide.options = { slideFocus: isUndefined( slideFocus ) ? isNavigation : slideFocus };\r\n  }\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Splide.splides.forEach( target => {\r\n      if ( ! target.isParent ) {\r\n        sync( Splide, target.splide );\r\n        sync( target.splide, Splide );\r\n      }\r\n    } );\r\n\r\n    if ( isNavigation ) {\r\n      navigate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    events.forEach( event => { event.destroy() } );\r\n    empty( events );\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   *\r\n   * @internal\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Syncs the current index with a provided child splide instance.\r\n   *\r\n   * @param splide - A splide instance to sync with.\r\n   * @param target - A target splide instance.\r\n   */\r\n  function sync( splide: Splide, target: Splide ): void {\r\n    const event = EventInterface( splide );\r\n\r\n    event.on( EVENT_MOVE, ( index, prev, dest ) => {\r\n      target.go( target.is( LOOP ) ? dest : index );\r\n    } );\r\n\r\n    events.push( event );\r\n  }\r\n\r\n  /**\r\n   * Makes slides clickable and moves the slider to the index of clicked slide.\r\n   * Note that the direction of `menu` is implicitly `vertical` as default.\r\n   */\r\n  function navigate(): void {\r\n    const event = EventInterface( Splide );\r\n    const { on } = event;\r\n\r\n    on( EVENT_CLICK, onClick );\r\n    on( EVENT_SLIDE_KEYDOWN, onKeydown );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], update );\r\n\r\n    events.push( event );\r\n    event.emit( EVENT_NAVIGATION_MOUNTED, Splide.splides );\r\n  }\r\n\r\n  /**\r\n   * Update attributes.\r\n   */\r\n  function update(): void {\r\n    setAttribute( Components.Elements.list, ARIA_ORIENTATION, options.direction === TTB ? 'vertical' : '' );\r\n  }\r\n\r\n  /**\r\n   * Called when the navigation slide is clicked.\r\n   *\r\n   * @param Slide - A clicked Slide component.\r\n   */\r\n  function onClick( Slide: SlideComponent ): void {\r\n    Splide.go( Slide.index );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the navigation slide.\r\n   *\r\n   * @param Slide - A Slide component.\r\n   * @param e     - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( Slide: SlideComponent, e: KeyboardEvent ): void {\r\n    if ( includes( TRIGGER_KEYS, normalizeKey( e ) ) ) {\r\n      onClick( Slide );\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup,\r\n    mount,\r\n    destroy,\r\n    remount,\r\n  };\r\n}\r\n","import { MEDIA_PREFERS_REDUCED_MOTION } from '../../constants/media';\r\nimport { CREATED, DESTROYED } from '../../constants/states';\r\nimport { EventBinder } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { merge, omit, ownKeys } from '../../utils';\r\nimport { EVENT_UPDATED } from \"../../constants/events\";\r\n\r\n\r\n/**\r\n * The interface for the Media component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface MediaComponent extends BaseComponent {\r\n  /** @internal */\r\n  reduce( reduced: boolean ): void;\r\n  set( options: Options, userOptions?: boolean ): void;\r\n}\r\n\r\n/**\r\n * The component for observing media queries and updating options if necessary.\r\n * This used to be the Options component.\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Media component object.\r\n */\r\nexport function Media( Splide: Splide, Components: Components, options: Options ): MediaComponent {\r\n  const { state } = Splide;\r\n  const breakpoints   = options.breakpoints || {};\r\n  const reducedMotion = options.reducedMotion || {};\r\n  const binder        = EventBinder();\r\n\r\n  /**\r\n   * Stores options and MediaQueryList object.\r\n   */\r\n  const queries: Array<[ Options, MediaQueryList ]> = [];\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    const isMin = options.mediaQuery === 'min';\r\n\r\n    ownKeys( breakpoints )\r\n      .sort( ( n, m ) => isMin ? +n - +m : +m - +n )\r\n      .forEach( key => {\r\n        register( breakpoints[ key ], `(${ isMin ? 'min' : 'max' }-width:${ key }px)` );\r\n      } );\r\n\r\n    register( reducedMotion, MEDIA_PREFERS_REDUCED_MOTION );\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Will be `true` for complete destruction.\r\n   */\r\n  function destroy( completely: boolean ): void {\r\n    if ( completely ) {\r\n      binder.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers entries as [ Options, media query string ].\r\n   *\r\n   * @param options - Options merged to current options when the document matches the query.\r\n   * @param query   - A query string.\r\n   */\r\n  function register( options: Options, query: string ): void {\r\n    const queryList = matchMedia( query );\r\n    binder.bind( queryList, 'change', update );\r\n    queries.push( [ options, queryList ] );\r\n  }\r\n\r\n  /**\r\n   * Checks all media queries in entries and updates options.\r\n   */\r\n  function update(): void {\r\n    const destroyed = state.is( DESTROYED );\r\n    const direction = options.direction;\r\n    const merged = queries.reduce<Options>( ( merged, entry ) => {\r\n      return merge( merged, entry[ 1 ].matches ? entry[ 0 ] : {} );\r\n    }, {} );\r\n\r\n    omit( options );\r\n    set( merged );\r\n\r\n    if ( options.destroy ) {\r\n      Splide.destroy( options.destroy === 'completely' );\r\n    } else if ( destroyed ) {\r\n      destroy( true );\r\n      Splide.mount();\r\n    } else {\r\n      direction !== options.direction && Splide.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables or enables `reducedMotion` options.\r\n   * This method does nothing when the document does not match the query.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param enable - Determines whether to apply `reducedMotion` options or not.\r\n   */\r\n  function reduce( enable: boolean ): void {\r\n    if ( matchMedia( MEDIA_PREFERS_REDUCED_MOTION ).matches ) {\r\n      enable ? merge( options, reducedMotion ) : omit( options, ownKeys( reducedMotion ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets options.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param opts - New options.\r\n   * @param user - Optional. Determines whether to also update user options or not.\r\n   */\r\n  function set( opts: Options, user?: boolean ): void {\r\n    merge( options, opts );\r\n    user && merge( Object.getPrototypeOf( options ), opts );\r\n\r\n    if ( ! state.is( CREATED ) ) {\r\n      Splide.emit( EVENT_UPDATED, options );\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup,\r\n    destroy,\r\n    reduce,\r\n    set,\r\n  };\r\n}\r\n","import { ALL_ATTRIBUTES, ARIA_LABEL, ARIA_LABELLEDBY, ARIA_ROLEDESCRIPTION, ROLE } from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_ARROW_NEXT,\r\n  CLASS_ARROW_PREV,\r\n  CLASS_ARROWS,\r\n  CLASS_CLONE,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_LIST,\r\n  CLASS_PAGINATION,\r\n  CLASS_PROGRESS_BAR,\r\n  CLASS_ROOT,\r\n  CLASS_SLIDE,\r\n  CLASS_TOGGLE,\r\n  CLASS_TRACK,\r\n} from '../../constants/classes';\r\nimport { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { PROJECT_CODE } from '../../constants/project';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  assert,\r\n  assign,\r\n  child,\r\n  children,\r\n  empty,\r\n  forOwn,\r\n  getAttribute,\r\n  push,\r\n  query,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  toggleClass,\r\n  uniqueId,\r\n} from '../../utils';\r\nimport { closest } from '../../utils/dom/closest/closest';\r\nimport { POINTER_DOWN_EVENTS } from '../Drag/constants';\r\n\r\n\r\n/**\r\n * The interface for elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementCollection {\r\n  root: HTMLElement;\r\n  track: HTMLElement;\r\n  list: HTMLElement;\r\n  slides: HTMLElement[];\r\n  arrows?: HTMLElement;\r\n  pagination?: HTMLUListElement;\r\n  prev?: HTMLButtonElement;\r\n  next?: HTMLButtonElement;\r\n  bar?: HTMLElement;\r\n  toggle?: HTMLElement;\r\n}\r\n\r\n/**\r\n * The interface for the Elements component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementsComponent extends BaseComponent, ElementCollection {\r\n}\r\n\r\n/**\r\n * The component that collects and handles elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Elements component object.\r\n */\r\nexport function Elements( Splide: Splide, Components: Components, options: Options ): ElementsComponent {\r\n  const { on, bind } = EventInterface( Splide );\r\n  const { root } = Splide;\r\n  const { i18n } = options;\r\n  const elements: ElementCollection = {} as ElementCollection;\r\n\r\n  /**\r\n   * Stores all slide elements.\r\n   */\r\n  const slides: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Stores all root classes.\r\n   */\r\n  let rootClasses: string[] = [];\r\n\r\n  /**\r\n   * Stores all list classes.\r\n   */\r\n  let trackClasses: string[] = [];\r\n\r\n  /**\r\n   * The track element.\r\n   */\r\n  let track: HTMLElement;\r\n\r\n  /**\r\n   * The list element.\r\n   */\r\n  let list: HTMLElement;\r\n\r\n  /**\r\n   * Turns into `true` when detecting keydown, and `false` when detecting pointerdown.\r\n   */\r\n  let isUsingKey: boolean;\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    collect();\r\n    init();\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, setup );\r\n    on( EVENT_UPDATED, update );\r\n\r\n    bind( document, `${ POINTER_DOWN_EVENTS } keydown`, e => {\r\n      isUsingKey = e.type === 'keydown';\r\n    }, { capture: true } );\r\n\r\n    bind( root, 'focusin', () => {\r\n      toggleClass( root, CLASS_FOCUS_IN, !! isUsingKey );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Whether to destroy the component completely or not.\r\n   */\r\n  function destroy( completely?: boolean ): void {\r\n    const attrs = ALL_ATTRIBUTES.concat( 'style' );\r\n\r\n    empty( slides );\r\n    removeClass( root, rootClasses );\r\n    removeClass( track, trackClasses );\r\n    removeAttribute( [ track, list ], attrs );\r\n    removeAttribute( root, completely ? attrs : [ 'style', ARIA_ROLEDESCRIPTION ] );\r\n  }\r\n\r\n  /**\r\n   * Updates the status of elements.\r\n   */\r\n  function update(): void {\r\n    removeClass( root, rootClasses );\r\n    removeClass( track, trackClasses );\r\n\r\n    rootClasses  = getClasses( CLASS_ROOT );\r\n    trackClasses = getClasses( CLASS_TRACK );\r\n\r\n    addClass( root, rootClasses );\r\n    addClass( track, trackClasses );\r\n\r\n    setAttribute( root, ARIA_LABEL, options.label );\r\n    setAttribute( root, ARIA_LABELLEDBY, options.labelledby );\r\n  }\r\n\r\n  /**\r\n   * Collects elements which the slider consists of.\r\n   */\r\n  function collect(): void {\r\n    track = find( `.${ CLASS_TRACK }` );\r\n    list  = child( track, `.${ CLASS_LIST }` );\r\n\r\n    assert( track && list, 'A track/list element is missing.' );\r\n    push( slides, children( list, `.${ CLASS_SLIDE }:not(.${ CLASS_CLONE })` ) );\r\n\r\n    forOwn( {\r\n      arrows    : CLASS_ARROWS,\r\n      pagination: CLASS_PAGINATION,\r\n      prev      : CLASS_ARROW_PREV,\r\n      next      : CLASS_ARROW_NEXT,\r\n      bar       : CLASS_PROGRESS_BAR,\r\n      toggle    : CLASS_TOGGLE,\r\n    }, ( className, key ) => {\r\n      elements[ key ] = find( `.${ className }` );\r\n    } );\r\n\r\n    assign( elements, { root, track, list, slides } );\r\n  }\r\n\r\n  /**\r\n   * Initializes essential elements.\r\n   * Note that do not change the role of the root element,\r\n   * which removes the region from the accessibility tree.\r\n   */\r\n  function init(): void {\r\n    const id   = root.id || uniqueId( PROJECT_CODE );\r\n    const role = options.role;\r\n\r\n    root.id  = id;\r\n    track.id = track.id || `${ id }-track`;\r\n    list.id  = list.id || `${ id }-list`;\r\n\r\n    if ( ! getAttribute( root, ROLE ) && root.tagName !== 'SECTION' && role ) {\r\n      setAttribute( root, ROLE, role );\r\n    }\r\n\r\n    setAttribute( root, ARIA_ROLEDESCRIPTION, i18n.carousel );\r\n    setAttribute( list, ROLE, 'presentation' );\r\n  }\r\n\r\n  /**\r\n   * Finds an element only in this slider, ignoring elements in a nested slider.\r\n   *\r\n   * @return A found element or null.\r\n   */\r\n  function find( selector: string ): HTMLElement | undefined {\r\n    const elm = query<HTMLElement>( root, selector );\r\n    return elm && closest( elm, `.${ CLASS_ROOT }` ) === root ? elm : undefined;\r\n  }\r\n\r\n  /**\r\n   * Return an array with modifier classes.\r\n   *\r\n   * @param base - A base class name.\r\n   *\r\n   * @return An array with classes.\r\n   */\r\n  function getClasses( base: string ): string[] {\r\n    return [\r\n      `${ base }--${ options.type }`,\r\n      `${ base }--${ options.direction }`,\r\n      options.drag && `${ base }--draggable`,\r\n      options.isNavigation && `${ base }--nav`,\r\n      base === CLASS_ROOT && CLASS_ACTIVE,\r\n    ];\r\n  }\r\n\r\n  return assign( elements, {\r\n    setup,\r\n    mount,\r\n    destroy,\r\n  } );\r\n}\r\n","import { isFunction } from '../../type/type';\r\nimport { matches } from '../matches/matches';\r\n\r\n\r\n/**\r\n * Starts from the provided element, searches for the first element that matches the selector in ascendants.\r\n *\r\n * @param from     - An element to search from.\r\n * @param selector - A selector.\r\n *\r\n * @return The found element if available, or `null`.\r\n */\r\nexport function closest( from: HTMLElement, selector: string ): HTMLElement | null {\r\n  if ( isFunction( from.closest ) ) {\r\n    return from.closest( selector );\r\n  }\r\n\r\n  let elm: HTMLElement | null = from;\r\n\r\n  while ( elm && elm.nodeType === 1 ) {\r\n    if ( matches( elm, selector ) ) {\r\n      break;\r\n    }\r\n\r\n    elm = elm.parentElement;\r\n  }\r\n\r\n  return elm;\r\n}","import { EVENT_MOUNTED, EVENT_REFRESH, EVENT_RESIZE } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  append, apply,\r\n  before,\r\n  between,\r\n  empty,\r\n  forEach as forEachItem,\r\n  includes,\r\n  isFunction,\r\n  isHTMLElement,\r\n  isString,\r\n  matches,\r\n  parseHtml,\r\n  queryAll,\r\n  remove as removeNode,\r\n  toArray,\r\n} from '../../utils';\r\nimport { Slide, SlideComponent } from './Slide';\r\n\r\n\r\n/**\r\n * The interface for the Slides component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface  SlidesComponent extends BaseComponent {\r\n  update(): void;\r\n  register( slide: HTMLElement, index: number, slideIndex: number ): void;\r\n  get( excludeClones?: boolean ): SlideComponent[];\r\n  getIn( page: number ): SlideComponent[];\r\n  getAt( index: number ): SlideComponent | undefined;\r\n  add( slide: string | Element | Array<string | Element>, index?: number ): void;\r\n  remove( selector: SlideMatcher ): void;\r\n  forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void;\r\n  filter( matcher: SlideMatcher ): SlideComponent[];\r\n  style( prop: string, value: string | number, useContainer?: boolean ): void\r\n  getLength( excludeClones?: boolean ): number;\r\n  isEnough(): boolean;\r\n}\r\n\r\n/**\r\n * The iteratee function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesIteratee = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => void\r\n\r\n/**\r\n * The predicate function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesPredicate = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => any\r\n\r\n/**\r\n * The type for filtering SlideComponent objects.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlideMatcher = number | number[] | string | SlidesPredicate;\r\n\r\n/**\r\n * The component for managing all slides include clones.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Slides component object.\r\n */\r\nexport function Slides( Splide: Splide, Components: Components, options: Options ): SlidesComponent {\r\n  const { on, emit, bind } = EventInterface( Splide );\r\n  const { slides, list } = Components.Elements;\r\n\r\n  /**\r\n   * Stores all SlideComponent objects.\r\n   */\r\n  const Slides: SlideComponent[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, init );\r\n    on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\r\n      Slides.sort( ( Slide1, Slide2 ) => Slide1.index - Slide2.index );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    slides.forEach( ( slide, index ) => { register( slide, index, -1 ) } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    forEach( Slide => { Slide.destroy() } );\r\n    empty( Slides );\r\n  }\r\n\r\n  /**\r\n   * Manually updates the status of all slides.\r\n   */\r\n  function update(): void {\r\n    forEach( Slide => { Slide.update() } );\r\n  }\r\n\r\n  /**\r\n   * Registers a slide element and creates a Slide object.\r\n   *\r\n   * @param slide      - A slide element to register.\r\n   * @param index      - A slide index.\r\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\r\n   */\r\n  function register( slide: HTMLElement, index: number, slideIndex: number ): void {\r\n    const object = Slide( Splide, index, slideIndex, slide );\r\n    object.mount();\r\n    Slides.push( object );\r\n  }\r\n\r\n  /**\r\n   * Returns all Slide objects.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return An array with Slide objects.\r\n   */\r\n  function get( excludeClones?: boolean ): SlideComponent[] {\r\n    return excludeClones ? filter( Slide => ! Slide.isClone ) : Slides;\r\n  }\r\n\r\n  /**\r\n   * Returns slides in the specified page.\r\n   *\r\n   * @param page - A page index.\r\n   *\r\n   * @return An array with slides that belong to the page.\r\n   */\r\n  function getIn( page: number ): SlideComponent[] {\r\n    const { Controller } = Components;\r\n    const index = Controller.toIndex( page );\r\n    const max   = Controller.hasFocus() ? 1 : options.perPage;\r\n    return filter( Slide => between( Slide.index, index, index + max - 1 ) );\r\n  }\r\n\r\n  /**\r\n   * Returns a Slide object at the specified index.\r\n   *\r\n   * @param index - A slide index.\r\n   *\r\n   * @return A Slide object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): SlideComponent | undefined {\r\n    return filter( index )[ 0 ];\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide or slides at a specified index.\r\n   *\r\n   * @param items - A slide element, an HTML string or an array with them.\r\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\r\n   */\r\n  function add( items: string | Element | Array<string | Element>, index?: number ): void {\r\n    forEachItem( items, slide => {\r\n      if ( isString( slide ) ) {\r\n        slide = parseHtml( slide );\r\n      }\r\n\r\n      if ( isHTMLElement( slide ) ) {\r\n        const ref = slides[ index ];\r\n        ref ? before( slide, ref ) : append( list, slide );\r\n        addClass( slide, options.classes.slide );\r\n        observeImages( slide, apply( emit, EVENT_RESIZE ) );\r\n      }\r\n    } );\r\n\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  function remove( matcher: SlideMatcher ): void {\r\n    removeNode( filter( matcher ).map( Slide => Slide.slide ) );\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Iterates over Slide objects by the iteratee function.\r\n   *\r\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   */\r\n  function forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void {\r\n    get( excludeClones ).forEach( iteratee );\r\n  }\r\n\r\n  /**\r\n   * Filters Slides by the matcher\r\n   * that can be an index, an array with indices, a selector, or a predicate function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or a predicate function.\r\n   *\r\n   * @return An array with SlideComponent objects.\r\n   */\r\n  function filter( matcher: SlideMatcher ): SlideComponent[] {\r\n    return Slides.filter( isFunction( matcher )\r\n      ? matcher\r\n      : Slide => isString( matcher )\r\n        ? matches( Slide.slide, matcher )\r\n        : includes( toArray( matcher ), Slide.index )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to all slides or containers.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: string, value: string | number, useContainer?: boolean ): void {\r\n    forEach( Slide => { Slide.style( prop, value, useContainer ) } );\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback after all images in the element are loaded.\r\n   *\r\n   * @param elm      - An element that may contain images.\r\n   * @param callback - A callback function.\r\n   */\r\n  function observeImages( elm: Element, callback: AnyFunction ): void {\r\n    const images = queryAll( elm, 'img' );\r\n    let { length } = images;\r\n\r\n    if ( length ) {\r\n      images.forEach( img => {\r\n        bind( img, 'load error', () => {\r\n          if ( ! --length ) {\r\n            callback();\r\n          }\r\n        } );\r\n      } );\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the length of slides.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return The length of slides.\r\n   */\r\n  function getLength( excludeClones?: boolean ): number {\r\n    return excludeClones ? slides.length : Slides.length;\r\n  }\r\n\r\n  /**\r\n   * Checks if the number of slides is over than the `perPage` option, including clones.\r\n   *\r\n   * @return `true` if there are enough slides, or otherwise `false`.\r\n   */\r\n  function isEnough(): boolean {\r\n    return Slides.length > options.perPage;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    update,\r\n    register,\r\n    get,\r\n    getIn,\r\n    getAt,\r\n    add,\r\n    remove,\r\n    forEach,\r\n    filter,\r\n    style,\r\n    getLength,\r\n    isEnough,\r\n  };\r\n}\r\n","import { TTB } from '../../constants/directions';\r\nimport { EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { EventInterface, Throttle } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, apply, assert, isObject, rect, style, unit } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Layout component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LayoutComponent extends BaseComponent {\r\n  listSize(): number;\r\n  slideSize( index: number, withoutGap?: boolean ): number;\r\n  sliderSize(): number;\r\n  totalSize( index?: number, withoutGap?: boolean ): number;\r\n  getPadding( right: boolean ): number;\r\n}\r\n\r\n/**\r\n * The component that layouts slider components and provides methods for dimensions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Layout component object.\r\n */\r\nexport function Layout( Splide: Splide, Components: Components, options: Options ): LayoutComponent {\r\n  const { on, bind, emit } = EventInterface( Splide );\r\n  const { Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n  const { root, track, list } = Components.Elements;\r\n  const { getAt, style: styleSlides } = Slides;\r\n\r\n  /**\r\n   * Indicates whether the slider direction is vertical or not.\r\n   */\r\n  let vertical: boolean;\r\n\r\n  /**\r\n   * Keeps the DOMRect object of the root element.\r\n   */\r\n  let rootRect: DOMRect;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    bind( window, 'resize load', Throttle( apply( emit, EVENT_RESIZE ) ) );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n    on( EVENT_RESIZE, resize );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component on `mount` or `updated`.\r\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\r\n   */\r\n  function init(): void {\r\n    rootRect = null;\r\n    vertical = options.direction === TTB;\r\n\r\n    style( root, 'maxWidth', unit( options.width ) );\r\n    style( track, resolve( 'paddingLeft' ), cssPadding( false ) );\r\n    style( track, resolve( 'paddingRight' ), cssPadding( true ) );\r\n\r\n    resize();\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions of some elements when the slider is resized.\r\n   */\r\n  function resize(): void {\r\n    const newRect = rect( root );\r\n\r\n    if ( ! rootRect || rootRect.width !== newRect.width || rootRect.height !== newRect.height ) {\r\n      style( track, 'height', cssTrackHeight() );\r\n\r\n      styleSlides( resolve( 'marginRight' ), unit( options.gap ) );\r\n      styleSlides( 'width', cssSlideWidth() );\r\n      styleSlides( 'height', cssSlideHeight(), true );\r\n\r\n      rootRect = newRect;\r\n      emit( EVENT_RESIZED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the padding option and returns the value for each side.\r\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value as a CSS string.\r\n   */\r\n  function cssPadding( right: boolean ): string {\r\n    const { padding } = options;\r\n    const prop = resolve( right ? 'right' : 'left' );\r\n    return padding && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) ) || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the track element as a CSS string.\r\n   *\r\n   * @return The height of the track.\r\n   */\r\n  function cssTrackHeight(): string {\r\n    let height = '';\r\n\r\n    if ( vertical ) {\r\n      height = cssHeight();\r\n      assert( height, 'height or heightRatio is missing.' );\r\n      height = `calc(${ height } - ${ cssPadding( false ) } - ${ cssPadding( true ) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Converts options related with height to a CSS string.\r\n   *\r\n   * @return The height as a CSS string if available, or otherwise an empty string.\r\n   */\r\n  function cssHeight(): string {\r\n    return unit( options.height || rect( list ).width * options.heightRatio );\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the slide as a CSS string.\r\n   *\r\n   * @return The width of the slide.\r\n   */\r\n  function cssSlideWidth(): string | null {\r\n    return options.autoWidth ? null : unit( options.fixedWidth ) || ( vertical ? '' : cssSlideSize() );\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the slide as a CSS string.\r\n   *\r\n   * @return The height of the slide.\r\n   */\r\n  function cssSlideHeight(): string | null {\r\n    return unit( options.fixedHeight )\r\n      || ( vertical ? ( options.autoHeight ? null : cssSlideSize() ) : cssHeight() );\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS string for slide width or height without gap.\r\n   *\r\n   * @return The CSS string for slide width or height.\r\n   */\r\n  function cssSlideSize(): string {\r\n    const gap = unit( options.gap );\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the list width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @return The size of the track element in pixel.\r\n   */\r\n  function listSize(): number {\r\n    return rect( list )[ resolve( 'width' ) ];\r\n  }\r\n\r\n  /**\r\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @param index      - Optional. A slide index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\r\n   *\r\n   * @return The size of the specified slide element in pixel.\r\n   */\r\n  function slideSize( index?: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index || 0 );\r\n    return Slide\r\n      ? rect( Slide.slide )[ resolve( 'width' ) ] + ( withoutGap ? 0 : getGap() )\r\n      : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the total width or height of slides from the head of the slider to the specified index.\r\n   * This includes sizes of clones before the first slide.\r\n   *\r\n   * @param index      - A slide index. If omitted, uses the last index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\r\n   */\r\n  function totalSize( index: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index );\r\n\r\n    if ( Slide ) {\r\n      const right = rect( Slide.slide )[ resolve( 'right' ) ];\r\n      const left  = rect( list )[ resolve( 'left' ) ];\r\n      return abs( right - left ) + ( withoutGap ? 0 : getGap() );\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the slider size without clones before the first slide.\r\n   *\r\n   * @return The width or height of the slider without clones.\r\n   */\r\n  function sliderSize(): number {\r\n    return totalSize( Splide.length - 1, true ) - totalSize( -1, true );\r\n  }\r\n\r\n  /**\r\n   * Returns the gap value.\r\n   *\r\n   * @return The gap value in pixel.\r\n   */\r\n  function getGap(): number {\r\n    const Slide = getAt( 0 );\r\n    return Slide && parseFloat( style( Slide.slide, resolve( 'marginRight' ) ) ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the padding value.\r\n   * This method resolves the difference of the direction.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value in pixel.\r\n   */\r\n  function getPadding( right: boolean ): number {\r\n    return parseFloat( style( track, resolve( `padding${ right ? 'Right' : 'Left' }` ) ) ) || 0;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    listSize,\r\n    slideSize,\r\n    sliderSize,\r\n    totalSize,\r\n    getPadding,\r\n  };\r\n}\r\n","import { AnyFunction } from '../../types';\r\nimport { RequestInterval, RequestIntervalInterface } from '../RequestInterval/RequestInterval';\r\n\r\n\r\n/**\r\n * The interface for the returning value of the RequestInterval.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ThrottleInstance<F extends AnyFunction> extends Function {\r\n  ( ...args: Parameters<F> ): void;\r\n}\r\n\r\n/**\r\n * Returns the throttled function.\r\n *\r\n * @param func     - A function to throttle.\r\n * @param duration - Optional. Throttle duration in milliseconds.\r\n *\r\n * @return A throttled function.\r\n */\r\nexport function Throttle<F extends AnyFunction>(\r\n  func: F,\r\n  duration?: number\r\n): ThrottleInstance<F> {\r\n  let interval: RequestIntervalInterface;\r\n\r\n  function throttled(): void {\r\n    if ( ! interval ) {\r\n      interval = RequestInterval( duration || 0, () => {\r\n        func();\r\n        interval = null;\r\n      }, null, 1 );\r\n\r\n      interval.start();\r\n    }\r\n  }\r\n\r\n  return throttled;\r\n}\r\n","import { EVENT_REFRESH, EVENT_RESIZE, EVENT_UPDATED } from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { addClass, append, before, ceil, empty, pad, push, rect, remove } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Clone component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ClonesComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The multiplier to determine the number of clones.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport const MULTIPLIER = 2;\r\n\r\n/**\r\n * The component that generates clones for the loop slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Clones component object.\r\n */\r\nexport function Clones( Splide: Splide, Components: Components, options: Options ): ClonesComponent {\r\n  const { on, emit } = EventInterface( Splide );\r\n  const { Elements, Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Stores all cloned elements.\r\n   */\r\n  const clones: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Keeps the current number of clones.\r\n   */\r\n  let cloneCount: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, init );\r\n    on( [ EVENT_UPDATED, EVENT_RESIZE ], observe );\r\n  }\r\n\r\n  /**\r\n   * Removes all clones if available, and generates new clones.\r\n   */\r\n  function init(): void {\r\n    if ( ( cloneCount = computeCloneCount() ) ) {\r\n      generate( cloneCount );\r\n      emit( EVENT_RESIZE );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys clones.\r\n   */\r\n  function destroy(): void {\r\n    remove( clones );\r\n    empty( clones );\r\n  }\r\n\r\n  /**\r\n   * Observes the required clone count and refreshes the slider if necessary.\r\n   */\r\n  function observe(): void {\r\n    if ( cloneCount < computeCloneCount() ) {\r\n      emit( EVENT_REFRESH );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the specified number of clones.\r\n   *\r\n   * @param count - The number of clones to generate for each side.\r\n   */\r\n  function generate( count: number ): void {\r\n    const slides = Slides.get().slice();\r\n    const { length } = slides;\r\n\r\n    if ( length ) {\r\n      while ( slides.length < count ) {\r\n        push( slides, slides );\r\n      }\r\n\r\n      push( slides.slice( -count ), slides.slice( 0, count ) ).forEach( ( Slide, index ) => {\r\n        const isHead = index < count;\r\n        const clone  = cloneDeep( Slide.slide, index );\r\n        isHead ? before( clone, slides[ 0 ].slide ) : append( Elements.list, clone );\r\n        push( clones, clone );\r\n        Slides.register( clone, index - count + ( isHead ? 0 : length ), Slide.index );\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deeply clones the provided element with removing the ID attribute.\r\n   *\r\n   * @param elm   - An element to clone.\r\n   * @param index - An index of the clone.\r\n   *\r\n   * @return A cloned element.\r\n   */\r\n  function cloneDeep( elm: HTMLElement, index: number ): HTMLElement {\r\n    const clone = elm.cloneNode( true ) as HTMLElement;\r\n    addClass( clone, options.classes.clone );\r\n    clone.id = `${ Splide.root.id }-clone${ pad( index + 1 ) }`;\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of elements to generate.\r\n   * This always returns 0 if the slider type is not `'loop'`.\r\n   *\r\n   * @return The number of clones.\r\n   */\r\n  function computeCloneCount(): number {\r\n    let { clones } = options;\r\n\r\n    if ( ! Splide.is( LOOP ) ) {\r\n      clones = 0;\r\n    } else if ( ! clones ) {\r\n      const fixedSize  = options[ resolve( 'fixedWidth' ) ] && Components.Layout.slideSize( 0 );\r\n      const fixedCount = fixedSize && ceil( rect( Elements.track )[ resolve( 'width' ) ] / fixedSize );\r\n      clones = fixedCount || ( options[ resolve( 'autoWidth' ) ] && Splide.length ) || options.perPage * MULTIPLIER;\r\n    }\r\n\r\n    return clones;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import {\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZED,\r\n  EVENT_SHIFTED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { IDLE, MOVING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options, TransitionComponent } from '../../types';\r\nimport { abs, ceil, clamp, isUndefined, rect, style } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Move component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface MoveComponent extends BaseComponent {\r\n  move( dest: number, index: number, prev: number, callback?: AnyFunction ): void;\r\n  jump( index: number ): void;\r\n  translate( position: number, preventLoop?: boolean ): void;\r\n  shift( position: number, backwards: boolean ): number;\r\n  cancel(): void;\r\n  toIndex( position: number ): number;\r\n  toPosition( index: number, trimming?: boolean ): number;\r\n  getPosition(): number;\r\n  getLimit( max: boolean ): number;\r\n  exceededLimit( max?: boolean | undefined, position?: number ): boolean;\r\n\r\n  /** @internal */\r\n  reposition(): void;\r\n}\r\n\r\n/**\r\n * The component for moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Move component object.\r\n */\r\nexport function Move( Splide: Splide, Components: Components, options: Options ): MoveComponent {\r\n  const { on, emit } = EventInterface( Splide );\r\n  const { set } = Splide.state;\r\n  const { slideSize, getPadding, totalSize, listSize, sliderSize } = Components.Layout;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { list, track } = Components.Elements;\r\n\r\n  /**\r\n   * Holds the Transition component.\r\n   */\r\n  let Transition: TransitionComponent;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Transition = Components.Transition;\r\n    on( [ EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH ], reposition );\r\n  }\r\n\r\n  /**\r\n   * Repositions the slider.\r\n   * - Do not call `cancel()` here because LazyLoad may emit resize while transitioning.\r\n   * - iOS Safari emits window resize event while the user swipes the slider because of the bottom bar.\r\n   * - Slide components listening to the internal repositioned event to update their visibility.\r\n   */\r\n  function reposition(): void {\r\n    if ( ! Components.Controller.isBusy() ) {\r\n      Components.Scroll.cancel();\r\n      jump( Splide.index );\r\n      Components.Slides.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the dest index with the Transition component.\r\n   *\r\n   * @param dest     - A destination index to go to, including clones'.\r\n   * @param index    - A slide index.\r\n   * @param prev     - A previous index.\r\n   * @param callback - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function move( dest: number, index: number, prev: number, callback?: AnyFunction ): void {\r\n    const position = getPosition();\r\n\r\n    if ( dest !== index && canShift( dest > index ) ) {\r\n      cancel();\r\n      translate( shift( position, dest > index ), true );\r\n    }\r\n\r\n    set( MOVING );\r\n    emit( EVENT_MOVE, index, prev, dest );\r\n\r\n    Transition.start( index, () => {\r\n      set( IDLE );\r\n      emit( EVENT_MOVED, index, prev, dest );\r\n      callback && callback();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Jumps to the slide at the specified index.\r\n   *\r\n   * @param index - An index to jump to.\r\n   */\r\n  function jump( index: number ): void {\r\n    translate( toPosition( index, true ) );\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the provided position.\r\n   *\r\n   * @param position    - The position to move to.\r\n   * @param preventLoop - Optional. If `true`, sets the provided position as is.\r\n   */\r\n  function translate( position: number, preventLoop?: boolean ): void {\r\n    if ( ! Splide.is( FADE ) ) {\r\n      const destination = preventLoop ? position : loop( position );\r\n      style( list, 'transform', `translate${ resolve( 'X' ) }(${ destination }px)` );\r\n      position !== destination && emit( EVENT_SHIFTED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loops the provided position if it exceeds bounds.\r\n   *\r\n   * @param position - A position to loop.\r\n   */\r\n  function loop( position: number ): number {\r\n    if ( Splide.is( LOOP ) ) {\r\n      const diff        = orient( position - getPosition() );\r\n      const exceededMin = exceededLimit( false, position ) && diff < 0;\r\n      const exceededMax = exceededLimit( true, position ) && diff > 0;\r\n\r\n      if ( exceededMin || exceededMax ) {\r\n        position = shift( position, exceededMax );\r\n      }\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Adds or subtracts the slider width to the provided position.\r\n   *\r\n   * @param position  - A position to shift.\r\n   * @param backwards - Determines whether to shift the slider backwards or forwards.\r\n   *\r\n   * @return The shifted position.\r\n   */\r\n  function shift( position: number, backwards: boolean ): number {\r\n    const excess = position - getLimit( backwards );\r\n    const size   = sliderSize();\r\n    position -= orient( size * ( ceil( abs( excess ) / size ) || 1 ) ) * ( backwards ? 1 : -1 );\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Cancels transition.\r\n   */\r\n  function cancel(): void {\r\n    translate( getPosition() );\r\n    Transition.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the closest index to the position.\r\n   *\r\n   * @param position - A position to convert.\r\n   *\r\n   * @return The closest index to the position.\r\n   */\r\n  function toIndex( position: number ): number {\r\n    const Slides = Components.Slides.get();\r\n\r\n    let index       = 0;\r\n    let minDistance = Infinity;\r\n\r\n    for ( let i = 0; i < Slides.length; i++ ) {\r\n      const slideIndex = Slides[ i ].index;\r\n      const distance   = abs( toPosition( slideIndex, true ) - position );\r\n\r\n      if ( distance <= minDistance ) {\r\n        minDistance = distance;\r\n        index       = slideIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the position.\r\n   *\r\n   * @param index    - An index to convert.\r\n   * @param trimming - Optional. Whether to trim edge spaces or not.\r\n   *\r\n   * @return The position corresponding with the index.\r\n   */\r\n  function toPosition( index: number, trimming?: boolean ): number {\r\n    const position = orient( totalSize( index - 1 ) - offset( index ) );\r\n    return trimming ? trim( position ) : position;\r\n  }\r\n\r\n  /**\r\n   * Returns the current position.\r\n   *\r\n   * @return The position of the list element.\r\n   */\r\n  function getPosition(): number {\r\n    const left = resolve( 'left' );\r\n    return rect( list )[ left ] - rect( track )[ left ] + orient( getPadding( false ) );\r\n  }\r\n\r\n  /**\r\n   * Trims spaces on the edge of the slider.\r\n   *\r\n   * @param position - A position to trim.\r\n   *\r\n   * @return A trimmed position.\r\n   */\r\n  function trim( position: number ): number {\r\n    if ( options.trimSpace && Splide.is( SLIDE ) ) {\r\n      position = clamp( position, 0, orient( sliderSize() - listSize() ) );\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Returns the offset amount.\r\n   *\r\n   * @param index - An index.\r\n   */\r\n  function offset( index: number ): number {\r\n    const { focus } = options;\r\n    return focus === 'center' ? ( listSize() - slideSize( index, true ) ) / 2 : +focus * slideSize( index ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the limit number that the slider can move to.\r\n   *\r\n   * @param max - Determines whether to return the maximum or minimum limit.\r\n   *\r\n   * @return The border number.\r\n   */\r\n  function getLimit( max: boolean ): number {\r\n    return toPosition( max ? Components.Controller.getEnd() : 0, !! options.trimSpace );\r\n  }\r\n\r\n  /**\r\n   * Checks if there is enough width to shift the slider.\r\n   *\r\n   * @param backwards - `true` for checking backwards, or `false` for doing forwards.\r\n   *\r\n   * @return `true` if the slider can be shifted for the specified direction, or otherwise `false`.\r\n   */\r\n  function canShift( backwards: boolean ): boolean {\r\n    const shifted = orient( shift( getPosition(), backwards ) );\r\n    return backwards\r\n      ? shifted >= 0\r\n      : shifted <= list[ `scroll${ resolve( 'Width' ) }` ] - rect( track )[ resolve( 'width' ) ];\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided position exceeds the minimum or maximum limit or not.\r\n   *\r\n   * @param max      - Optional. `true` for testing max, `false` for min, and `undefined` for both.\r\n   * @param position - Optional. A position to test. If omitted, tests the current position.\r\n   *\r\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\r\n   */\r\n  function exceededLimit( max?: boolean | undefined, position?: number ): boolean {\r\n    position = isUndefined( position ) ? getPosition() : position;\r\n    const exceededMin = max !== true && orient( position ) < orient( getLimit( false ) );\r\n    const exceededMax = max !== false && orient( position ) > orient( getLimit( true ) );\r\n    return exceededMin || exceededMax;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    move,\r\n    jump,\r\n    translate,\r\n    shift,\r\n    cancel,\r\n    toIndex,\r\n    toPosition,\r\n    getPosition,\r\n    getLimit,\r\n    exceededLimit,\r\n    reposition,\r\n  };\r\n}\r\n","import { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { LOOP, SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport { apply, approximatelyEqual, between, clamp, floor, isString, isUndefined, max } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Controller component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ControllerComponent extends BaseComponent {\r\n  go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void;\r\n  scroll( destination: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void;\r\n  getNext( destination?: boolean ): number;\r\n  getPrev( destination?: boolean ): number;\r\n  getAdjacent( prev: boolean, destination?: boolean ): number;\r\n  getEnd(): number;\r\n  setIndex( index: number ): void;\r\n  getIndex( prev?: boolean ): number;\r\n  toIndex( page: number ): number;\r\n  toPage( index: number ): number;\r\n  toDest( position: number ): number;\r\n  hasFocus(): boolean;\r\n  isBusy(): boolean;\r\n}\r\n\r\n/**\r\n * The component for controlling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Controller component object.\r\n */\r\nexport function Controller( Splide: Splide, Components: Components, options: Options ): ControllerComponent {\r\n  const { on } = EventInterface( Splide );\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, toPosition } = Move;\r\n  const { isEnough, getLength } = Components.Slides;\r\n  const isLoop  = Splide.is( LOOP );\r\n  const isSlide = Splide.is( SLIDE );\r\n  const getNext = apply( getAdjacent, false );\r\n  const getPrev = apply( getAdjacent, true );\r\n\r\n  /**\r\n   * The current index.\r\n   */\r\n  let currIndex = options.start || 0;\r\n\r\n  /**\r\n   * The previous index.\r\n   */\r\n  let prevIndex = currIndex;\r\n\r\n  /**\r\n   * The latest number of slides.\r\n   */\r\n  let slideCount: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perMove: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perPage: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes some parameters.\r\n   * Needs to check the slides length since the current index may be out of the range after refresh.\r\n   * The process order must be Elements -> Controller -> Move.\r\n   */\r\n  function init(): void {\r\n    slideCount = getLength( true );\r\n    perMove    = options.perMove;\r\n    perPage    = options.perPage;\r\n\r\n    const index = clamp( currIndex, 0, slideCount - 1 );\r\n\r\n    if ( index !== currIndex ) {\r\n      currIndex = index;\r\n      Move.reposition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider by the control pattern.\r\n   *\r\n   * @see `Splide#go()`\r\n   *\r\n   * @param control        - A control pattern.\r\n   * @param allowSameIndex - Optional. Determines whether to allow to go to the current index or not.\r\n   * @param callback       - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void {\r\n    if ( ! isBusy() ) {\r\n      const dest  = parse( control );\r\n      const index = loop( dest );\r\n\r\n      if ( index > -1 && ( allowSameIndex || index !== currIndex ) ) {\r\n        setIndex( index );\r\n        Move.move( dest, index, prevIndex, callback );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the specified destination with updating indices.\r\n   *\r\n   * @param destination - An index to scroll the slider to.\r\n   * @param duration    - Optional. Specifies the scroll duration.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param callback    - Optional. A callback function invoked after scroll ends.\r\n   */\r\n  function scroll( destination: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void {\r\n    Components.Scroll.scroll( destination, duration, snap, () => {\r\n      setIndex( loop( Move.toIndex( Move.getPosition() ) ) );\r\n      callback && callback();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Parses the control and returns a slide index.\r\n   *\r\n   * @param control - A control pattern to parse.\r\n   *\r\n   * @return A `dest` index.\r\n   */\r\n  function parse( control: number | string ): number {\r\n    let index = currIndex;\r\n\r\n    if ( isString( control ) ) {\r\n      const [ , indicator, number ] = control.match( /([+\\-<>])(\\d+)?/ ) || [];\r\n\r\n      if ( indicator === '+' || indicator === '-' ) {\r\n        index = computeDestIndex( currIndex + +`${ indicator }${ +number || 1 }`, currIndex );\r\n      } else if ( indicator === '>' ) {\r\n        index = number ? toIndex( +number ) : getNext( true );\r\n      } else if ( indicator === '<' ) {\r\n        index = getPrev( true );\r\n      }\r\n    } else {\r\n      index = isLoop ? control : clamp( control, 0, getEnd() );\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Returns an adjacent destination index.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param prev        - Determines whether to return a previous or next index.\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return An adjacent index if available, or otherwise `-1`.\r\n   */\r\n  function getAdjacent( prev: boolean, destination?: boolean ): number {\r\n    const number = perMove || ( hasFocus() ? 1 : perPage );\r\n    const dest   = computeDestIndex( currIndex + number * ( prev ? -1 : 1 ), currIndex, ! ( perMove || hasFocus() ) );\r\n\r\n    if ( dest === -1 && isSlide ) {\r\n      if ( ! approximatelyEqual( getPosition(), getLimit( ! prev ), 1 ) ) {\r\n        return prev ? 0 : getEnd();\r\n      }\r\n    }\r\n\r\n    return destination ? dest : loop( dest );\r\n  }\r\n\r\n  /**\r\n   * Converts the desired destination index to the valid one.\r\n   * - If the `move` option is `true`, finds the dest index whose position is different with the current one.\r\n   * - This may return clone indices if the editor is the loop mode,\r\n   *   or `-1` if there is no slide to go.\r\n   * - There are still slides where the slider can go if borders are between `from` and `dest`.\r\n   *\r\n   * @param dest     - The desired destination.\r\n   * @param from     - A base index.\r\n   * @param snapPage - Optional. Whether to snap a page or not.\r\n   *\r\n   * @return A converted destination index, including clones.\r\n   */\r\n  function computeDestIndex( dest: number, from: number, snapPage?: boolean ): number {\r\n    if ( isEnough() ) {\r\n      const end   = getEnd();\r\n      const index = computeMovableDestIndex( dest );\r\n\r\n      if ( index !== dest ) {\r\n        from     = dest;\r\n        dest     = index;\r\n        snapPage = false;\r\n      }\r\n\r\n      if ( dest < 0 || dest > end ) {\r\n        if ( between( 0, dest, from, true ) || between( end, from, dest, true ) ) {\r\n          dest = toIndex( toPage( dest ) );\r\n        } else {\r\n          if ( isLoop ) {\r\n            dest = snapPage\r\n              ? dest < 0 ? - ( slideCount % perPage || perPage ) : slideCount\r\n              : dest;\r\n          } else if ( options.rewind ) {\r\n            dest = dest < 0 ? end : 0;\r\n          } else {\r\n            dest = -1;\r\n          }\r\n        }\r\n      } else {\r\n        if ( snapPage && dest !== from ) {\r\n          dest = toIndex( toPage( from ) + ( dest < from ? -1 : 1 ) );\r\n        }\r\n      }\r\n    } else {\r\n      dest = -1;\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Finds the dest index whose position is different with the current one.\r\n   * This can be negative or greater than `length - 1`.\r\n   *\r\n   * @param dest - A dest index.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function computeMovableDestIndex( dest: number ): number {\r\n    if ( isSlide && options.trimSpace === 'move' && dest !== currIndex ) {\r\n      const position = getPosition();\r\n\r\n      while ( position === toPosition( dest, true ) && between( dest, 0, Splide.length - 1, ! options.rewind ) ) {\r\n        dest < currIndex ? --dest : ++dest;\r\n      }\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Loops the provided index only in the loop mode.\r\n   *\r\n   * @param index - An index to loop.\r\n   *\r\n   * @return A looped index.\r\n   */\r\n  function loop( index: number ): number {\r\n    return isLoop ? ( index + slideCount ) % slideCount || 0 : index;\r\n  }\r\n\r\n  /**\r\n   * Returns the end index where the slider can go.\r\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\r\n   * the slider can go to the slide 8 (the index is 7).\r\n   *\r\n   * @return An end index.\r\n   */\r\n  function getEnd(): number {\r\n    return max( slideCount - ( hasFocus() || ( isLoop && perMove ) ? 1 : perPage ), 0 );\r\n  }\r\n\r\n  /**\r\n   * Converts the page index to the slide index.\r\n   *\r\n   * @param page - A page index to convert.\r\n   *\r\n   * @return A slide index.\r\n   */\r\n  function toIndex( page: number ): number {\r\n    return clamp( hasFocus() ? page : perPage * page, 0, getEnd() );\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the page index.\r\n   *\r\n   * @param index - An index to convert.\r\n   *\r\n   * @return A page index.\r\n   */\r\n  function toPage( index: number ): number {\r\n    return hasFocus()\r\n      ? index\r\n      : floor( ( index >= getEnd() ? slideCount - 1 : index ) / perPage );\r\n  }\r\n\r\n  /**\r\n   * Converts the destination position to the dest index.\r\n   *\r\n   * @param destination - A position to convert.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function toDest( destination: number ): number {\r\n    const closest = Move.toIndex( destination );\r\n    return isSlide ? clamp( closest, 0, getEnd() ) : closest;\r\n  }\r\n\r\n  /**\r\n   * Sets a new index and retains old one.\r\n   *\r\n   * @param index - A new index to set.\r\n   */\r\n  function setIndex( index: number ): void {\r\n    if ( index !== currIndex ) {\r\n      prevIndex = currIndex;\r\n      currIndex = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current/previous index.\r\n   *\r\n   * @param prev - Optional. Whether to return previous index or not.\r\n   */\r\n  function getIndex( prev?: boolean ): number {\r\n    return prev ? prevIndex : currIndex;\r\n  }\r\n\r\n  /**\r\n   * Verifies if the focus option is available or not.\r\n   *\r\n   * @return `true` if the slider has the focus option.\r\n   */\r\n  function hasFocus(): boolean {\r\n    return ! isUndefined( options.focus ) || options.isNavigation;\r\n  }\r\n\r\n  /**\r\n   * Checks if the slider is moving/scrolling or not.\r\n   *\r\n   * @return `true` if the slider can move, or otherwise `false`.\r\n   */\r\n  function isBusy(): boolean {\r\n    return Splide.state.is( [ MOVING, SCROLLING ] ) && !! options.waitForTransition;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    go,\r\n    scroll,\r\n    getNext,\r\n    getPrev,\r\n    getAdjacent,\r\n    getEnd,\r\n    setIndex,\r\n    getIndex,\r\n    toIndex,\r\n    toPage,\r\n    toDest,\r\n    hasFocus,\r\n    isBusy,\r\n  };\r\n}\r\n","import { ALL_ATTRIBUTES, ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ARROWS } from '../../constants/classes';\r\nimport {\r\n  EVENT_ARROWS_MOUNTED,\r\n  EVENT_ARROWS_UPDATED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  apply,\r\n  assign,\r\n  before,\r\n  create,\r\n  display,\r\n  parseHtml,\r\n  remove,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n} from '../../utils';\r\nimport { PATH, SIZE, XML_NAME_SPACE } from './path';\r\n\r\n\r\n/**\r\n * The interface for the Arrows component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ArrowsComponent extends BaseComponent {\r\n  arrows: { prev?: HTMLButtonElement, next?: HTMLButtonElement };\r\n}\r\n\r\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Arrows component object.\r\n */\r\nexport function Arrows( Splide: Splide, Components: Components, options: Options ): ArrowsComponent {\r\n  const event = EventInterface( Splide );\r\n  const { on, bind, emit } = event;\r\n  const { classes, i18n } = options;\r\n  const { Elements, Controller } = Components;\r\n  const { arrows: userArrows, track } = Elements;\r\n\r\n  /**\r\n   * The wrapper element.\r\n   */\r\n  let wrapper = userArrows;\r\n\r\n  /**\r\n   * The previous arrow element.\r\n   */\r\n  let prev = Elements.prev;\r\n\r\n  /**\r\n   * The next arrow element.\r\n   */\r\n  let next = Elements.next;\r\n\r\n  /**\r\n   * Indicates whether the component creates arrows or retrieved from the DOM.\r\n   */\r\n  let created: boolean;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let wrapperClasses: string;\r\n\r\n  /**\r\n   * An object with previous and next arrows.\r\n   */\r\n  const arrows: ArrowsComponent[ 'arrows' ] = {};\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, remount );\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const enabled = options.arrows;\r\n\r\n    if ( enabled && ! ( prev && next ) ) {\r\n      createArrows();\r\n    }\r\n\r\n    if ( prev && next ) {\r\n      assign( arrows, { prev, next } );\r\n      display( wrapper, enabled ? '' : 'none' );\r\n      addClass( wrapper, ( wrapperClasses = `${ CLASS_ARROWS }--${ options.direction }` ) );\r\n\r\n      if ( enabled ) {\r\n        listen();\r\n        update();\r\n        setAttribute( [ prev, next ], ARIA_CONTROLS, track.id );\r\n        emit( EVENT_ARROWS_MOUNTED, prev, next );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    event.destroy();\r\n    removeClass( wrapper, wrapperClasses );\r\n\r\n    if ( created ) {\r\n      remove( userArrows ? [ prev, next ] : wrapper );\r\n      prev = next = null;\r\n    } else {\r\n      removeAttribute( [ prev, next ], ALL_ATTRIBUTES );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    on( [ EVENT_MOVED, EVENT_REFRESH, EVENT_SCROLLED ], update );\r\n    bind( next, 'click', apply( go, '>' ) );\r\n    bind( prev, 'click', apply( go, '<' ) );\r\n  }\r\n\r\n  /**\r\n   * The wrapper function of Controller#go().\r\n   *\r\n   * @param control - The control pattern.\r\n   */\r\n  function go( control: string ): void {\r\n    Controller.go( control, true );\r\n  }\r\n\r\n  /**\r\n   * Create arrows and append them to the slider.\r\n   */\r\n  function createArrows(): void {\r\n    wrapper = userArrows || create( 'div', classes.arrows );\r\n    prev    = createArrow( true );\r\n    next    = createArrow( false );\r\n    created = true;\r\n\r\n    append( wrapper, [ prev, next ] );\r\n    ! userArrows && before( wrapper, track );\r\n  }\r\n\r\n  /**\r\n   * Creates an arrow button.\r\n   * In IE, A SVG element is focusable.\r\n   *\r\n   * @param prev - Determines whether to create a previous or next arrow.\r\n   *\r\n   * @return A created button element.\r\n   */\r\n  function createArrow( prev: boolean ): HTMLButtonElement {\r\n    const arrow = `<button class=\"${ classes.arrow } ${ prev ? classes.prev : classes.next }\" type=\"button\">`\r\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\" focusable=\"false\">`\r\n      + `<path d=\"${ options.arrowPath || PATH }\" />`;\r\n\r\n    return parseHtml<HTMLButtonElement>( arrow );\r\n  }\r\n\r\n  /**\r\n   * Updates status of arrows, such as `disabled` and `aria-label`.\r\n   */\r\n  function update(): void {\r\n    const index     = Splide.index;\r\n    const prevIndex = Controller.getPrev();\r\n    const nextIndex = Controller.getNext();\r\n    const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\r\n    const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\r\n\r\n    prev.disabled = prevIndex < 0;\r\n    next.disabled = nextIndex < 0;\r\n\r\n    setAttribute( prev, ARIA_LABEL, prevLabel );\r\n    setAttribute( next, ARIA_LABEL, nextLabel );\r\n\r\n    emit( EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex );\r\n  }\r\n\r\n  return {\r\n    arrows,\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n","import { ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ACTIVE } from '../../constants/classes';\r\nimport {\r\n  EVENT_AUTOPLAY_PAUSE,\r\n  EVENT_AUTOPLAY_PLAY,\r\n  EVENT_AUTOPLAY_PLAYING,\r\n  EVENT_MOVE,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n} from '../../constants/events';\r\nimport { EventInterface, RequestInterval } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { getAttribute, setAttribute, style, toggleClass } from '../../utils';\r\nimport { INTERVAL_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Autoplay component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface AutoplayComponent extends BaseComponent {\r\n  play(): void;\r\n  pause(): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * The component for auto playing sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An Autoplay component object.\r\n */\r\nexport function Autoplay( Splide: Splide, Components: Components, options: Options ): AutoplayComponent {\r\n  const { on, bind, emit } = EventInterface( Splide );\r\n  const interval = RequestInterval( options.interval, Splide.go.bind( Splide, '>' ), onAnimationFrame );\r\n  const { isPaused } = interval;\r\n  const { Elements, Elements: { root, toggle } } = Components;\r\n  const { autoplay } = options;\r\n\r\n  /**\r\n   * Indicates whether the slider is hovered or not.\r\n   */\r\n  let hovered: boolean;\r\n\r\n  /**\r\n   * Indicates whether one of slider elements has focus or not.\r\n   */\r\n  let focused: boolean;\r\n\r\n  /**\r\n   * Indicates whether the autoplay is stopped or not.\r\n   * If stopped, autoplay won't start automatically unless `play()` is explicitly called.\r\n   */\r\n  let stopped = autoplay === 'pause';\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( autoplay ) {\r\n      listen();\r\n      toggle && setAttribute( toggle, ARIA_CONTROLS, Elements.track.id );\r\n      stopped || play();\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    if ( options.pauseOnHover ) {\r\n      bind( root, 'mouseenter mouseleave', e => {\r\n        hovered = e.type === 'mouseenter';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( options.pauseOnFocus ) {\r\n      bind( root, 'focusin focusout', e => {\r\n        focused = e.type === 'focusin';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( toggle ) {\r\n      bind( toggle, 'click', () => {\r\n        stopped ? play() : pause( true );\r\n      } );\r\n    }\r\n\r\n    on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH ], interval.rewind );\r\n    on( EVENT_MOVE, onMove );\r\n  }\r\n\r\n  /**\r\n   * Starts autoplay and clears all flags.\r\n   */\r\n  function play(): void {\r\n    if ( isPaused() && Components.Slides.isEnough() ) {\r\n      interval.start( ! options.resetProgress );\r\n      focused = hovered = stopped = false;\r\n      update();\r\n      emit( EVENT_AUTOPLAY_PLAY );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pauses autoplay.\r\n   *\r\n   * @param stop - If `true`, autoplay keeps paused until `play()` is explicitly called.\r\n   */\r\n  function pause( stop = true ): void {\r\n    stopped = !! stop;\r\n    update();\r\n\r\n    if ( ! isPaused() ) {\r\n      interval.pause();\r\n      emit( EVENT_AUTOPLAY_PAUSE );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles play/pause according to current flags.\r\n   * If autoplay is manually paused, this will do nothing.\r\n   */\r\n  function autoToggle(): void {\r\n    if ( ! stopped ) {\r\n      hovered || focused ? pause( false ) : play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the toggle button status.\r\n   */\r\n  function update(): void {\r\n    if ( toggle ) {\r\n      toggleClass( toggle, CLASS_ACTIVE, ! stopped );\r\n      setAttribute( toggle, ARIA_LABEL, options.i18n[ stopped ? 'play' : 'pause' ] );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on every animation frame while autoplay is active.\r\n   *\r\n   * @param rate - The progress rate between 0 to 1.\r\n   */\r\n  function onAnimationFrame( rate: number ): void {\r\n    const { bar } = Elements;\r\n    bar && style( bar, 'width', `${ rate * 100 }%` );\r\n    emit( EVENT_AUTOPLAY_PLAYING, rate );\r\n  }\r\n\r\n  /**\r\n   * Updates or restores the interval duration.\r\n   *\r\n   * @param index - An index to move to.\r\n   */\r\n  function onMove( index: number ): void {\r\n    const Slide = Components.Slides.getAt( index );\r\n    interval.set( Slide && +getAttribute( Slide.slide, INTERVAL_DATA_ATTRIBUTE ) || options.interval );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: interval.cancel,\r\n    play,\r\n    pause,\r\n    isPaused,\r\n  };\r\n}\r\n","import { EVENT_LAZYLOAD_LOADED, EVENT_MOUNTED, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { apply, child, display } from '../../utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Cover component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface CoverComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for setting the image as the slide background.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Cover component object.\r\n */\r\nexport function Cover( Splide: Splide, Components: Components, options: Options ): CoverComponent {\r\n  const { on } = EventInterface( Splide );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.cover ) {\r\n      on( EVENT_LAZYLOAD_LOADED, apply( toggle, true ) );\r\n      on( [ EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH ], apply( cover, true ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from all slides.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   */\r\n  function cover( cover: boolean ): void {\r\n    Components.Slides.forEach( Slide => {\r\n      const img = child<HTMLImageElement>( Slide.container || Slide.slide, 'img' );\r\n\r\n      if ( img && img.src ) {\r\n        toggle( cover, img, Slide );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from the parent element.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   * @param img   - A target image element.\r\n   * @param Slide - A SlideComponent object where the image belongs.\r\n   */\r\n  function toggle( cover: boolean, img: HTMLImageElement, Slide: SlideComponent ): void {\r\n    Slide.style( 'background', cover ? `center/cover no-repeat url(\"${ img.src }\")` : '', true );\r\n    display( img, cover ? 'none' : '' );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: apply( cover, false ),\r\n  };\r\n}\r\n","import { EVENT_MOVE, EVENT_REFRESH, EVENT_SCROLL, EVENT_SCROLLED, EVENT_UPDATED } from '../../constants/events';\r\nimport { IDLE, SCROLLING } from '../../constants/states';\r\nimport { SLIDE } from '../../constants/types';\r\nimport { EventInterface, RequestInterval, RequestIntervalInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport { abs, apply, approximatelyEqual, floor, max, sign } from '../../utils';\r\nimport { BASE_VELOCITY, BOUNCE_DIFF_THRESHOLD, BOUNCE_DURATION, FRICTION_FACTOR, MIN_DURATION } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Scroll component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ScrollComponent extends BaseComponent {\r\n  scroll( position: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void;\r\n  cancel(): void;\r\n}\r\n\r\n/**\r\n * The component for scrolling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Scroll component object.\r\n */\r\nexport function Scroll( Splide: Splide, Components: Components, options: Options ): ScrollComponent {\r\n  const { on, emit } = EventInterface( Splide );\r\n  const { state: { set } } = Splide;\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, exceededLimit, translate } = Move;\r\n\r\n  /**\r\n   * Retains the active RequestInterval object.\r\n   */\r\n  let interval: RequestIntervalInterface;\r\n\r\n  /**\r\n   * Holds the callback function.\r\n   */\r\n  let callback: AnyFunction;\r\n\r\n  /**\r\n   * The current friction (<= 1).\r\n   */\r\n  let friction = 1;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_MOVE, clear );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], cancel );\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the provided destination.\r\n   *\r\n   * @param destination - The destination to scroll the slider to.\r\n   * @param duration    - Optional. The scroll duration. If omitted, calculates it by the distance.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param onScrolled  - Optional. A callback invoked after scroll ends.\r\n   * @param noConstrain - Optional. Whether to suppress constraint process when the slider exceeds bounds.\r\n   */\r\n  function scroll(\r\n    destination: number,\r\n    duration?: number,\r\n    snap?: boolean,\r\n    onScrolled?: AnyFunction,\r\n    noConstrain?: boolean\r\n  ): void {\r\n    const from = getPosition();\r\n\r\n    clear();\r\n\r\n    if ( snap ) {\r\n      const size   = Components.Layout.sliderSize();\r\n      const offset = sign( destination ) * size * floor( abs( destination ) / size ) || 0;\r\n      destination = Move.toPosition( Components.Controller.toDest( destination % size ) ) + offset;\r\n    }\r\n\r\n    const noDistance = approximatelyEqual( from, destination, 1 );\r\n\r\n    friction = 1;\r\n    duration = noDistance ? 0 : duration || max( abs( destination - from ) / BASE_VELOCITY, MIN_DURATION );\r\n    callback = onScrolled;\r\n    interval = RequestInterval( duration, onEnd, apply( update, from, destination, noConstrain ), 1 );\r\n\r\n    set( SCROLLING );\r\n    emit( EVENT_SCROLL );\r\n    interval.start();\r\n  }\r\n\r\n  /**\r\n   * Called when scroll ends or has been just canceled.\r\n   */\r\n  function onEnd(): void {\r\n    set( IDLE );\r\n    callback && callback();\r\n    emit( EVENT_SCROLLED );\r\n  }\r\n\r\n  /**\r\n   * Called whenever the interval timer is updated.\r\n   *\r\n   * @param from        - A position where scroll starts.\r\n   * @param to          - A destination where the slider goes.\r\n   * @param noConstrain - Whether to suppress constraint process when the slider exceeds bounds.\r\n   * @param rate        - A current rate.\r\n   */\r\n  function update( from: number, to: number, noConstrain: boolean | undefined, rate: number ): void {\r\n    const position = getPosition();\r\n    const target   = from + ( to - from ) * easing( rate );\r\n    const diff     = ( target - position ) * friction;\r\n\r\n    translate( position + diff );\r\n\r\n    if ( Splide.is( SLIDE ) && ! noConstrain && exceededLimit() ) {\r\n      friction *= FRICTION_FACTOR;\r\n\r\n      if ( abs( diff ) < BOUNCE_DIFF_THRESHOLD ) {\r\n        scroll( getLimit( exceededLimit( true ) ), BOUNCE_DURATION, false, undefined, true );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears the active interval.\r\n   */\r\n  function clear(): void {\r\n    if ( interval ) {\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the active interval and emits the `scrolled` event.\r\n   */\r\n  function cancel(): void {\r\n    if ( interval && ! interval.isPaused() ) {\r\n      clear();\r\n      onEnd();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The easing function.\r\n   *\r\n   * @param t - A value to ease.\r\n   *\r\n   * @return An eased value.\r\n   */\r\n  function easing( t: number ): number {\r\n    const { easingFunc } = options;\r\n    return easingFunc ? easingFunc( t ) : 1 - Math.pow( 1 - t, 4 );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: clear,\r\n    scroll,\r\n    cancel,\r\n  };\r\n}\r\n","/**\r\n * Triggers the bounce effect when the diff becomes less than this value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DIFF_THRESHOLD = 10;\r\n\r\n/**\r\n * The duration of the bounce effect.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DURATION = 600;\r\n\r\n/**\r\n * The friction factor.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION_FACTOR = 0.6;\r\n\r\n/**\r\n * The velocity to calculate the scroll duration.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BASE_VELOCITY = 1.5;\r\n\r\n/**\r\n * The minimum duration of scroll.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const MIN_DURATION = 800;\r\n","import { CLASS_ARROW, CLASS_PAGINATION_PAGE } from '../../constants/classes';\r\nimport { EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_MOUNTED, EVENT_UPDATED } from '../../constants/events';\r\nimport { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { DRAGGING, IDLE, MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, isObject, matches, min, noop, prevent, sign, timeOf } from '../../utils';\r\nimport { FRICTION, LOG_INTERVAL, POINTER_DOWN_EVENTS, POINTER_MOVE_EVENTS, POINTER_UP_EVENTS } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Drag component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DragComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n  isDragging(): boolean;\r\n}\r\n\r\n/**\r\n * The component for dragging the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Drag component object.\r\n */\r\nexport function Drag( Splide: Splide, Components: Components, options: Options ): DragComponent {\r\n  const { on, emit, bind, unbind } = EventInterface( Splide );\r\n  const { state } = Splide;\r\n  const { Move, Scroll, Controller, Elements: { track }, Media: { reduce } } = Components;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { getPosition, exceededLimit } = Move;\r\n\r\n  /**\r\n   * The base slider position to calculate the delta of coords.\r\n   */\r\n  let basePosition: number;\r\n\r\n  /**\r\n   * The base event object saved per specific sampling interval.\r\n   */\r\n  let baseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Holds the previous base event object.\r\n   */\r\n  let prevBaseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Indicates whether the drag mode is `free` or not.\r\n   */\r\n  let isFree: boolean;\r\n\r\n  /**\r\n   * Indicates whether the user is dragging the slider or not.\r\n   */\r\n  let dragging: boolean;\r\n\r\n  /**\r\n   * Indicates whether the slider exceeds limits or not.\r\n   * This must not be `undefined` for strict comparison.\r\n   */\r\n  let exceeded = false;\r\n\r\n  /**\r\n   * Turns into `true` when the user starts dragging the slider.\r\n   */\r\n  let clickPrevented: boolean;\r\n\r\n  /**\r\n   * Indicates whether the drag component is now disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * The target element to attach listeners.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind( track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, 'click', onClick, { capture: true } );\r\n    bind( track, 'dragstart', prevent );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { drag } = options;\r\n    disable( ! drag );\r\n    isFree = drag === 'free';\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks or touches the slider.\r\n   * - Needs to prevent the default behaviour when the slider is busy to deny any action, such as dragging images\r\n   * - IE does not support MouseEvent and TouchEvent constructors\r\n   * - The `dragging` state always becomes `true` when the user starts dragging while the slider is moving\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerDown( e: TouchEvent | MouseEvent ): void {\r\n    clickPrevented = false;\r\n\r\n    if ( ! disabled ) {\r\n      const isTouch = isTouchEvent( e );\r\n\r\n      if ( isDraggable( e.target ) && ( isTouch || ! e.button ) ) {\r\n        if ( ! Controller.isBusy() ) {\r\n          target        = isTouch ? track : window;\r\n          dragging      = state.is( [ MOVING, SCROLLING ] );\r\n          prevBaseEvent = null;\r\n\r\n          bind( target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS );\r\n          bind( target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS );\r\n          Move.cancel();\r\n          Scroll.cancel();\r\n          save( e );\r\n        } else {\r\n          prevent( e, true );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called while the user moves the pointer on the slider.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerMove( e: TouchEvent | MouseEvent ): void {\r\n    if ( ! state.is( DRAGGING ) ) {\r\n      state.set( DRAGGING );\r\n      emit( EVENT_DRAG );\r\n    }\r\n\r\n    if ( e.cancelable ) {\r\n      if ( dragging ) {\r\n        Move.translate( basePosition + constrain( diffCoord( e ) ) );\r\n\r\n        const expired     = diffTime( e ) > LOG_INTERVAL;\r\n        const hasExceeded = exceeded !== ( exceeded = exceededLimit() );\r\n\r\n        if ( expired || hasExceeded ) {\r\n          save( e );\r\n        }\r\n\r\n        clickPrevented = true;\r\n        emit( EVENT_DRAGGING );\r\n        prevent( e );\r\n      } else if ( isSliderDirection( e ) ) {\r\n        dragging = shouldStart( e );\r\n        prevent( e );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user releases pointing devices.\r\n   * Needs to move the slider when:\r\n   * - The user drags the slider and the distance exceeds the threshold\r\n   * - The user aborted the slider moving by pointerdown and just released it without dragging the slider\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerUp( e: TouchEvent | MouseEvent ): void {\r\n    if ( state.is( DRAGGING ) ) {\r\n      state.set( IDLE );\r\n      emit( EVENT_DRAGGED );\r\n    }\r\n\r\n    if ( dragging ) {\r\n      move( e );\r\n      prevent( e );\r\n    }\r\n\r\n    unbind( target, POINTER_MOVE_EVENTS, onPointerMove );\r\n    unbind( target, POINTER_UP_EVENTS, onPointerUp );\r\n    dragging = false;\r\n  }\r\n\r\n  /**\r\n   * Called when the track element is clicked.\r\n   * Disables click any elements inside it while dragging.\r\n   *\r\n   * @param e - A MouseEvent object.\r\n   */\r\n  function onClick( e: MouseEvent ): void {\r\n    if ( ! disabled && clickPrevented ) {\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves data at the specific moment.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function save( e: TouchEvent | MouseEvent ): void {\r\n    prevBaseEvent = baseEvent;\r\n    baseEvent     = e;\r\n    basePosition  = getPosition();\r\n  }\r\n\r\n  /**\r\n   * Calculates the destination by the drag velocity and moves the carousel.\r\n   * If motion is reduced, restores transition speed to the initial value\r\n   * because it's \"essential\" motion for the user to recognize what happens on the carousel.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function move( e: TouchEvent | MouseEvent ): void {\r\n    const velocity    = computeVelocity( e );\r\n    const destination = computeDestination( velocity );\r\n    const rewind      = options.rewind && options.rewindByDrag;\r\n\r\n    reduce( false );\r\n\r\n    if ( isFree ) {\r\n      Controller.scroll( destination, 0, options.snap );\r\n    } else if ( Splide.is( FADE ) ) {\r\n      Controller.go( orient( sign( velocity ) ) < 0 ? ( rewind ? '<' : '-' ) : ( rewind ? '>' : '+' ) );\r\n    } else if ( Splide.is( SLIDE ) && exceeded && rewind ) {\r\n      Controller.go( exceededLimit( true ) ? '>' : '<' );\r\n    } else {\r\n      Controller.go( Controller.toDest( destination ), true );\r\n    }\r\n\r\n    reduce( true );\r\n  }\r\n\r\n  /**\r\n   * Checks if the drag distance exceeds the defined threshold.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return `true` if the distance exceeds the threshold, or `false` if not.\r\n   */\r\n  function shouldStart( e: TouchEvent | MouseEvent ): boolean {\r\n    const { dragMinThreshold: thresholds } = options;\r\n    const isObj = isObject( thresholds );\r\n    const mouse = isObj && thresholds.mouse || 0;\r\n    const touch = ( isObj ? thresholds.touch : +thresholds ) || 10;\r\n    return abs( diffCoord( e ) ) > ( isTouchEvent( e ) ? touch : mouse );\r\n  }\r\n\r\n  /**\r\n   * Checks whether dragging towards the slider or the scroll direction.\r\n   *\r\n   * @return `true` if dragging towards the slider direction, or otherwise `false`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function isSliderDirection( e: TouchEvent | MouseEvent ): boolean {\r\n    return abs( diffCoord( e ) ) > abs( diffCoord( e, true ) );\r\n  }\r\n\r\n  /**\r\n   * Computes the drag velocity.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   *\r\n   * @return The drag velocity.\r\n   */\r\n  function computeVelocity( e: TouchEvent | MouseEvent ): number {\r\n    if ( Splide.is( LOOP ) || ! exceeded ) {\r\n      const time = diffTime( e );\r\n\r\n      if ( time && time < LOG_INTERVAL ) {\r\n        return diffCoord( e ) / time;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Computes the destination by the velocity and the `flickPower` option.\r\n   *\r\n   * @param velocity - The drag velocity.\r\n   *\r\n   * @return The destination.\r\n   */\r\n  function computeDestination( velocity: number ): number {\r\n    return getPosition() + sign( velocity ) * min(\r\n      abs( velocity ) * ( options.flickPower || 600 ),\r\n      isFree ? Infinity : Components.Layout.listSize() * ( options.flickMaxPages || 1 )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coord difference between the provided and base events.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return The difference of the coord.\r\n   */\r\n  function diffCoord( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return coordOf( e, orthogonal ) - coordOf( getBaseEvent( e ), orthogonal );\r\n  }\r\n\r\n  /**\r\n   * Returns the elapsed time from the base event to `e`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return The elapsed time in milliseconds.\r\n   */\r\n  function diffTime( e: TouchEvent | MouseEvent ): number {\r\n    return timeOf( e ) - timeOf( getBaseEvent( e ) );\r\n  }\r\n\r\n  /**\r\n   * Returns the base event.\r\n   * If the base event is same with `e`, returns previous one.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return A base event.\r\n   */\r\n  function getBaseEvent( e: TouchEvent | MouseEvent ): TouchEvent | MouseEvent {\r\n    return baseEvent === e && prevBaseEvent || baseEvent;\r\n  }\r\n\r\n  /**\r\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\r\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return A pageX or pageY coordinate.\r\n   */\r\n  function coordOf( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return ( isTouchEvent( e ) ? e.changedTouches[ 0 ] : e )[ `page${ resolve( orthogonal ? 'Y' : 'X' ) }` ];\r\n  }\r\n\r\n  /**\r\n   * Reduces the distance to move by the predefined friction.\r\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\r\n   *\r\n   * @param diff - Diff to constrain.\r\n   *\r\n   * @return The constrained diff.\r\n   */\r\n  function constrain( diff: number ): number {\r\n    return diff / ( exceeded && Splide.is( SLIDE ) ? FRICTION : 1 );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the user can drag the target.\r\n   *\r\n   * @param target - An event target.\r\n   *\r\n   * @return `true` if the target is draggable.\r\n   */\r\n  function isDraggable( target: EventTarget ): boolean {\r\n    const { noDrag } = options;\r\n\r\n    return ! matches( target, `.${ CLASS_PAGINATION_PAGE }, .${ CLASS_ARROW }` )\r\n      && ( ! noDrag || ! matches( target, noDrag ) );\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided event is TouchEvent or MouseEvent.\r\n   *\r\n   * @param e - An event to check.\r\n   *\r\n   * @return `true` if the `e` is TouchEvent.\r\n   */\r\n  function isTouchEvent( e: TouchEvent | MouseEvent ): e is TouchEvent {\r\n    return typeof TouchEvent !== 'undefined' && e instanceof TouchEvent;\r\n  }\r\n\r\n  /**\r\n   * Checks if now the user is dragging the slider or not.\r\n   *\r\n   * @return `true` if the user is dragging the slider or otherwise `false`.\r\n   */\r\n  function isDragging(): boolean {\r\n    return dragging;\r\n  }\r\n\r\n  /**\r\n   * Disables the component.\r\n   *\r\n   * @param value - Set `true` to disable the component.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    isDragging,\r\n  };\r\n}\r\n","import { CLASS_LOADING } from '../../constants/classes';\r\nimport {\r\n  EVENT_LAZYLOAD_LOADED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLLED,\r\n} from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  child,\r\n  create,\r\n  display,\r\n  empty,\r\n  getAttribute,\r\n  queryAll,\r\n  remove,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n} from '../../utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\nimport { IMAGE_SELECTOR, SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the LazyLoad component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The type for each entry.\r\n * Use tuple for better compression.\r\n *\r\n * @since 4.0.0\r\n */\r\ntype LazyLoadEntry = [ HTMLImageElement, SlideComponent, HTMLSpanElement ];\r\n\r\n/**\r\n * The component for lazily loading images.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return An LazyLoad component object.\r\n */\r\nexport function LazyLoad( Splide: Splide, Components: Components, options: Options ): LazyLoadComponent {\r\n  const { on, off, bind, emit } = EventInterface( Splide );\r\n  const isSequential = options.lazyLoad === 'sequential';\r\n  const events       = [ EVENT_MOUNTED, EVENT_REFRESH, EVENT_MOVED, EVENT_SCROLLED ];\r\n\r\n  /**\r\n   * Stores data of images.\r\n   */\r\n  let entries: LazyLoadEntry[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.lazyLoad ) {\r\n      init();\r\n      on( EVENT_REFRESH, init );\r\n      isSequential || on( events, observe );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds images to register entries.\r\n   * Note that spinner can be already available because of `refresh()`.\r\n   */\r\n  function init() {\r\n    empty( entries );\r\n\r\n    Components.Slides.forEach( Slide => {\r\n      queryAll<HTMLImageElement>( Slide.slide, IMAGE_SELECTOR ).forEach( img => {\r\n        const src    = getAttribute( img, SRC_DATA_ATTRIBUTE );\r\n        const srcset = getAttribute( img, SRCSET_DATA_ATTRIBUTE );\r\n\r\n        if ( src !== img.src || srcset !== img.srcset ) {\r\n          const className = options.classes.spinner;\r\n          const parent    = img.parentElement;\r\n          const spinner   = child( parent, `.${ className }` ) || create( 'span', className, parent );\r\n\r\n          entries.push( [ img, Slide, spinner ] );\r\n          img.src || display( img, 'none' );\r\n        }\r\n      } );\r\n    } );\r\n\r\n    isSequential && loadNext();\r\n  }\r\n\r\n  /**\r\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\r\n   * The last `+1` is for the current page.\r\n   */\r\n  function observe(): void {\r\n    entries = entries.filter( data => {\r\n      const distance = options.perPage * ( ( options.preloadPages || 1 ) + 1 ) - 1;\r\n      return data[ 1 ].isWithin( Splide.index, distance ) ? load( data ) : true;\r\n    } );\r\n\r\n    entries.length || off( events );\r\n  }\r\n\r\n  /**\r\n   * Starts loading the image in the data.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   */\r\n  function load( data: LazyLoadEntry ): void {\r\n    const [ img ] = data;\r\n\r\n    addClass( data[ 1 ].slide, CLASS_LOADING );\r\n    bind( img, 'load error', apply( onLoad, data ) );\r\n\r\n    setAttribute( img, 'src', getAttribute( img, SRC_DATA_ATTRIBUTE ) );\r\n    setAttribute( img, 'srcset', getAttribute( img, SRCSET_DATA_ATTRIBUTE ) );\r\n    removeAttribute( img, SRC_DATA_ATTRIBUTE );\r\n    removeAttribute( img, SRCSET_DATA_ATTRIBUTE );\r\n  }\r\n\r\n  /**\r\n   * Called when the image is loaded or any error occurs.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   * @param e    - An Event object.\r\n   */\r\n  function onLoad( data: LazyLoadEntry, e: Event ): void {\r\n    const [ img, Slide ] = data;\r\n\r\n    removeClass( Slide.slide, CLASS_LOADING );\r\n\r\n    if ( e.type !== 'error' ) {\r\n      remove( data[ 2 ] );\r\n      display( img, '' );\r\n      emit( EVENT_LAZYLOAD_LOADED, img, Slide );\r\n      emit( EVENT_RESIZE );\r\n    }\r\n\r\n    isSequential && loadNext();\r\n  }\r\n\r\n  /**\r\n   * Starts loading a next image.\r\n   */\r\n  function loadNext(): void {\r\n    entries.length && load( entries.shift() );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: apply( empty, entries ),\r\n  };\r\n}\r\n","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport {\r\n  ARIA_CONTROLS,\r\n  ARIA_LABEL,\r\n  ARIA_ORIENTATION,\r\n  ARIA_SELECTED,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport { CLASS_ACTIVE, CLASS_PAGINATION } from '../../constants/classes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_MOVE,\r\n  EVENT_PAGINATION_MOUNTED,\r\n  EVENT_PAGINATION_UPDATED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  ceil,\r\n  create,\r\n  empty,\r\n  focus,\r\n  format,\r\n  prevent,\r\n  remove,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  slice,\r\n} from '../../utils';\r\nimport { normalizeKey } from '../../utils/dom/normalizeKey/normalizeKey';\r\n\r\n\r\n/**\r\n * The interface for the Pagination component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationComponent extends BaseComponent {\r\n  items: PaginationItem[];\r\n  getAt( index: number ): PaginationItem;\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The interface for data of the pagination.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationData {\r\n  list: HTMLUListElement;\r\n  items: PaginationItem[];\r\n}\r\n\r\n/**\r\n * The interface for each pagination item.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationItem {\r\n  li: HTMLLIElement;\r\n  button: HTMLButtonElement;\r\n  page: number;\r\n}\r\n\r\n/**\r\n * The component for the pagination UI (a slide picker).\r\n *\r\n * @link https://www.w3.org/TR/2021/NOTE-wai-aria-practices-1.2-20211129/#grouped-carousel-elements\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Pagination component object.\r\n */\r\nexport function Pagination( Splide: Splide, Components: Components, options: Options ): PaginationComponent {\r\n  const event = EventInterface( Splide );\r\n  const { on, emit, bind } = event;\r\n  const { Slides, Elements, Controller } = Components;\r\n  const { hasFocus, getIndex, go } = Controller;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Stores all pagination items.\r\n   */\r\n  const items: PaginationItem[] = [];\r\n\r\n  /**\r\n   * The pagination element.\r\n   */\r\n  let list: HTMLUListElement | null;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let paginationClasses: string;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    destroy();\r\n\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], mount );\r\n\r\n    if ( options.pagination && Slides.isEnough() ) {\r\n      on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_SCROLLED ], update );\r\n      createPagination();\r\n      update();\r\n      emit( EVENT_PAGINATION_MOUNTED, { list, items }, getAt( Splide.index ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    if ( list ) {\r\n      remove( Elements.pagination ? slice( list.children ) : list );\r\n      removeClass( list, paginationClasses );\r\n      empty( items );\r\n      list = null;\r\n    }\r\n\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Creates the pagination element and appends it to the slider.\r\n   */\r\n  function createPagination(): void {\r\n    const { length } = Splide;\r\n    const { classes, i18n, perPage } = options;\r\n    const max = hasFocus() ? length : ceil( length / perPage );\r\n\r\n    list = Elements.pagination || create( 'ul', classes.pagination, Elements.track.parentElement );\r\n\r\n    addClass( list, ( paginationClasses = `${ CLASS_PAGINATION }--${ getDirection() }` ) );\r\n    setAttribute( list, ROLE, 'tablist' );\r\n    setAttribute( list, ARIA_LABEL, i18n.select );\r\n    setAttribute( list, ARIA_ORIENTATION, getDirection() === TTB ? 'vertical' : '' );\r\n\r\n    for ( let i = 0; i < max; i++ ) {\r\n      const li       = create( 'li', null, list );\r\n      const button   = create( 'button', { class: classes.page, type: 'button' }, li );\r\n      const controls = Slides.getIn( i ).map( Slide => Slide.slide.id );\r\n      const text     = ! hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\r\n\r\n      bind( button, 'click', apply( onClick, i ) );\r\n\r\n      if ( options.paginationKeyboard ) {\r\n        bind( button, 'keydown', apply( onKeydown, i ) );\r\n      }\r\n\r\n      setAttribute( li, ROLE, 'presentation' );\r\n      setAttribute( button, ROLE, 'tab' );\r\n      setAttribute( button, ARIA_CONTROLS, controls.join( ' ' ) );\r\n      setAttribute( button, ARIA_LABEL, format( text, i + 1 ) );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n\r\n      items.push( { li, button, page: i } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks each pagination dot.\r\n   * Moves the focus to the active slide for accessibility.\r\n   *\r\n   * @link https://www.w3.org/WAI/tutorials/carousels/functionality/\r\n   *\r\n   * @param page - A clicked page index.\r\n   */\r\n  function onClick( page: number ): void {\r\n    go( `>${ page }`, true );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the pagination.\r\n   *\r\n   * @link https://www.w3.org/TR/2021/NOTE-wai-aria-practices-1.2-20211129/#keyboard-interaction-21\r\n   *\r\n   * @param page - A page index.\r\n   * @param e    - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( page: number, e: KeyboardEvent ): void {\r\n    const { length } = items;\r\n    const key = normalizeKey( e );\r\n    const dir = getDirection();\r\n\r\n    let nextPage = -1;\r\n\r\n    if ( key === resolve( ARROW_RIGHT, false, dir ) ) {\r\n      nextPage = ++page % length;\r\n    } else if ( key === resolve( ARROW_LEFT, false, dir ) ) {\r\n      nextPage = ( --page + length ) % length;\r\n    } else if ( key === 'Home' ) {\r\n      nextPage = 0;\r\n    } else if ( key === 'End' ) {\r\n      nextPage = length - 1;\r\n    }\r\n\r\n    const item = items[ nextPage ];\r\n\r\n    if ( item ) {\r\n      focus( item.button );\r\n      go( `>${ nextPage }` );\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the latest direction for pagination.\r\n   */\r\n  function getDirection(): Options['direction'] {\r\n    return options.paginationDirection || options.direction;\r\n  }\r\n\r\n  /**\r\n   * Returns the pagination item at the specified index.\r\n   *\r\n   * @param index - An index.\r\n   *\r\n   * @return A pagination item object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): PaginationItem | undefined {\r\n    return items[ Controller.toPage( index ) ];\r\n  }\r\n\r\n  /**\r\n   * Updates the pagination status.\r\n   */\r\n  function update(): void {\r\n    const prev = getAt( getIndex( true ) );\r\n    const curr = getAt( getIndex() );\r\n\r\n    if ( prev ) {\r\n      const { button } = prev;\r\n      removeClass( button, CLASS_ACTIVE );\r\n      removeAttribute( button, ARIA_SELECTED );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n    }\r\n\r\n    if ( curr ) {\r\n      const { button } = curr;\r\n      addClass( button, CLASS_ACTIVE );\r\n      setAttribute( button, ARIA_SELECTED, true );\r\n      setAttribute( button, TAB_INDEX, '' );\r\n    }\r\n\r\n    emit( EVENT_PAGINATION_UPDATED, { list, items }, prev, curr );\r\n  }\r\n\r\n  return {\r\n    items,\r\n    mount,\r\n    destroy,\r\n    getAt,\r\n    update,\r\n  };\r\n}\r\n","import { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { MOVING } from '../../constants/states';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, prevent, timeOf } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Wheel component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface WheelComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for observing the mouse wheel and moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Wheel component object.\r\n */\r\nexport function Wheel( Splide: Splide, Components: Components, options: Options ): WheelComponent {\r\n  const { bind } = EventInterface( Splide );\r\n\r\n  /**\r\n   * Holds the last time when the wheel moves the slider.\r\n   */\r\n  let lastTime = 0;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.wheel ) {\r\n      bind( Components.Elements.track, 'wheel', onWheel, SCROLL_LISTENER_OPTIONS );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user rotates the mouse wheel on the slider.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function onWheel( e: WheelEvent ): void {\r\n    if ( e.cancelable ) {\r\n      const { deltaY } = e;\r\n      const backwards = deltaY < 0;\r\n      const timeStamp = timeOf( e );\r\n      const min       = options.wheelMinThreshold || 0;\r\n      const sleep     = options.wheelSleep || 0;\r\n\r\n      if ( abs( deltaY ) > min && timeStamp - lastTime > sleep ) {\r\n        Splide.go( backwards ? '<' : '>' );\r\n        lastTime = timeStamp;\r\n      }\r\n\r\n      shouldPrevent( backwards ) && prevent( e );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether the component should prevent the default action of the wheel event or not.\r\n   *\r\n   * @param backwards - Set this to `true` for backwards direction.\r\n   *\r\n   * @return `true` if the action should be prevented.\r\n   */\r\n  function shouldPrevent( backwards: boolean ): boolean {\r\n    return ! options.releaseWheel\r\n      || Splide.state.is( MOVING )\r\n      || Components.Controller.getAdjacent( backwards ) !== -1;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n  };\r\n}\r\n","import { ARIA_LIVE, ARIA_RELEVANT } from '../../constants/attributes';\r\nimport { CLASS_SR } from '../../constants/classes';\r\nimport { EVENT_AUTOPLAY_PAUSE, EVENT_AUTOPLAY_PLAY, EVENT_MOVED, EVENT_SCROLLED } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { append, apply, create, remove, removeAttribute, setAttribute } from '../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Live component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface LiveComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * The component for implementing Live Region to the slider.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Live component object.\r\n */\r\nexport function Live( Splide: Splide, Components: Components, options: Options ): LiveComponent {\r\n  const { on } = EventInterface( Splide );\r\n  const { track } = Components.Elements;\r\n  const { live } = options;\r\n\r\n  /**\r\n   * Indicates whether the live region is enabled or not.\r\n   */\r\n  const enabled = live && ! options.isNavigation;\r\n\r\n  /**\r\n   * The span element for the SR only text.\r\n   */\r\n  const sr = create( 'span', CLASS_SR );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * The `aria-relevant` attribute is important to prevent SR from reading contents twice.\r\n   */\r\n  function mount(): void {\r\n    if ( enabled ) {\r\n      disable( ! Components.Autoplay.isPaused() );\r\n      setAttribute( track, ARIA_RELEVANT, 'additions' );\r\n      sr.textContent = '…';\r\n\r\n      on( EVENT_AUTOPLAY_PLAY, apply( disable, true ) );\r\n      on( EVENT_AUTOPLAY_PAUSE, apply( disable, false ) );\r\n      on( [ EVENT_MOVED, EVENT_SCROLLED ], apply( append, track, sr ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    removeAttribute( track, [ ARIA_LIVE, ARIA_RELEVANT ] );\r\n    remove( sr );\r\n  }\r\n\r\n  /**\r\n   * Disables/enables the live region.\r\n   * Does nothing when the `live` option is not enabled.\r\n   *\r\n   * @param disabled - `true` to disable the live region or `false` to enable it again.\r\n   */\r\n  function disable( disabled: boolean ): void {\r\n    if ( enabled ) {\r\n      setAttribute( track, ARIA_LIVE, disabled ? 'off' : 'polite' );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    destroy,\r\n  };\r\n}","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type              : 'slide',\r\n  role              : 'region',\r\n  speed             : 400,\r\n  perPage           : 1,\r\n  cloneStatus       : true,\r\n  arrows            : true,\r\n  pagination        : true,\r\n  paginationKeyboard: true,\r\n  interval          : 5000,\r\n  pauseOnHover      : true,\r\n  pauseOnFocus      : true,\r\n  resetProgress     : true,\r\n  easing            : 'cubic-bezier(0.25, 1, 0.5, 1)',\r\n  drag              : true,\r\n  direction         : 'ltr',\r\n  trimSpace         : true,\r\n  focusableNodes    : 'a, button, textarea, input, select, iframe',\r\n  live              : true,\r\n  classes           : CLASSES,\r\n  i18n              : I18N,\r\n  reducedMotion: {\r\n    speed      : 0,\r\n    rewindSpeed: 0,\r\n    autoplay   : 'pause',\r\n  },\r\n};","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev      : 'Previous slide',\r\n  next      : 'Next slide',\r\n  first     : 'Go to first slide',\r\n  last      : 'Go to last slide',\r\n  slideX    : 'Go to slide %s',\r\n  pageX     : 'Go to page %s',\r\n  play      : 'Start autoplay',\r\n  pause     : 'Pause autoplay',\r\n  carousel  : 'carousel',\r\n  slide     : 'slide',\r\n  select    : 'Select a slide to show',\r\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\r\n};\r\n","import { EVENT_MOUNTED, EVENT_REFRESH } from '../../constants/events';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { nextTick, noop, rect, unit, style } from '../../utils';\r\n\r\n\r\n/**\r\n * The component for the fade transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Fade( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\r\n  const { on } = EventInterface( Splide );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * The nextTick disables the initial fade transition of the first slide.\r\n   */\r\n  function mount(): void {\r\n    on( [ EVENT_MOUNTED, EVENT_REFRESH ], () => {\r\n      nextTick( () => {\r\n        Components.Slides.style( 'transition', `opacity ${ options.speed }ms ${ options.easing }` );\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * Explicitly sets the track height to avoid it will collapse in Safari.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const { track } = Components.Elements;\r\n    style( track, 'height', unit( rect( track ).height ) );\r\n\r\n    nextTick( () => {\r\n      done();\r\n      style( track, 'height', '' );\r\n    } );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel: noop,\r\n  };\r\n}\r\n","import { SLIDE } from '../../constants/types';\r\nimport { EventInterface } from '../../constructors';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { abs, apply, style } from '../../utils';\r\n\r\n\r\n/**\r\n * The component for the slide transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Slide( Splide: Splide, Components: Components, options: Options ): TransitionComponent {\r\n  const { bind } = EventInterface( Splide );\r\n  const { Move, Controller, Scroll } = Components;\r\n  const { list } = Components.Elements;\r\n  const transition = apply( style, list, 'transition' );\r\n\r\n  /**\r\n   * Holds the `done` callback function.\r\n   */\r\n  let endCallback: () => void;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind( list, 'transitionend', e => {\r\n      if ( e.target === list && endCallback ) {\r\n        cancel();\r\n        endCallback();\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * The Move component calls this method just before the slider moves.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const destination = Move.toPosition( index, true );\r\n    const position    = Move.getPosition();\r\n    const speed       = getSpeed( index );\r\n\r\n    if ( abs( destination - position ) >= 1 && speed >= 1 ) {\r\n      if ( options.useScroll ) {\r\n        Scroll.scroll( destination, speed, false, done );\r\n      } else {\r\n        transition( `transform ${ speed }ms ${ options.easing }` );\r\n        Move.translate( destination, true );\r\n        endCallback = done;\r\n      }\r\n    } else {\r\n      Move.jump( index );\r\n      done();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the transition.\r\n   */\r\n  function cancel(): void {\r\n    transition( '' );\r\n    Scroll.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the transition speed.\r\n   *\r\n   * @param index - A destination index.\r\n   */\r\n  function getSpeed( index: number ): number {\r\n    const { rewindSpeed } = options;\r\n\r\n    if ( Splide.is( SLIDE ) && rewindSpeed ) {\r\n      const prev = Controller.getIndex( true );\r\n      const end  = Controller.getEnd();\r\n\r\n      if ( ( prev === 0 && index >= end ) || ( prev >= end && index === 0 ) ) {\r\n        return rewindSpeed;\r\n      }\r\n    }\r\n\r\n    return options.speed;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel,\r\n  };\r\n}\r\n","import * as ComponentConstructors from '../../components';\r\nimport { SlideMatcher } from '../../components/Slides/Slides';\r\nimport { CLASS_INITIALIZED } from '../../constants/classes';\r\nimport { DEFAULTS } from '../../constants/defaults';\r\nimport { EVENT_DESTROY, EVENT_MOUNTED, EVENT_READY, EVENT_REFRESH } from '../../constants/events';\r\nimport { DATA_ATTRIBUTE } from '../../constants/project';\r\nimport { CREATED, DESTROYED, IDLE, STATES } from '../../constants/states';\r\nimport { FADE } from '../../constants/types';\r\nimport { EventInterface, EventInterfaceObject, State, StateObject } from '../../constructors';\r\nimport { Fade, Slide } from '../../transitions';\r\nimport { AnyFunction, ComponentConstructor, Components, EventMap, Options, SyncTarget } from '../../types';\r\nimport { addClass, assert, assign, empty, forOwn, getAttribute, isString, merge, query, slice } from '../../utils';\r\nimport { ARIA_LABEL, ARIA_LABELLEDBY } from \"../../constants/attributes\";\r\n\r\n\r\n/**\r\n * The frontend class for the Splide slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class Splide {\r\n  /**\r\n   * Changes the default options for all Splide instances.\r\n   */\r\n  static defaults: Options = {};\r\n\r\n  /**\r\n   * The collection of state numbers.\r\n   */\r\n  static readonly STATES = STATES;\r\n\r\n  /**\r\n   * The root element where the Splide is applied.\r\n   */\r\n  readonly root: HTMLElement;\r\n\r\n  /**\r\n   * The EventBusObject object.\r\n   */\r\n  readonly event: EventInterfaceObject = EventInterface();\r\n\r\n  /**\r\n   * The collection of all component objects.\r\n   */\r\n  readonly Components: Components = {} as Components;\r\n\r\n  /**\r\n   * The StateObject object.\r\n   */\r\n  readonly state: StateObject = State( CREATED );\r\n\r\n  /**\r\n   * An array with SyncTarget objects for splide instances to sync with.\r\n   */\r\n  readonly splides: SyncTarget[] = [];\r\n\r\n  /**\r\n   * The current options.\r\n   */\r\n  private readonly _o: Options = {};\r\n\r\n  /**\r\n   * The collection of all components.\r\n   */\r\n  private _C: Components;\r\n\r\n  /**\r\n   * The collection of extensions.\r\n   */\r\n  private _E: Record<string, ComponentConstructor> = {};\r\n\r\n  /**\r\n   * The Transition component.\r\n   */\r\n  private _T: ComponentConstructor;\r\n\r\n  /**\r\n   * The Splide constructor.\r\n   *\r\n   * @param target  - The selector for the target element, or the element itself.\r\n   * @param options - Optional. An object with options.\r\n   */\r\n  constructor( target: string | HTMLElement, options?: Options ) {\r\n    const root = isString( target ) ? query<HTMLElement>( document, target ) : target;\r\n    assert( root, `${ root } is invalid.` );\r\n\r\n    this.root = root;\r\n\r\n    options = merge( {\r\n      label     : getAttribute( root, ARIA_LABEL ) || '',\r\n      labelledby: getAttribute( root, ARIA_LABELLEDBY ) || '',\r\n    }, DEFAULTS, Splide.defaults, options || {} );\r\n\r\n    try {\r\n      merge( options, JSON.parse( getAttribute( root, DATA_ATTRIBUTE ) ) );\r\n    } catch ( e ) {\r\n      assert( false, 'Invalid JSON' );\r\n    }\r\n\r\n    this._o = Object.create( merge( {}, options ) );\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   *\r\n   * @param Extensions - Optional. An object with extensions.\r\n   * @param Transition - Optional. A Transition component.\r\n   *\r\n   * @return `this`\r\n   */\r\n  mount( Extensions?: Record<string, ComponentConstructor>, Transition?: ComponentConstructor ): this {\r\n    const { state, Components } = this;\r\n    assert( state.is( [ CREATED, DESTROYED ] ), 'Already mounted!' );\r\n\r\n    state.set( CREATED );\r\n\r\n    this._C = Components;\r\n    this._T = Transition || this._T || ( this.is( FADE ) ? Fade : Slide );\r\n    this._E = Extensions || this._E;\r\n\r\n    const Constructors = assign( {}, ComponentConstructors, this._E, { Transition: this._T } );\r\n\r\n    forOwn( Constructors, ( Component, key ) => {\r\n      const component = Component( this, Components, this._o );\r\n      Components[ key ] = component;\r\n      component.setup && component.setup();\r\n    } );\r\n\r\n    forOwn( Components, component => {\r\n      component.mount && component.mount();\r\n    } );\r\n\r\n    this.emit( EVENT_MOUNTED );\r\n\r\n    addClass( this.root, CLASS_INITIALIZED );\r\n\r\n    state.set( IDLE );\r\n    this.emit( EVENT_READY );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Syncs the slider with the provided one.\r\n   * This method must be called before the `mount()`.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var primary   = new Splide();\r\n   * var secondary = new Splide();\r\n   *\r\n   * primary.sync( secondary );\r\n   * primary.mount();\r\n   * secondary.mount();\r\n   * ```\r\n   *\r\n   * @param splide - A Splide instance to sync with.\r\n   *\r\n   * @return `this`\r\n   */\r\n  sync( splide: Splide ): this {\r\n    this.splides.push( { splide } );\r\n    splide.splides.push( { splide: this, isParent: true } );\r\n\r\n    if ( this.state.is( IDLE ) ) {\r\n      this._C.Sync.remount();\r\n      splide.Components.Sync.remount();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the slider with the following control pattern.\r\n   *\r\n   * | Pattern | Description |\r\n   * |---|---|\r\n   * | `i` | Goes to the slide `i` |\r\n   * | `'+${i}'` | Increments the slide index by `i` |\r\n   * | `'-${i}'` | Decrements the slide index by `i` |\r\n   * | `'>'` | Goes to the next page |\r\n   * | `'<'` | Goes to the previous page |\r\n   * | `>${i}` | Goes to the page `i` |\r\n   *\r\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\r\n   * because they respect `perPage` and `perMove` options.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Goes to the slide 1:\r\n   * splide.go( 1 );\r\n   *\r\n   * // Increments the index:\r\n   * splide.go( '+2' );\r\n   *\r\n   * // Goes to the next page:\r\n   * splide.go( '>' );\r\n   *\r\n   * // Goes to the page 2:\r\n   * splide.go( '>2' );\r\n   * ```\r\n   *\r\n   * @param control - A control pattern.\r\n   *\r\n   * @return `this`\r\n   */\r\n  go( control: number | string ): this {\r\n    this._C.Controller.go( control );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an event handler.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Listens to a single event:\r\n   * splide.on( 'move', function() {} );\r\n   *\r\n   * // Listens to multiple events:\r\n   * splide.on( 'move resize', function() {} );\r\n   *\r\n   * // Appends a namespace:\r\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function.\r\n   *\r\n   * @return `this`\r\n   */\r\n  on<K extends keyof EventMap>( events: K, callback: EventMap[ K ] ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this {\r\n    this.event.on( events, callback );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the registered all handlers for the specified event or events.\r\n   * If you want to only remove a particular handler, use namespace to identify it.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   *\r\n   * // Removes all handlers assigned to \"move\":\r\n   * splide.off( 'move' );\r\n   *\r\n   * // Only removes handlers that belong to the specified namespace:\r\n   * splide.off( 'move.myNamespace' );\r\n   * ```\r\n   *\r\n   * @param events - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   *\r\n   * @return `this`\r\n   */\r\n  off<K extends keyof EventMap>( events: K | K[] | string | string[] ): this {\r\n    this.event.off( events );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Emits an event and triggers registered handlers.\r\n   *\r\n   * @param event - An event name to emit.\r\n   * @param args  - Optional. Any number of arguments to pass to handlers.\r\n   *\r\n   * @return `this`\r\n   */\r\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): this;\r\n  emit( event: string, ...args: any[] ): this;\r\n  emit( event: string ): this {\r\n    // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n    this.event.emit( event, ...slice( arguments, 1 ) );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide at the specified position.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * var splide = new Splide();\r\n   * splide.mount();\r\n   *\r\n   * // Adds the slide by the HTML:\r\n   * splide.add( '<li></li> );\r\n   *\r\n   * // or adds the element:\r\n   * splide.add( document.createElement( 'li' ) );\r\n   * ```\r\n   *\r\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\r\n   * @param index  - Optional. An index to insert a slide at.\r\n   *\r\n   * @return `this`\r\n   */\r\n  add( slides: string | HTMLElement | Array<string | HTMLElement>, index?: number ): this {\r\n    this._C.Slides.add( slides, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  remove( matcher: SlideMatcher ): this {\r\n    this._C.Slides.remove( matcher );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks the slider type.\r\n   *\r\n   * @param type - A type to test.\r\n   *\r\n   * @return `true` if the type matches the current one, or otherwise `false`.\r\n   */\r\n  is( type: string ): boolean {\r\n    return this._o.type === type;\r\n  }\r\n\r\n  /**\r\n   * Refreshes the slider.\r\n   *\r\n   * @return `this`\r\n   */\r\n  refresh(): this {\r\n    this.emit( EVENT_REFRESH );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Destroys the slider.\r\n   *\r\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\r\n   *\r\n   * @return `this`\r\n   */\r\n  destroy( completely = true ): this {\r\n    const { event, state } = this;\r\n\r\n    if ( state.is( CREATED ) ) {\r\n      // Postpones destruction requested before the slider becomes ready.\r\n      EventInterface( this ).on( EVENT_READY, this.destroy.bind( this, completely ) );\r\n    } else {\r\n      forOwn( this._C, component => {\r\n        component.destroy && component.destroy( completely );\r\n      }, true );\r\n\r\n      event.emit( EVENT_DESTROY );\r\n      event.destroy();\r\n      completely && empty( this.splides );\r\n      state.set( DESTROYED );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns options.\r\n   *\r\n   * @return An object with the latest options.\r\n   */\r\n  get options(): Options {\r\n    return this._o;\r\n  }\r\n\r\n  /**\r\n   * Merges options to the current options and emits `updated` event.\r\n   *\r\n   * @param options - An object with new options.\r\n   */\r\n  set options( options: Options ) {\r\n    this._C.Media.set( options, true );\r\n  }\r\n\r\n  /**\r\n   * Returns the number of slides without clones.\r\n   *\r\n   * @return The number of slides.\r\n   */\r\n  get length(): number {\r\n    return this._C.Slides.getLength( true );\r\n  }\r\n\r\n  /**\r\n   * Returns the active slide index.\r\n   *\r\n   * @return The active slide index.\r\n   */\r\n  get index(): number {\r\n    return this._C.Controller.getIndex();\r\n  }\r\n}\r\n"],"names":["MEDIA_PREFERS_REDUCED_MOTION","MOVING","SCROLLING","STATES","CREATED","MOUNTED","IDLE","DRAGGING","DESTROYED","empty","array","length","slice","arrayLike","start","end","Array","prototype","call","apply","func","bind","arguments","noop","nextTick","setTimeout","raf","requestAnimationFrame","typeOf","type","subject","isObject","isNull","isArray","isFunction","isString","isUndefined","isHTMLElement","HTMLElement","toArray","value","forEach","values","iteratee","includes","indexOf","push","items","toggleClass","elm","classes","add","name","classList","addClass","split","append","parent","children","appendChild","before","nodes","ref","node","parentNode","insertBefore","matches","selector","children2","filter","child","firstElementChild","ownKeys","Object","keys","forOwn","object","right","reverse","i","key","assign","source","merge","omit","removeAttribute","elms","attrs","attr","setAttribute","value2","String","create","tag","document","createElement","style","prop","getComputedStyle","display","display2","focus","preventScroll","getAttribute","hasClass","className","contains","rect","target","getBoundingClientRect","remove","removeChild","parseHtml","html","DOMParser","parseFromString","body","prevent","e","stopPropagation","preventDefault","stopImmediatePropagation","query","querySelector","queryAll","querySelectorAll","removeClass","timeOf","timeStamp","unit","PROJECT_CODE","DATA_ATTRIBUTE","assert","condition","message","Error","min","Math","max","floor","ceil","abs","approximatelyEqual","x","y","epsilon","between","number","minOrMax","maxOrMin","exclusive","minimum","maximum","clamp","sign","format","string","replacements","replacement","replace","pad","ids","EventBinder","listeners","forEachEvent","targets","events","events2","eventNS","fragment","callback","options","event","namespace","isEventTarget","remover","removeEventListener","addEventListener","unbind","listener","dispatch","detail","CustomEvent","bubbles","createEvent","initCustomEvent","dispatchEvent","destroy","data","EVENT_MOUNTED","EVENT_MOVE","EVENT_MOVED","EVENT_SHIFTED","EVENT_CLICK","EVENT_ACTIVE","EVENT_INACTIVE","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_SLIDE_KEYDOWN","EVENT_REFRESH","EVENT_UPDATED","EVENT_RESIZE","EVENT_RESIZED","EVENT_SCROLL","EVENT_SCROLLED","EVENT_DESTROY","EVENT_NAVIGATION_MOUNTED","EVENT_AUTOPLAY_PLAY","EVENT_AUTOPLAY_PAUSE","EVENT_LAZYLOAD_LOADED","EventInterface","Splide2","bus","createDocumentFragment","binder","on","join","off","emit","RequestInterval","interval","onInterval","onUpdate","limit","startTime","id","now","Date","rate","paused","count","update","pause","cancel","cancelAnimationFrame","resume","rewind","set","time","isPaused","State","initialState","state","is","states","ARROW","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","TTB","ORIENTATION_MAP","width","left","X","Y","ArrowLeft","ArrowRight","ROLE","TAB_INDEX","ARIA_PREFIX","ARIA_CONTROLS","ARIA_CURRENT","ARIA_SELECTED","ARIA_LABEL","ARIA_LABELLEDBY","ARIA_HIDDEN","ARIA_ORIENTATION","ARIA_ROLEDESCRIPTION","ARIA_LIVE","ARIA_RELEVANT","ALL_ATTRIBUTES","CLASS_ROOT","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_CONTAINER","CLASS_ARROWS","CLASS_ARROW","CLASS_ARROW_PREV","CLASS_ARROW_NEXT","CLASS_PAGINATION","CLASS_PAGINATION_PAGE","CLASS_PROGRESS_BAR","CLASS_TOGGLE","CLASS_SR","CLASS_ACTIVE","CLASS_PREV","CLASS_NEXT","CLASS_VISIBLE","CLASS_LOADING","CLASS_FOCUS_IN","STATUS_CLASSES","POINTER_DOWN_EVENTS","POINTER_MOVE_EVENTS","POINTER_UP_EVENTS","SLIDE","LOOP","FADE","Slide","index","slideIndex","slide","destroyed","Components","root","isNavigation","updateOnMove","i18n","pagination","slideFocus","resolve","Direction","styles","label","isClone","container","focusableNodes","initNavigation","controls","splides","map","Slide2","splide","Slides","getAt","slideX","onMove","curr","active","isActive","self","visible","trackRect","Elements","track","slideRect","isVisible","hidden","activeElement","updateVisibility","cloneStatus","mount","slideLabel","useContainer","_style","isWithin","from","distance","diff","INTERVAL_DATA_ATTRIBUTE","SCROLL_LISTENER_OPTIONS","passive","capture","NORMALIZATION_MAP","Spacebar","Right","Left","Up","Down","normalizeKey","KEYBOARD_EVENT","SRC_DATA_ATTRIBUTE","SRCSET_DATA_ATTRIBUTE","IMAGE_SELECTOR","TRIGGER_KEYS","Components2","breakpoints","reducedMotion","queries","completely","register","options2","queryList","matchMedia","direction","merged","reduce","merged2","entry","refresh","opts","user","getPrototypeOf","setup","isMin","mediaQuery","sort","n","m","enable","axisOnly","match","offset","toLowerCase","charAt","toUpperCase","orient","list","isUsingKey","elements","slides","rootClasses","trackClasses","find","arrows","prev","next","bar","toggle","prefix","uniqueId","role","tagName","carousel","init","concat","getClasses","labelledby","closest","nodeType","parentElement","base","drag","Slides2","get","excludeClones","matcher","Slide1","getIn","page","Controller","toIndex","hasFocus","perPage","forEachItem","images","img","removeNode","getLength","isEnough","vertical","rootRect","styleSlides","cssPadding","resize","newRect","height","cssHeight","cssTrackHeight","gap","autoWidth","fixedWidth","cssSlideSize","fixedHeight","autoHeight","padding","heightRatio","totalSize","withoutGap","getGap","parseFloat","duration","window","listSize","slideSize","sliderSize","getPadding","cloneCount","clones","computeCloneCount","isHead","clone","cloneNode","cloneDeep","generate","observe","fixedSize","clones2","Layout","Transition","reposition","isBusy","Scroll","jump","translate","toPosition","position","preventLoop","destination","exceededMin","exceededMax","getPosition","exceededLimit","shift","loop","backwards","excess","getLimit","size","trimming","trimSpace","trim","getEnd","move","dest","shifted","minDistance","Infinity","slideCount","perMove","Move","isLoop","isSlide","getNext","getAdjacent","getPrev","currIndex","prevIndex","computeDestIndex","snapPage","computeMovableDestIndex","toPage","setIndex","waitForTransition","go","control","allowSameIndex","indicator","parse","scroll","snap","getIndex","toDest","created","wrapperClasses","userArrows","wrapper","enabled","createArrow","remount","prev2","arrow","arrowPath","nextIndex","prevLabel","last","nextLabel","first","disabled","hovered","focused","autoplay","stopped","play","resetProgress","stop","autoToggle","pauseOnHover","pauseOnFocus","listen","cover","cover2","src","friction","onScrolled","noConstrain","clear","noDistance","onEnd","to","t","easingFunc","pow","basePosition","baseEvent","prevBaseEvent","isFree","dragging","clickPrevented","Media","exceeded","disable","onPointerDown","isTouch","target2","noDrag","isTouchEvent","button","onPointerMove","onPointerUp","save","thresholds","isObj","cancelable","diffCoord","expired","diffTime","hasExceeded","dragMinThreshold","mouse","touch","velocity","computeVelocity","flickPower","flickMaxPages","computeDestination","rewindByDrag","onClick","orthogonal","coordOf","getBaseEvent","changedTouches","TouchEvent","isDragging","keyboard","onKeydown","_disabled","isSequential","lazyLoad","entries","srcset","spinner","loadNext","preloadPages","load","onLoad","paginationClasses","dir","getDirection","nextPage","item","paginationDirection","select","li","class","text","pageX","paginationKeyboard","createPagination","isParent","sync","lastTime","onWheel","deltaY","sleep","wheelMinThreshold","wheelSleep","releaseWheel","wheel","live","sr","Autoplay","textContent","DEFAULTS","speed","easing","rewindSpeed","Fade","done","endCallback","transition","getSpeed","useScroll","Splide","_o","_E","_Splide","defaults","JSON","Extensions","this","_C","_T","ComponentConstructors","Component","component","_this","Sync"],"version":3,"file":"index.4ece0dc4.js.map","sourceRoot":"/__parcel_source_root/"}